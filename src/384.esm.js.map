{
  "version": 3,
  "sources": ["../src/utils/json.ts", "../src/utils/buffers.ts", "../src/utils/sep.ts", "../src/utils/error.ts", "../src/utils/payloads.ts", "../src/utils/b64.ts", "../src/utils/b62.ts", "../src/sbCrypto/core.ts", "../src/utils/fetch.ts", "../src/utils/timeout.ts", "../src/file/SBFile.ts", "../src/storage/core.ts", "../src/storage/StorageToken.ts", "../src/storage/ObjectHandle.ts", "../src/storage/StorageApi.ts", "../src/utils/MessageQueue.ts", "../src/channel/config.ts", "../src/channel/ChannelMessage.ts", "../src/utils/b32mi.ts", "../src/utils/index.ts", "../src/sbCrypto/SB384.ts", "../src/channel/ChannelKeys.ts", "../src/channel/Protocol.ts", "../src/channel/Message.ts", "../src/storage/HistoryTree.ts", "../src/storage/MessageHistory.ts", "../src/channel/Channel.ts", "../src/channel/ChannelHandle.ts", "../src/utils/SBEventTarget.ts", "../src/channel/ChannelSocket.ts", "../src/channel/ChannelApi.ts", "../src/sbCrypto/strongpin.ts", "../src/sbCrypto/SBCrypto.ts", "../src/sbCrypto/index.ts", "../src/common.ts", "../src/boot/loadShard.ts", "../src/boot/tld.ts", "../src/boot/loaderLoader.ts", "../src/boot/serviceWorker.ts", "../src/boot/index.ts", "../src/strongphrase/strongphrase.ts", "../src/strongphrase/index.ts", "../src/utils/AsyncSequence.ts", "../src/browser/BrowserFileHelper.ts", "../src/channel/MessageType.ts", "../src/channel/MessageCache.ts", "../src/channel/ChannelStream.ts", "../src/file/SBFileSystem.ts", "../src/file/index.ts", "../src/browser/images.ts", "../src/browser/BrowserFileTable.ts", "../src/browser/browserPreviewFile.ts", "../src/browser/utils.ts", "../src/browser/index.ts", "../src/channel/index.ts", "../src/app/AppMain.ts", "../src/workers/workers.ts", "../src/index.ts"],
  "sourcesContent": ["/**\n * Adding a more resilient wrapper around JSON.parse. The 'loc' parameter is typically (file) line number.\n * @internal\n */\nexport function jsonParseWrapper(str: string | null, loc?: string, reviver?: (this: any, key: string, value: any) => any) {\n    while (str && typeof str === 'string') {\n      try {\n        str = JSON.parse(str, reviver) // handle nesting\n      } catch (e) {\n        throw new Error(`JSON.parse() error${loc ? ` at ${loc}` : ''}: ${e}\\nString (possibly nested) was: ${str}`)\n      }\n    }\n    return str as any\n  }\n  \n  // this is a simple pattern to check if a string is a simple JSON (object or array)\n  const simpleJsonPattern = /^\\s*[\\[\\{].*[\\]\\}]\\s*$/;\n  \n  /**\n   * Different version than jsonParseWrapper. Does not throw, and also checks for\n   * simple strings (which are not valid JSON) and would return those. Returns\n   * null if input is null, or it can't figure out what it is. Used in (low level)\n   * messaging contexts.\n   * @internal\n   */\n  export function jsonOrString(str: string | null) {\n    if (str === null) return null\n    if (typeof str === 'string') {\n      if (simpleJsonPattern.test(str)) {\n        try {\n          str = JSON.parse(str) // handle nesting\n          return str as any\n        } catch (e) {\n          return null\n        }\n      } else {\n        return str as string\n      }\n    } else {\n      return null\n    }\n  }", "// (c) 2024 384 (tm)\n\nconst bs2dv = (bs: BufferSource) => bs instanceof ArrayBuffer\n    ? new DataView(bs)\n    : new DataView(bs.buffer, bs.byteOffset, bs.byteLength)\n\n\n/**\n * Simple comparison of buffers\n * @internal\n */\nexport function compareBuffers(a: Uint8Array | ArrayBuffer | null, b: Uint8Array | ArrayBuffer | null): boolean {\n    if (typeof a !== typeof b) return false\n    if ((a == null) || (b == null)) return false\n    const av = bs2dv(a)\n    const bv = bs2dv(b)\n    if (av.byteLength !== bv.byteLength) return false\n    for (let i = 0; i < av.byteLength; i++)  if (av.getUint8(i) !== bv.getUint8(i)) return false\n    return true\n}\n\n/**\n* Appends an array of buffers and returns a new buffer\n* @internal\n*/\nexport function _appendBuffers(buffers: (Uint8Array | ArrayBuffer)[]): ArrayBuffer {\n    let totalLength = 0;\n    for (const buffer of buffers)\n        totalLength += buffer.byteLength;\n    const tmp = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const buffer of buffers) {\n        tmp.set(new Uint8Array(buffer), offset);\n        offset += buffer.byteLength;\n    }\n    return tmp.buffer;\n}\n\n", "export const _SEP_ = '='.repeat(76)\nexport const SEP = '\\n' + _SEP_ + '\\n'\nexport const _SEP = '\\n' + _SEP_\nexport const SEP_ = _SEP_ + '\\n'\n", "// (c) 2023 384 (tm)\n\nconst DBG0 = false\n\ndeclare var DBG2: boolean;\n\nimport { SEP } from 'src/utils/sep'\n\n// variation on solving this issue:\n// https://kentcdodds.com/blog/get-a-catch-block-error-message-with-typescript\n// @internal\nexport function WrapError(e: any) {\n    const pre = ' *ErrorStart* ', post = ' *ErrorEnd* '; // only for 'unknown' sources\n    if (e instanceof SBError) {\n      return e\n    } else if (e instanceof Error) {\n      // could use 'e' here, but some variations of 'e' do not allow 'message' to be accessed\n      if (DBG0) console.error('[WrapError] Error: \\n', e)\n      return new SBError(pre + e.message + post)\n    }\n    else return new SBError(pre + String(e) + post);\n  }\n  \n  // @internal\n  export function _sb_exception(loc: string, msg: string) {\n    const m = '[_sb_exception] << SB lib error (' + loc + ': ' + msg + ') >>';\n    // for now disabling this to keep node testing less noisy\n    // console.error(m);\n    throw new SBError(m);\n  }\n  \n  // @internal\n  export function _sb_assert(val: unknown, msg: string) {\n    if (!(val)) {\n      const m = ` <<<<[_sb_assert] assertion failed: '${msg}'>>>> `;\n      if (DBG0) console.trace(m)\n      throw new SBError(m);\n    }\n  }\n  \n  /** @internal */\n  export class SBError extends Error {\n    constructor(message: string) {\n      super(message);\n      this.name = this.constructor.name;\n      if (typeof (Error as any).captureStackTrace === 'function')\n        (Error as any).captureStackTrace(this, this.constructor);\n      else\n        this.stack = (new Error(message)).stack;\n      if (DBG2) {\n        let atLine: string | null = null\n        if (this.stack) {\n          const stackLines = this.stack!.split(\"\\n\");\n          for (let i = 1; i < stackLines.length; i++) {\n            if (stackLines[i].trim().startsWith(\"at\")) {\n              atLine = `${stackLines[i].trim()}`\n              break;\n            }\n          }\n        }\n        if (atLine !== null)\n          console.log('\\n', SEP, 'SBError():\\n', \"'\" + message + \"'\", '\\n', atLine, '\\n', SEP)\n        else\n          console.log('\\n', SEP, 'SBError():\\n', message, '\\n', SEP)\n      }\n    }\n  }\n  ", "// (c) 2023 384 (tm)\n\nimport { jsonParseWrapper } from 'src/utils/json';\nimport { _appendBuffers } from './buffers';\nimport { SBError } from 'src/utils/error';\nimport { SEP } from 'src/utils/sep';\n\nconst DBG0 = false;\n\n/**\n * Payloads\n * \n * To serialize/deserialize various javascript (data) structures into\n * binary and back, we define a 'payload' format. This is 'v003', for\n * the next version we should consider aligning with CBOR (RFC 8949).\n */\n\n// support for our internal type 'i' (32 bit signed integer)\nfunction is32BitSignedInteger(number: number) {\n  const MIN32 = -2147483648, MAX32 = 2147483647;\n  return (typeof number === 'number' && number >= MIN32 && number <= MAX32 && number % 1 === 0);\n}\n\n/**\n * Our internal type letters:\n * \n * a - Array\n * 8 - Uint8Array\n * b - Boolean\n * d - Date\n * i - Integer (32 bit signed)\n * j - JSON (stringify)\n * m - Map\n * 0 - Null\n * n - Number (JS internal)\n * o - Object\n * s - String\n * t - Set\n * u - Undefined\n * v - Dataview\n * x - ArrayBuffer\n * \n * @internal\n */\nfunction getType(value: any) {\n  if (value === null) return '0';\n  if (value === undefined) return 'u';\n  if (Array.isArray(value)) return 'a';\n  if (value instanceof ArrayBuffer) return 'x';\n  if (value instanceof Uint8Array) return '8';\n  if (typeof value === 'boolean') return 'b';\n  if (value instanceof DataView) return 'v';\n  if (value instanceof Date) return 'd';\n  if (value instanceof Map) return 'm';\n  if (typeof value === 'number') return is32BitSignedInteger(value) ? 'i' : 'n';\n  if (value !== null && typeof value === 'object' && value.constructor === Object) return 'o';\n  if (value instanceof Set) return 't';\n  if (typeof value === 'string') return 's';\n  if (value instanceof WeakRef) return 'w'; // Check for any WeakRef\n  // if (ArrayBuffer.isView(value) && !(value instanceof DataView)) {\n  //   // it's a typed array; currently we're only supporting Uint8Array\n  //   if (value.constructor.name === 'Uint8Array') return '8';\n  //   console.error(`[getType] Only supported typed array is Uint8Array (got '${value.constructor.name}')`);\n  //   return '<unsupported>';\n  // }\n  if (typeof value === 'object' && typeof value.then === 'function')\n    console.error(\"[getType] Trying to serialize a Promise - did you forget an 'await'?\");\n  else if (typeof value === 'object' && typeof value.toJSON === 'function')\n    return 'j'; // JSON.stringify(value) will be used\n  else\n    console.error('[getType] Unsupported for object:', value);\n  throw new SBError('Unsupported type');\n}\n\nfunction _assemblePayload(data: any): ArrayBuffer | null {\n  try {\n    const metadata: any = {};\n    let keyCount = 0;\n    let startIndex = 0;\n    let BufferList: Array<ArrayBuffer> = [];\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        const value = data[key];\n        const type = getType(value);\n        // if (DBG2) console.log(`[assemblePayload] key: ${key}, type: ${type}`)\n        switch (type) {\n          case 'o': // Object (eg structure)\n            const payload = _assemblePayload(value);\n            if (!payload) throw new SBError(`Failed to assemble payload for ${key}`);\n            BufferList.push(payload);\n            break;\n          case 'j': // JSON\n            // const jsonValue = new TextEncoder().encode(JSON.stringify(value));\n            // 20240408 update: actually, it's the same as 'o' except we first call toJSON\n            // BufferList.push(jsonValue.buffer);\n            const toJSONvalue = _assemblePayload(value.toJSON(\"\"));\n            if (!toJSONvalue) throw new SBError(`Failed to process toJSON for ${key}`);\n            BufferList.push(toJSONvalue);\n            break;\n          case 'n': // Number (IEEE 754 double precision)\n            const numberValue = new Uint8Array(8);\n            new DataView(numberValue.buffer).setFloat64(0, value);\n            BufferList.push(numberValue.buffer);\n            break;\n          case 'i': // Integer (32 bit signed)\n            const intValue = new Uint8Array(4);\n            new DataView(intValue.buffer).setInt32(0, value);\n            BufferList.push(intValue.buffer);\n            break;\n          case 'd': // Date\n            const dateValue = new Uint8Array(8);\n            new DataView(dateValue.buffer).setFloat64(0, value.getTime());\n            BufferList.push(dateValue.buffer);\n            break;\n          case 'b': // Boolean\n            const boolValue = new Uint8Array(1);\n            boolValue[0] = value ? 1 : 0;\n            BufferList.push(boolValue.buffer);\n            break;\n          case 's': // String\n            const stringValue = new TextEncoder().encode(value);\n            BufferList.push(stringValue);\n            break;\n          case 'x': // ArrayBuffer\n            BufferList.push(value);\n            break;\n          case '8': // Uint8Array\n            BufferList.push(value.buffer);\n            break;\n          case 'm': // Map\n            const mapValue = new Array();\n            value.forEach((v: any, k: any) => {\n              mapValue.push([k, v]);\n            });\n            const mapPayload = _assemblePayload(mapValue);\n            if (!mapPayload) throw new SBError(`Failed to assemble payload for ${key}`);\n            BufferList.push(mapPayload);\n            break;\n          case 'a': // Array\n            const arrayValue = new Array();\n            value.forEach((v: any) => {\n              arrayValue.push(v);\n            });\n            const arrayPayload = _assemblePayload(arrayValue);\n            if (!arrayPayload) throw new SBError(`Failed to assemble payload for ${key}`);\n            BufferList.push(arrayPayload);\n            break;\n          case 't': // Set\n            const setValue = new Array();\n            value.forEach((v: any) => {\n              setValue.push(v);\n            });\n            const setPayload = _assemblePayload(setValue);\n            if (!setPayload) throw new SBError(`Failed to assemble payload for ${key}`);\n            BufferList.push(setPayload);\n            break;\n          case 'w': // WeakRefs are treated as 'null'\n          case '0': // Null\n            BufferList.push(new ArrayBuffer(0));\n            break;\n          case 'u': // Undefined\n            BufferList.push(new ArrayBuffer(0));\n            break;\n          case 'v': // Dataview, not supporting for now\n          default:\n            console.error(`[assemblePayload] Unsupported type: ${type}`);\n            throw new SBError(`Unsupported type: ${type}`);\n        }\n        const size = BufferList[BufferList.length - 1].byteLength;\n        keyCount++;\n        metadata[keyCount.toString()] = { n: key, s: startIndex, z: size, t: type };\n        startIndex += size;\n      }\n    }\n\n    const metadataBuffer = new TextEncoder().encode(JSON.stringify(metadata));\n    const metadataSize = new Uint32Array([metadataBuffer.byteLength]);\n\n    let payload = _appendBuffers([metadataSize.buffer, metadataBuffer, ...BufferList]);\n\n    return payload;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}\n\n/**\n * Assemble payload. This creates a single binary (wire) format\n * of an arbitrary set of (named) binary objects. os384 payloads\n * are always ArrayBuffer objects, and always start with a 4-byte\n * identifier 0xAABBBBAA (which is easy to spot in a hex editor).\n * @public\n */\nexport function assemblePayload(data: any): ArrayBuffer | null {\n  if (DBG0 && data instanceof ArrayBuffer) console.warn('[assemblePayload] Warning: data is already an ArrayBuffer, make sure you are not double-encoding');\n  const mainPayload = _assemblePayload({ ver003: true, payload: data })\n  if (!mainPayload) return null;\n  return _appendBuffers([new Uint8Array([0xAA, 0xBB, 0xBB, 0xAA]), mainPayload]);\n}\n\nfunction deserializeValue(buffer: ArrayBuffer, type: string): any {\n  switch (type) {\n    case 'o':\n      return _extractPayload(buffer);\n    case 'j': // JSON\n      // if it can be extracted as a JSON, then it was stored by JSON.stringify\n      try {\n        return JSON.parse(new TextDecoder().decode(buffer));\n      } catch (e) {\n        // otherwise treat it as 'o'\n        return _extractPayload(buffer);\n      }\n    // return jsonParseWrapper(new TextDecoder().decode(buffer), \"L1322\");\n    case 'n': // Number\n      return new DataView(buffer).getFloat64(0);\n    case 'i': // Integer (32 bit signed)\n      return new DataView(buffer).getInt32(0);\n    case 'd': // Date\n      return new Date(new DataView(buffer).getFloat64(0));\n    case 'b': // Boolean\n      return new Uint8Array(buffer)[0] === 1;\n    case 's': // String\n      return new TextDecoder().decode(buffer);\n    case 'a': // Array\n      const arrayPayload = _extractPayload(buffer);\n      if (!arrayPayload) throw new SBError(`Failed to assemble payload for ${type}`);\n      return Object.values(arrayPayload);\n    case 'm': // Map\n      const mapPayload = _extractPayload(buffer);\n      if (!mapPayload) throw new SBError(`Failed to assemble payload for ${type}`);\n      const map = new Map();\n      for (const key in mapPayload) {\n        map.set(mapPayload[key][0], mapPayload[key][1]);\n      }\n      return map;\n    case 't': // Set\n      const setPayload = _extractPayload(buffer);\n      if (!setPayload) throw new SBError(`Failed to assemble payload for ${type}`);\n      const set = new Set();\n      for (const key in setPayload) {\n        set.add(setPayload[key]);\n      }\n      return set;\n    case 'x': // ArrayBuffer\n      return buffer;\n    case '8': // Uint8Array\n      return new Uint8Array(buffer);\n    case '0': // Null\n      return null;\n    case 'u': // Undefined\n      return undefined;\n    case 'v':\n    case '<unsupported>':\n    default:\n      throw new SBError(`Unsupported type: ${type}`);\n  }\n}\n\nfunction _extractPayload(payload: ArrayBuffer): any {\n  const parsingMsgError = 'Cannot parse metadata, this is not a well-formed payload';\n  // if (DBG2) console.log(`[extractPayload] payload: ${payload.byteLength} bytes`)\n  try {\n    const metadataSize = new Uint32Array(payload.slice(0, 4))[0];\n    const decoder = new TextDecoder();\n    const json = decoder.decode(payload.slice(4, 4 + metadataSize));\n    let metadata: any;\n    try {\n      metadata = jsonParseWrapper(json, \"L1290\");\n    } catch (e) {\n      throw new SBError(parsingMsgError);\n    }\n    const startIndex = 4 + metadataSize;\n\n\n    const data: any = {};\n    for (let i = 1; i <= Object.keys(metadata).length; i++) {\n      const index = i.toString();\n      if (metadata[index]) {\n        const entry = metadata[index];\n        const propertyStartIndex = entry['s'];\n        const size = entry['z'];\n        const type = entry['t'];\n        const buffer = payload.slice(startIndex + propertyStartIndex, startIndex + propertyStartIndex + size);\n        data[entry['n']] = deserializeValue(buffer, type);\n      } else {\n        console.log(`found nothing for index ${i}`);\n      }\n    }\n    return data;\n  } catch (e) {\n    // if it's the exception we threw above, just rethrow it\n    if (e instanceof Error && e.message === parsingMsgError) throw e;\n    throw new SBError('[extractPayload] exception <<' + e + '>> [/extractPayload]');\n  }\n}\n/**\n * Extract payload - this decodes from our binary (wire) format\n * to a JS object. This supports a wide range of objects.\n * @public\n */\nexport function extractPayload(value: ArrayBuffer): any {\n  const verifySignature = (v: ArrayBuffer) => new Uint32Array(v, 0, 1)[0] === 0xAABBBBAA;\n  const msg = 'Invalid payload signature (this is not a payload)';\n  if (!verifySignature(value)) {\n    if (DBG0) console.error('\\n', SEP, msg, '\\n', value as any, SEP);\n    throw new SBError(msg);\n  }\n  // now i need to strip out the first four bytes\n  return _extractPayload(value.slice(4));\n}", "// (c) 2024 384 (tm)\n\n/**\n * TL;DR on the 'base64 issue' (and it's a bit of a moving target):\n *\n * - btoa() and atob() are available in clients (browsers), but not in backends.\n *   In Node.js, they are not part of the core API and are flagged as deprecated\n *   in tooling like VSCode/TypeScript due to the '@deprecated' tag in type\n *   definitions. They are not available in Cloudflare Workers.\n *\n * - The 'Buffer' class is available in both Node.js and Cloudflare Workers but\n *   is not available in the browser. Deno, which is arguably 'backend',\n *   includes btoa() and atob(), but not Buffer.\n *\n * - Tooling like VSCode may default to Node typings and indicate that btoa/atob\n *   are 'deprecated' unless configured for a specific environment (e.g.,\n *   browser or Deno).\n *\n * Since we're not processing large amounts of base64 data (for which btoa() and\n * atob() are not well-suited anyway), we implement our own base64 encoding and\n * decoding functions for simplicity and consistent cross-environment\n * functionality. Our only real real need for this format is JWK, hence we only\n * implement the base64url variant. For our own use cases, we use base62.\n * \n * @public\n */\nexport const base64url = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nconst b64urlRegex = /^([A-Za-z0-9\\-_]*)(={0,2})$/ // strict (ish)\n\n/**\n * Converts an ArrayBuffer to base64url. \n * @public\n */\nexport function arrayBufferToBase64url(buffer: ArrayBuffer | Uint8Array): string {\n  const bytes = buffer instanceof ArrayBuffer ? new Uint8Array(buffer) : buffer;\n  let result = '';\n  for (let i = 0; i < bytes.length; i += 3) {\n    const b1 = bytes[i], b2 = bytes[i + 1], b3 = bytes[i + 2];\n    result += base64url[b1 >> 2] +\n      base64url[((b1 & 0x03) << 4) | (b2 >> 4)] +\n      (b2 !== undefined ? base64url[((b2 & 0x0f) << 2) | (b3 >> 6)] : '') +\n      (b3 !== undefined ? base64url[b3 & 0x3f] : '');\n  }\n  return result;\n}\n\n/**\n * Converts base64/base64url to ArrayBuffer. We're tolerant of inputs. Despite\n * it's name, we return Uint8Array.\n * \n * @public\n */\nexport function base64ToArrayBuffer(s: string): Uint8Array {\n  s = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  if (!b64urlRegex.test(s)) throw new Error(`invalid character in b64 string (after cleanup: '${s}')`)\n  const len = s.length;\n  const bytes = new Uint8Array(len * 3 / 4);\n  for (let i = 0, p = 0; i < len; i += 4) {\n    const [a, b, c, d] = [s[i], s[i + 1], s[i + 2], s[i + 3]].map(ch => base64url.indexOf(ch));\n    bytes[p++] = (a << 2) | (b >> 4);\n    if (c !== -1) bytes[p++] = ((b & 15) << 4) | (c >> 2);\n    if (d !== -1) bytes[p++] = ((c & 3) << 6) | d;\n  }\n  return bytes;\n}\n\n", "// (c) 2023-2024 384 (tm)\n\n/**\n * 'base62' encodes binary data in (pure) alphanumeric format.\n * We use a dictionary of (A-Za-z0-9) and chunks of 32 bytes.\n * \n * We use this for all 'external' encodings of keys, ids, etc.\n * \n * See `arrayBufferToBase62` and `base62ToArrayBuffer` for the\n * actual encoding and decoding functions.\n * \n * @public\n */\nexport type Base62Encoded = string & { _brand?: 'Base62Encoded' };\n\nexport const base62 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nconst base62zero = base62[0]; // our padding value\n\nexport const b62regex = /^[A-Za-z0-9]*$/;\nexport const base62regex = b62regex; // alias\nexport function isBase62Encoded(value: string | Base62Encoded): value is Base62Encoded {\n  return b62regex.test(value); // type guard\n}\n\nconst N = 32; // max chunk size, design point. \n\nconst M = new Map<number, number>(), invM = new Map<number, number>();\nfor (let X = 1; X <= N; X++) {\n  const Y = Math.ceil((X * 8) / Math.log2(62));\n  M.set(X, Y);\n  invM.set(Y, X);\n}\nconst maxChunk = M.get(N)!; // max encoded (string) chunk implied by 'N'\n\n\n/**\n * Converts any array buffer to base62.\n * @public\n */\nexport function arrayBufferToBase62(buffer: ArrayBuffer | Uint8Array): string {\n  function _arrayBufferToBase62(buffer: Uint8Array, c: number): string {\n    let result = '', n = 0n;\n    for (const byte of buffer)\n      n = (n << 8n) | BigInt(byte);\n    for (; n > 0n; n = n / 62n)\n      result = base62[Number(n % 62n)] + result;\n    return result.padStart(M.get(c)!, base62zero);\n  }\n  if (buffer === null || buffer === undefined) throw new Error('arrayBufferToBase62: buffer is null or undefined');\n  const buf = buffer instanceof ArrayBuffer ? new Uint8Array(buffer) : buffer\n  let result = '';\n  for (let l = buf.byteLength, i = 0, c; l > 0; i += c, l -= c) {\n    c = l >= N ? N : l; // chunks are size 'N' (32)\n    result += _arrayBufferToBase62(buf.slice(i, i + c), c);\n  }\n  return result;\n}\n\n/**\n * Converts a base62 string to matching ArrayBuffer.\n * @public\n */\nexport function base62ToArrayBuffer(s: string): ArrayBuffer {\n  if (!b62regex.test(s)) throw new Error('base62ToArrayBuffer: must be alphanumeric (0-9A-Za-z).');\n  function _base62ToArrayBuffer(s: string, t: number): Uint8Array {\n    try {\n      let n = 0n, buffer = new Uint8Array(t);\n      for (let i = 0; i < s.length; i++)\n        n = n * 62n + BigInt(base62.indexOf(s[i]));\n      if (n > 2n ** BigInt(t * 8) - 1n)\n        throw new Error('base62ToArrayBuffer: Invalid Base62 string.'); // exceeds (t * 8) bits\n      for (let i = t - 1; i >= 0; i--, n >>= 8n)\n        buffer[i] = Number(n & 0xFFn);\n      return buffer;\n    } catch (e) {\n      throw new Error('base62ToArrayBuffer: Invalid Base62 string.'); // 'NaN' popped up\n    }\n  }\n  try {\n    let j = 0, result = new Uint8Array(s.length * 6 / 8); // we know we're less than 6\n    for (let i = 0, c, newBuf; i < s.length; i += c, j += newBuf.byteLength) {\n      c = Math.min(s.length - i, maxChunk);\n      newBuf = _base62ToArrayBuffer(s.slice(i, i + c), invM.get(c)!)\n      result.set(newBuf, j);\n    }\n    return result.buffer.slice(0, j);\n  } catch (e) { throw e; }\n}\n", "\n\n/**\n * Import keys\n * @public\n */\nexport async function importKey(format: KeyFormat, key: BufferSource | JsonWebKey, type: 'ECDH' | 'AES' | 'PBKDF2', extractable: boolean, keyUsages: KeyUsage[]) {\n    try {\n        let importedKey: CryptoKey\n        const keyAlgorithms = {\n            ECDH: { name: 'ECDH', namedCurve: 'P-384' },\n            AES: { name: 'AES-GCM' },\n            PBKDF2: 'PBKDF2'\n        }\n        if (format === 'jwk') {\n            // sanity check it's a JsonWebKey and not a BufferSource or something else\n            const jsonKey = key as JsonWebKey\n            if (jsonKey.kty === undefined) throw new Error('importKey() - invalid JsonWebKey');\n            if (jsonKey.alg === 'ECDH')\n                jsonKey.alg = undefined; // todo: this seems to be a Deno mismatch w crypto standards?\n            importedKey = await crypto.subtle.importKey('jwk', jsonKey, keyAlgorithms[type], extractable, keyUsages)\n            // if (jsonKey.kty === 'EC')\n            //   // public/private keys are cached\n            //   this.addKnownKey(importedKey)\n        } else {\n            importedKey = await crypto.subtle.importKey(format, key as BufferSource, keyAlgorithms[type], extractable, keyUsages)\n        }\n        return (importedKey)\n    } catch (e) {\n        const msg = `... importKey() error: ${e}:`\n        throw new Error(msg)\n    }\n}\n", "// (c) 2023 384 (tm)\n\nconst DBG0 = false;\n\nimport { SBError } from 'src/utils/error'\nimport { extractPayload } from 'src/utils/payloads';\nimport { SEP } from 'src/utils/sep'\nimport { jsonParseWrapper } from 'src/utils/json';\n\ndeclare var DBG2: boolean;\n\n/**\n * sets default function to use for 'fetch'. ChannelApi() can change\n * this upon creation (globally) if another network operation is needed.\n * for example the channel server will override this internally\n * @pubic\n */\nvar sbFetch: ((input: RequestInfo | URL, init?: RequestInit) => Promise<Response>) = SBFetch\n\nexport function setSBFetch(f: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>) {\n    sbFetch = f\n}\nexport function getSBFetch() {\n    return sbFetch\n}\n\n// shared global set of fetches, sockets, etc, for closeAll()\nconst activeFetches = new Map<symbol, AbortController>()\n\nexport function abortActiveFetches() {\n    activeFetches.forEach(controller => controller.abort('ChannelApi.closeAll() called'));\n    activeFetches.clear();\n}\n\n/**\n * For various reasons, we wrap 'fetch()' - this function (SBFetch) should be\n * the ONLY place that directly calls browser/deno 'fetch()' operation.\n * \n * Network operations have a special relationship with ChannelApi, for example,\n * it will keep track of all active fetches, and if the channel is shutting down\n * it will cancel all active fetches.\n * \n * @internal\n */\nexport async function SBFetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {\n    const controller = new AbortController();\n    const id = Symbol('fetch');\n    activeFetches.set(id, controller);\n    try {\n        const response = await fetch(input, { ...init, signal: controller.signal });\n        // ToDo: kludge for now, to avoid pullin all sorts of code int service-worker\n        // if (ChannelApi.isShutdown) { // your global shutdown flag\n        //     await response.body?.cancel('shutDown')\n        //     throw new SBError('Fetch aborted (shutDown)');\n        // }\n        return response;\n    } catch (error: any) {\n        if (error instanceof SBError) throw error\n        // we try to harden slightly to handle a few recurring (long-run) issues;\n        // some that have been reported for a long time with Deno\n        const errStr = `${error}`\n        if (\n            errStr.indexOf('connection closed before message completed') !== -1 ||\n            errStr.indexOf('Connection reset by peer') !== -1 ||\n            errStr.indexOf('The connection was reset') !== -1 ||\n            errStr.indexOf('The server closed the connection') !== -1 ||\n            errStr.indexOf('Please try sending the request again.') !== -1\n        ) {\n            console.warn(`... got error ('${errStr}'), retrying fetch() once again`);\n            try {\n                return await new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(fetch(input, { ...init, signal: controller.signal }));\n                    }, 0);\n                });\n            } catch (e) {\n                console.error('... got an error on retrying fetch()');\n                const msg = `[SBFetch] Error performing fetch() (after RETRY): ${error}`;\n                throw new SBError(msg);\n            }\n        } else {\n            const msg = `[SBFetch] Error performing fetch() (this might be normal): ${error}`;\n            throw new SBError(msg);\n        }\n    } finally {\n        activeFetches.delete(id);\n    }\n}\n\n/**\n * Wrapper to SBFetch that applies SB API calling conventions on both sides\n * of the call; it will return whatever data structure the server returns, note\n * that it will extract the reply (either from json or from payload). if there\n * are any issues or if the reply contains an error message, it will throw an\n * error.\n * @internal\n */\nexport async function SBApiFetch(input: RequestInfo | URL, init?: RequestInit): Promise<any> {\n  let response\n  try {\n    response = await sbFetch(input, init)\n    if (!response) throw new SBError(\"[SBApiFetch] Server did not respond (might be expected)\");\n\n    if (!response.ok) {\n      const text = await response.text()\n      let msg = '[SBApiFetch] Server responded with error\\n'\n      if (response.status) msg += `  Status code: ('${response.status}')\\n`\n      if (response.statusText) msg += `  Status text: ('${response.statusText}')\\n`\n      if (text) msg += `  Error msg:   ('${text}')\\n`\n      if (DBG0) console.log(msg)\n      throw new SBError(msg)\n    }\n\n    const contentType = response.headers.get('content-type');\n    var retValue: any\n    if (!contentType)\n      throw new SBError(\"[SBApiFetch] No content header in server response\");\n\n    if (contentType.indexOf(\"application/json\") !== -1) {\n      const json = await response.json()\n      if (DBG2) console.log(`[SBApiFetch] json ('${json}'):\\n`, json)\n      retValue = jsonParseWrapper(json, \"L489\");\n    } else if (contentType.indexOf(\"application/octet-stream\") !== -1) {\n      retValue = extractPayload(await response.arrayBuffer()).payload\n    } else if (contentType.indexOf(\"text/plain\") !== -1) {\n      retValue = await response.text()\n      // ToDo: possibly add support for server errors such as:\n      // 'Your worker restarted mid-request. Please try sending the request again.'\n      // ... but then again, Wrangler has soooo many failure modes ...\n      throw new SBError(`[SBApiFetch] Server responded with text/plain (?):\\n('${retValue}')`);\n    } else {\n      throw new SBError(`[SBApiFetch] Server responded with unknown content-type header ('${contentType}')`);\n    }\n\n    if (/* !response.ok || */ !retValue || retValue.error || retValue.success === false) {\n      let apiErrorMsg = '[SBApiFetch] No server response, or cannot parse, or error in response'\n      if (response.status) apiErrorMsg += ' [' + response.status + ']'\n      if (retValue?.error) apiErrorMsg += ': ' + retValue.error\n      if (DBG2) console.error(\"[SBApiFetch] error:\\n\", apiErrorMsg)\n      throw new SBError(apiErrorMsg)\n    } else {\n      if (DBG2) console.log(\n        \"[SBApiFetch] Success:\\n\",\n        SEP, input, '\\n',\n        SEP, retValue, '\\n', SEP)\n      return (retValue)\n    }\n\n  } catch (e) {\n    if (DBG2) console.error(`[SBApiFetch] caught error: ${e}`)\n    if (response && response.body && !response.body.locked) {\n      // occasionally we need to clean up, if the fetch gave a response but some\n      // operation on the response failed (or some other weird stuff happens)\n      if (DBG2) console.log('[SBApiFetch] cancelling response body')\n      await response.body.cancel();\n    }\n    if (e instanceof SBError) throw e\n    else throw new SBError(`[SBApiFetch] caught error: ${e}`)\n  }\n}", "// (c) 2024 384 (tm)\n\n// ToDo: these newer versions are composable, and we should try them in \n//       various parts of the code\n\n/**\n * Will retry 'something', regardless of reason of failure. Typically used\n * for things like server API calls where there might be glitches. Note\n * that it will wait a little bit between retries. Optional second\n * argument is the number of milliseconds to wait between retries\n * (default is 200).\n */\nexport function Retry(retries: number, ms = 200) {\n    return function (_target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args: any[]) {\n            let attempt = 0;\n            const execute = async (): Promise<any> => {\n                try {\n                    return await originalMethod.apply(this, args);\n                } catch (error) {\n                    if (attempt < retries) {\n                        attempt++;\n                        console.warn(`Method '${propertyKey}' got an error (could be a timeout), will retry - next will be ${attempt}/${retries}\\nError was:`, error);\n                        // we first wait a bit before retrying\n                        await new Promise(resolve => setTimeout(resolve, ms));\n                        return execute(); // Recursively retry\n                    } else {\n                        throw error; // Rethrow after all retries are exhausted\n                    }\n                }\n            };\n            return execute();\n        };\n    };\n}\n\n// function Timeout(ms: number) {\n//     return function (_target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n//         const originalMethod = descriptor.value;\n//         descriptor.value = function (...args: any[]) {\n//             return new Promise((resolve, reject) => {\n//                 const timer = setTimeout(() => {\n//                     reject(new Error(`Method '${propertyKey}' timed out after ${ms} ms`));\n//                 }, ms);\n//                 originalMethod.apply(this, args).then(\n//                     (response) => {\n//                         clearTimeout(timer);\n//                         resolve(response);\n//                     },\n//                     (error) => {\n//                         clearTimeout(timer);\n//                         reject(error);\n//                     }\n//                 );\n//             });\n//         };\n//     };\n// }\n\nfunction withTimeoutRetry<T>(promiseFn: () => Promise<T>, ms: number, retries: number, methodName: string): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n        let attempts = 0;\n        const attempt = () => {\n            const timeout = new Promise<T>((_, timeoutReject) => {\n                const id = setTimeout(() => {\n                    clearTimeout(id);\n                    timeoutReject(new Error(`Method '${methodName}' timed out (each attempt got ${ms} ms).` + (attempts > 0 ? ` After ${attempts + 1} attempts.` : '')));\n                }, ms);\n            });\n\n            Promise.race([promiseFn(), timeout]).then(resolve, async error => {\n                if (attempts < retries) {\n                    attempts++;\n                    console.log(`Method '${methodName}' timed out, will retry - next will be ${attempts}/${retries}`);\n                    // we first wait a bit before retrying\n                    await new Promise(resolve => setTimeout(resolve, 200));\n                    attempt(); // retry\n                } else {\n                    reject(error);\n                }\n            });\n        };\n        attempt();\n    });\n}\n\n/**\n * Decorator to add a timeout with retry logic to a method\n *\n * Example:\n *\n * ```ts\n *   class DataLoader {\n *      @Timeout(500, 2)\n *      async fetchData() {\n *        return new Promise(resolve => setTimeout(() => resolve(\"Data loaded\"), 1000));\n *      }\n *    }\n * ```\n */\nexport function Timeout(ms: number, retries: number = 0) {\n    return function (_target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args: any[]) {\n            return withTimeoutRetry(() => originalMethod.apply(this, args), ms, retries, propertyKey);\n        };\n    };\n}\n\n\n/**\n * Similar to Timeout, but with a hard-coded timeout value of 500 ms\n * @internal\n */\nexport function Timeout500(_target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    const ms = 500; // Hard-coded timeout value\n\n    descriptor.value = function (...args: any[]) {\n        const timeoutPromise = new Promise((_, reject) => {\n            const id = setTimeout(() => {\n                clearTimeout(id);\n                reject(new Error(`Method '${propertyKey}' timed out after ${ms} ms`));\n            }, ms);\n        });\n\n        return Promise.race([\n            originalMethod.apply(this, args),\n            timeoutPromise\n        ]);\n    };\n}\n\n// /* earlier version */\n// function withTimeout<T>(promise: Promise<T>, ms: number, methodName: string): Promise<T> {\n//     const timeout = new Promise<T>((_, reject) => {\n//         const id = setTimeout(() => {\n//             clearTimeout(id);\n//             reject(new Error(`Method '${methodName}' timed out after ${ms} ms`));\n//         }, ms);\n//     });\n//     return Promise.race([promise, timeout]);\n// }\n\n// export function Timeout(ms: number) {\n//     return function (_target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n//         const originalMethod = descriptor.value;\n//         descriptor.value = function (...args: any[]) {\n//             return withTimeout(originalMethod.apply(this, args), ms, propertyKey);\n//         };\n//     };\n// }\n", "// (c) 2023-2024 384 (tm)\n\nimport { ObjectHandle } from 'src/storage/ObjectHandle'\n\nconst SB_FILE_SYMBOL = Symbol('SBFile');\nconst DBG0 = false;\n\n/**\n * A 'file' in os384. Reminder that we do not have 'directories' or\n * 'hierarchical' structure, since they are inherently spatial and 'physical'\n * (eg ordering on a disk). In os384, the primitive is a set: an 'empty\n * directory' would be represented as an empty set which has a path, for\n * example. Any single file is just a singleton set. A 'directory' will be seen\n * as a set of multiple files, where properties such as 'path' and 'fullPath'\n * are retained such that, if ever desired, a 'directory' can be reconstructed.\n * \n * It should also be noted that SBFile works 'behind the curtain', meaning,\n * it assumes that things are decrypted and verified etc. For example, the\n * handles will contain keys, eg, SBFile objects themselves assume that they\n * are always stored or communicated within encrypted contexts. \n * \n * The 'generic/typical' pattern in os384 is that meta data like SBFile would\n * be shared as messages, either individually or as part of a set. Thus, SBFile\n * combines the challenges of key management and meta data, about data.\n * \n * Whenever an SBFile object is 'entering' lib384, pass the object through\n * the constructor.\n * \n * @public \n */\nexport class SBFile {\n    _SBFSVersion = '2024-02-01-0002';\n    [SB_FILE_SYMBOL] = true;\n\n    public static appServer?: string;\n\n    /** storage server generally allows larger than this (eg 16 or 32 MiB). however, in various situations,\n        it's problematic to juggle lots of these 'in flight' (eg, in edge worker memory). thus, we currently\n        limit to 4 MiB, which gives most of the theoretical performance on the client reading side, and appears\n        to be tolerated by various other 'things'. */\n    public static MAX_SBFILE_CHUNK_SIZE = 4 * 1024 * 1024; // 16MB\n\n    sb384app?: boolean;\n    sb384appType?: string;\n    sb384appVersion?: number;\n\n    /** must be _universally unique_, can be constructed in different ways */\n    hash?: string;\n\n    /** typically the name on the file system */\n    name?: string;\n\n    /** path to where the file is, eg '/' */\n    path?: string;\n    /** full path from root including file, eg 'canonical' file name and path */\n    fullPath?: string; \n\n    /** MIME type, eg \"application/pdf\";\n        we use 'application/vnd.384.sb384app' to signal our own 'set' format\n        (not yet registered at https://www.iana.org/form/media-types) */\n    type?: string;\n\n    /** size as reported when file was read by browser */\n    size?: number; \n    /** size it takes up on a shard server (padded, encrypted, etc.) */\n    actualFileSize?: number; \n\n    lastModified?: string; // refers to the file's last modified date (according to the browser)\n\n    /**\n     * 'fullName' constructed by sbfs to be _globally_ unique for a file:\n     * name of file ('on disk'), last modified date, size, and sha256 hash of (unencrypted) contents\n     */\n    fullName?: string; // eg \"/[0] Lecture 0 point 9 (v06).pdf [5/7/2021, 4:06:43 PM] [6853441 bytes] [6PNWGTx34llE]\",\n\n    // subset of 'fullName', excluding file name, eg only particulars 'inherent' in file\n    metaDataString?: string // eg \" [5/7/2021, 4:06:43 PM] [6853441 bytes] [6PNWGTx34llE]\"\n\n    timeStamp?: number; // this is when SBFile object was created/uploaded\n\n    // an SBFile is it's own organizer\n    fileMetaDataMap?: Map<string, SBFile>;\n\n    // uniqueShardId?: string; // the shardId (regardless if it's inline or not)\n    // uniqueId?: string;      // unique identifier, might be same as uniqueShardId\n\n    /** if 'inline', contents is in 'file' */\n    fileLocation?: string; // 'inline' means 'file' has contents\n\n    /** actual file contents (if present); raw contents */\n    file?: ArrayBuffer;\n\n    /** historically we only supported up to chunk sizes files; to remain backwards compatible,\n        a 'singleton' file (eg a file with contents smaller than chunk size) can either be\n        directly as property 'handle', or as a singleton array '[handle]' */\n    handle?: ObjectHandle;\n\n    /** file contents are one or more shards. if there are more than one, then all except\n        for the last one will be of size 'MAX_SBFILE_CHUNK_SIZE', the last one might be smaller. */\n    handleArray?: ObjectHandle[];\n\n    /** if present, a temporary hash array (eg for a set of files); if this is present,\n        but 'handleArray' is not, then this is a large file and upload is in progress */\n    hashArray?: string[];\n\n    /** if present, link to the file/set on an app server\n        eg: `${configuration.sb384appServer}/#${res.id}_${res.verification}_${res.key}_auto` */\n    link?: string;\n\n    browserFile?: File; // browser file object\n\n    constructor(\n        fileInfo: {\n            [key: string]: any;\n        } = {}\n    ) {\n        const properties = [\n            'actualFileSize', 'browserFile', 'file', 'fileLocation', 'fileMetaDataMap',\n            'fullName', 'fullPath', 'handle', 'handleArray', 'hash', 'hashArray', 'lastModified', 'link',\n            'metaDataString', 'name', 'path', 'sb384app', 'sb384appType', 'sb384appVersion',\n            'size', 'timeStamp', 'type'\n        ];\n        for (const property of properties) {\n            const prop = property as keyof typeof this;\n            if (fileInfo[property] !== undefined) this[prop] = fileInfo[property];\n            else delete this[prop];\n        }\n        if (DBG0) console.log(\"SBFile constructor:\\n\", this)\n    }\n\n    /** we use serialization as a forcing point to ensure that the object is complete\n        and consistent. our principal use of serialization is in fact not JSON.stringify\n        but our own packaging and unpackaging of objects for transmission. See 'getType()'. */\n    toJSON(_key?: string) {\n        if (_key && _key !== '') console.log(\"SBFile toJSON key: \", _key)\n        if (this.size && this.size > SBFile.MAX_SBFILE_CHUNK_SIZE) {\n            // it's a large file, so we do some separate consistency checking\n            if (this.hashArray && this.hashArray.length > 0)\n                throw new Error(\"[SBFile object] Large file, and it has not yet been fully uploaded\")\n            if (!this.handleArray) throw new Error(\"[SBFile object] Large file must have handleArray\")\n            if (Math.ceil(this.size! / SBFile.MAX_SBFILE_CHUNK_SIZE) !== this.handleArray.length)\n                throw new Error(\"[SBFile object] Large file size does not match number of expected shards\")\n        } else if (this.fileMetaDataMap && this.fileMetaDataMap.size > 0 && !this.handleArray) {\n            // SBFile is a set, all SBFile components are in the map\n        } else if (this.handle) {\n            // singleton\n            if (!this.handleArray)\n                // future-proofing\n                this.handleArray = [this.handle];\n        } else {\n            if (this.fileLocation === 'inline')\n                throw new Error(\"[SBFile object] Inline files cannot be serialized\")\n            if (!this.handleArray || this.handleArray.length === 0)\n                throw new Error(\"[SBFile object] No handle nor handleArray, this is probably an error.\")\n            if (this.handleArray && this.handleArray.length !== 1)\n                throw new Error(\"[SBFile object] Internal Error (L146)\")\n            if (this.handleArray && this.handleArray[0].verification) {\n                // we need to check that it has been resolved\n                const handleVerificationPromiseOrString = this.handleArray[0].verification;\n                if (typeof handleVerificationPromiseOrString === 'string')\n                    this.handleArray[0].verification = handleVerificationPromiseOrString; // make sure\n                else\n                    throw new Error(\"[SBFile object] Cannot serialize unresolved handle yet (verification not resolved)\")\n                this.handle = this.handleArray[0]; // backwards compatibility\n            } else {\n                throw new Error(\"[SBFile object] Singleton shard, handle has no verification value, this is probably an error.\")\n            }\n        }\n\n        // for future reference, this is full list of properties\n        // const obj = Object.fromEntries(Object.entries(this).filter(([_, v]) => v !== undefined));\n\n        // we only serialize the main properties\n        let obj: { [k: string]: any; } = {\n            _SBFSVersion: this._SBFSVersion,\n            actualFileSize: this.actualFileSize,\n            fileLocation: this.fileLocation,\n            fileMetaDataMap: this.fileMetaDataMap,\n            fullName: this.fullName,\n            fullPath: this.fullPath,\n            handle: this.handle,\n            handleArray: this.handleArray,\n            hash: this.hash,\n            lastModified: this.lastModified,\n            link: this.link,\n            metaDataString: this.metaDataString,\n            name: this.name,\n            path: this.path,\n            sb384app: this.sb384app,\n            sb384appType: this.sb384appType,\n            sb384appVersion: this.sb384appVersion,\n            size: this.size,\n            timeStamp: this.timeStamp,\n            type: this.type,\n        }\n        // clean up and removed anything 'undefined'\n        obj = Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== undefined));\n        return obj;\n    }\n}\n\n/**\n * Helper function (tolerant) to confirm an object is SBFile\n * @public\n */\nexport function isSBFile(obj: any): obj is SBFile {\n    return ((obj[SB_FILE_SYMBOL] === true) || (obj instanceof SBFile) || (obj._SBFSVersion === '2024-02-01-0002'));\n}\n", "// (c) 2023-2024 384 (tm)\n\n// // import { SBApiFetch, _sb_assert } from '../common'\n// // import { importKey } from 'src/sbCrypto/core'\n\nimport { ObjectHandle } from './ObjectHandle'\nimport { arrayBufferToBase62, Base62Encoded, b62regex, base62ToArrayBuffer } from '../utils/b62'\nimport { extractPayload } from '../utils/payloads'\nimport { importKey } from 'src/sbCrypto/core'\nimport { SBError, _sb_assert } from 'src/utils/error'\nimport { SBApiFetch } from 'src/utils/fetch'\nimport { SBFile, isSBFile } from 'src/file/SBFile'\n\n// interface ObjectHandle {\n//     id: Base62Encoded, // strictly speaking, only id is needed\n//     iv?: Uint8Array | Base62Encoded,\n//     salt?: ArrayBuffer | Base62Encoded,\n//     actualSize?: number, // actual size of underlying (packaged, padded, and encrypted) contents\n//     verification?: Promise<string> | string,\n//     data?: WeakRef<ArrayBuffer> | ArrayBuffer, // if present, the raw data (packaged, encrypted)\n//     key?: Base62Encoded, // decryption key\n//     storageServer?: string, // if present, clarifies where to get it (or where it was found)\n//     payload?: any // if present, decrypted and extracted data\n//     type?: string,\n//     hash?: string, // hash of the object (hashed in payload format)\n// }\n\nconst DBG0 = false\ndeclare var DBG2: boolean;\nconst SEP = '--------------------------------'\n\nexport const storageCoreKnownShards: Map<string, ObjectHandle> = new Map();\n\n/**\n * Bare bones version of StorageApi.fetchData(). Does not verify handle.\n */\nexport function getDataFromHandle(handle: ObjectHandle | undefined): ArrayBuffer | undefined {\n    if (typeof handle === 'undefined') return undefined\n    const h: ObjectHandle = handle\n    if (!h.data) return undefined\n    if (h.data instanceof WeakRef) {\n        const dref = h.data!.deref()\n        if (dref) return dref\n        else return undefined\n    } else if (h.data instanceof ArrayBuffer) {\n        return h.data\n    } else {\n        throw new Error('Invalid data type in handle')\n    }\n}\n\n/**\n * 'Shard' object is the format returned by storage server; this code\n * 'paraphrases' code in the storage server. it is essentially a variation\n * of ObjectHandle, but (much) more restrictive.\n * \n * Validator is {@link validate_Shard}.\n * */\nexport interface Shard {\n    version: '3',\n    id: Base62Encoded,\n    iv: Uint8Array,\n    salt: ArrayBuffer,\n    actualSize: number, // of the data in the shard\n    data: ArrayBuffer,\n}\n\nexport function validate_Shard(s: Shard): Shard {\n    if (!s) throw new Error(`invalid Shard (ObjectHandle) (null or undefined)`);\n    else if (s.version === '3'\n        && (typeof s.id === 'string' && s.id.length === 43 && b62regex.test(s.id))\n        && (s.iv instanceof Uint8Array && s.iv.byteLength === 12)\n        && (s.salt instanceof ArrayBuffer && s.salt.byteLength === 16)\n        && (s.data instanceof ArrayBuffer && s.actualSize === s.data.byteLength)) return s\n    else throw new Error(`invalid Shard`);\n}\n\n/** Derives the encryption key for a given object (shard). */\nexport function getObjectKey(fileHashBuffer: BufferSource, salt: ArrayBuffer): Promise<CryptoKey> {\n    return new Promise((resolve, reject) => {\n        try {\n            importKey('raw',\n                fileHashBuffer,\n                'PBKDF2', false, ['deriveBits', 'deriveKey']).then((keyMaterial) => {\n                    crypto.subtle.deriveKey({\n                        'name': 'PBKDF2',\n                        'salt': salt,\n                        'iterations': 100000, // small is fine\n                        'hash': 'SHA-256'\n                    }, keyMaterial, { 'name': 'AES-GCM', 'length': 256 }, true, ['encrypt', 'decrypt'])\n                        .then((key) => {\n                            resolve(key)\n                        })\n                })\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n\n/**\n * Unpads a data buffer from a storage buf. Note that actual size is in the last 4 bytes.\n * Reverse of StorageApi.padData().\n */\nexport function unpadData(data_buffer: ArrayBuffer): ArrayBuffer {\n    // this is here rather than in StorageApi, for 'core' packaging\n    const tail = data_buffer.slice(-4)\n    var _size = new DataView(tail).getUint32(0)\n    const _little_endian = new DataView(tail).getUint32(0, true)\n    if (_little_endian < _size) {\n        // a bit of a hack, some code writes the size in little endian\n        if (DBG2) console.warn(\"Unpadding: size of shard encoded as little endian (fixed upon read)\")\n        _size = _little_endian\n    }\n    if (DBG2) {\n        console.log(`Unpadding: size of object is ${_size}`)\n    }\n    return data_buffer.slice(0, _size);\n}\n\n/**\n     gets shard contents from server, and decrypts it.\n    populates handle. returns hash (of decrypted contents) and updated handle.\n    a wrapper: any failure conditions (exceptions) returns 'null', facilitates\n    trying different servers. \n    @internal\n    */\nexport async function fetchDataCore(useServer: string, url: string, h: ObjectHandle): Promise<{ hash: string, handle: ObjectHandle } | undefined> {\n    try {\n        let shard = validate_Shard(await SBApiFetch(useServer + url, { method: 'GET' }) as Shard)\n\n        // todo: technically this isn't necessary, since we now distinguish data from payload\n        _sb_assert(h.key, \"object handle 'key' is missing, cannot decrypt\")\n\n        // we merge shard info into our handle\n        h.iv = shard.iv\n        h.salt = shard.salt\n        h.data = new WeakRef(shard.data)\n        // h.actualSize = shard.actualSize\n\n        if (DBG2) console.log(\"fetchData(), handle (and data) at this point:\", h, shard.data)\n\n        const h_key = base62ToArrayBuffer(h.key!)\n        const decryptionKey = await getObjectKey(h_key, h.salt);\n        // const decryptedData = await sbCrypto.unwrapShard(decryptionKey, { c: shard.data, iv: h.iv })\n        const decryptedData = await crypto.subtle.decrypt({ name: 'AES-GCM', iv: h.iv }, decryptionKey, shard.data)\n        const buf = unpadData(decryptedData)\n        if (DBG2) console.log(\"shard.data (decrypted and unpadded):\", buf)\n        // hashes are on the inner binary data (eg decrypted but not extracted)\n        const hash = arrayBufferToBase62(await crypto.subtle.digest('SHA-256', buf)).slice(0, 12);\n        if (h.hash && h.hash !== hash)\n            // if they differ, we ignore, and use the one we just calculated\n            console.error(\"[fetchData] Hash mismatch in object, internal error (L4730) but ignored\")\n        h.payload = extractPayload(buf).payload\n        h.data = new WeakRef(shard.data) // once we've gotten the payload, we keep ref but we're chill about it\n        return ({ hash: hash, handle: h })\n    } catch (error) {\n        if (DBG0) console.log(`fetchData(): trying to get object on '${useServer}' failed: '${error}'`)\n        return (undefined)\n    }\n}\n\n/**\n * Lower level version of fetchData(), that can be used to fetch data from\n * a known (and 'good') handle. Static, requires no other context.\n */\nexport async function fetchDataFromHandle(handle: ObjectHandle): Promise<ObjectHandle> {\n    if (!handle)\n        throw new Error('[fetchData] No handle provided (cannot accept null or undefined)')\n    if (!handle.storageServer)\n        console.warn('[fetchData] No storage server in handle, probably an error. Will only probe for local mirror.')\n    const h: ObjectHandle = handle // does not verify\n    if (DBG0) console.log(\"fetchData(), handle:\", h)\n\n    // ... not correct\n    // // we might be 'caching' as a weakref\n    // if (h.data && h.data instanceof WeakRef && h.data.deref()) return (h); // the ref is still good\n\n    // Note: we don't use any local storage as a cache, since the shards\n    // already have a 'namespace' for caching in the browser (regular network\n    // operations)\n\n    const verification = await h.verification\n\n    // in current design, there are three servers that are checked\n    const server1 = h.storageServer ? h.storageServer : null // todo: this sometimes resolves to '0'??\n    const server2 = 'http://localhost:3841' // local mirror\n    // const useServer = (await this.getStorageServer()) + '/api/v2'\n\n    // we try the servers in order, and we try to fetch from the server\n    for (const server of [server1, server2]) {\n        if (!server) continue\n        if (DBG0) console.log('\\n', SEP, \"fetchData(), trying server: \", server, '\\n', SEP)\n        const queryString = '/api/v2/fetchData?id=' + h.id + '&verification=' + verification\n        const result = await fetchDataCore(server, queryString, h)\n        if (result) {\n            const { hash, handle } = result\n            if (DBG0) console.log(`[fetchData] success: fetched from '${server}'`, result)\n            handle.storageServer = server // store the one that worked\n            // ChannelApi.knownShards.set(hash, handle);\n            storageCoreKnownShards.set(hash, handle)\n            return (handle)\n        }\n    }\n    // if these servers don't work, we throw an error\n    throw new Error(`[fetchData] failed to fetch from any server`)\n}\n\n/**\n * Barebones version of fetchPayload(). Must have storage server set by callee.\n */\nexport async function fetchPayloadFromHandle(h: ObjectHandle): Promise<any> {\n    if (!h) throw new Error('[fetchPayload] No handle provided (cannot accept null or undefined)')\n    if (!h.payload && !h.data)\n        h = await fetchDataFromHandle(h)\n    if (h.payload)\n        return h.payload\n    if (h.data)\n        return getDataFromHandle(h)\n    throw new Error('[fetchPayload] Failed to fetch data or payload')\n}\n\n/**\n * Takes an SBFile or ObjectHandle and returns the payload. Throws \n * if there are any issues. Handles large files as well.\n */\nexport async function fetchPayload(fileOrObject: SBFile | ObjectHandle): Promise<any> {\n    let handle\n    if (isSBFile(fileOrObject) /* (fileOrObject as SBFile)._SBFSVersion === '2024-02-01-0002'*/) {\n        // const sb = fileOrObject as SBFile\n        const sb = new SBFile(fileOrObject)\n        if (sb.fileLocation === 'inline')\n            if (sb.file instanceof ArrayBuffer)\n                return sb.file // inline files are already in memory\n            else\n                throw new SBError(\"[fetchPayload] Inline files must have 'file' (ArrayBuffer) property set\")\n        if (sb.browserFile && sb.browserFile.size > SBFile.MAX_SBFILE_CHUNK_SIZE) {\n            // if SBFile has a browserFile property, then it's still operating against disk\n            return sb.browserFile.arrayBuffer()\n        }\n        if (sb.handle) {\n            // singletons should have either 'handle' set, or '[handle]' in 'handleArray'\n            handle = sb.handle\n        } else if (!sb.handleArray || sb.handleArray.length === 0) {\n            // (cutting this out for now)\n            // // no handle is fine if it's present in our global buffer map\n            // if (sb.hash && BrowserFileHelper.knownBuffers.has(sb.hash))\n            //     return BrowserFileHelper.knownBuffers.get(sb.hash)\n            // throw new SBError(\"[fetchPayload] Cannot find payload for SBFile\")\n            throw new SBError(\"[fetchPayload] No handle or handleArray in SBFile - need to hook up BrowserFileHelper.knownBuffers?\")\n        } else if (sb.handleArray.length === 1) {\n            handle = sb.handleArray[0] // singleton (common case)\n        } else {\n            if (!sb.size) throw new SBError(\"[fetchPayload] No size in SBFile (large file)\");\n            if (!sb.handleArray || sb.handleArray.length === 0)\n                throw new SBError(\"[fetchPayload] No handleArray in SBFile (large file)\");\n            const predictedChunkCount = Math.ceil(sb.size / SBFile.MAX_SBFILE_CHUNK_SIZE);\n            if (sb.handleArray.length !== predictedChunkCount)\n                throw new SBError(\"[fetchPayload] Size does not match number of expected shards\");\n            const completeBuffer = new ArrayBuffer(sb.size);\n            const view = new Uint8Array(completeBuffer);\n            let index = 0;\n            for (const h of sb.handleArray) {\n                console.log(\"Fetching and assembling payload from:\", h);\n                // const chunk = await this.SB.storage.fetchPayload(h);\n                const chunk = await fetchPayloadFromHandle(h);\n                if (!chunk) throw new SBError(\"[fetchPayload] No chunk in SBFile\");\n                if (!(chunk instanceof ArrayBuffer)) throw new SBError(\"[fetchPayload] Chunk is not ArrayBuffer\");\n                // all chunks except the last one must be of size 'MAX_SBFILE_CHUNK_SIZE'\n                if (chunk.byteLength > SBFile.MAX_SBFILE_CHUNK_SIZE)\n                    throw new SBError(\"[fetchPayload] Chunk size is too large\");\n                else if (index === predictedChunkCount - 1 && chunk.byteLength !== sb.size % SBFile.MAX_SBFILE_CHUNK_SIZE)\n                    throw new SBError(\"[fetchPayload] Last chunk size does not match expected size\");\n                else if (index < predictedChunkCount - 1 && chunk.byteLength !== SBFile.MAX_SBFILE_CHUNK_SIZE)\n                    throw new SBError(\"[fetchPayload] Chunk size does not match expected size\");\n                view.set(new Uint8Array(chunk), index * SBFile.MAX_SBFILE_CHUNK_SIZE);\n                index += 1;\n            }\n            return completeBuffer;\n        }\n    } else {\n        handle = fileOrObject as ObjectHandle\n    }\n    if (!handle) throw new SBError(\"[fetchPayload] No handle provided\")\n    return fetchPayloadFromHandle(handle);\n}", "// (c) 2023-2024 384 (tm)\n\nimport { ChannelId } from '../index'\nimport { arrayBufferToBase62 } from '../utils/b62'\n\nimport { SBError } from '../common'\nconst DBG0 = false;\n\nconst SBStorageTokenPrefix = 'LM2r' // random prefix\n\nexport const SB_STORAGE_TOKEN_SYMBOL = Symbol.for('SBStorageToken')\n\n/**\n * Verbose format of a storage token. In most circumstances, you'll only need\n * the 'hash' field (string).\n * \n * Validator is {@link validate_SBStorageToken}.\n * @public\n * */\nexport interface SBStorageToken {\n  [SB_STORAGE_TOKEN_SYMBOL]?: boolean,\n  hash: string, // random base62 string\n  size?: number,\n  motherChannel?: ChannelId,\n  created?: number,\n  used?: boolean,\n  success?: boolean // when returned from server API\n}\n\nexport function _check_SBStorageToken(data: SBStorageToken) {\n  return (\n    Object.getPrototypeOf(data) === Object.prototype\n    && data.hash && typeof data.hash === 'string' && data.hash.length > 0\n    && (!data.size || Number.isInteger(data.size) && data.size > 0)\n    && (!data.motherChannel || typeof data.motherChannel === 'string')\n    && (!data.created || Number.isInteger(data.created))\n    && (!data.used || typeof data.used === 'boolean')\n  )\n}\n\n/**\n * Validates @link{SBStorageToken}, throws if there's an issue.\n * @public\n * */\nexport function validate_SBStorageToken(data: SBStorageToken): SBStorageToken {\n  if (!data) throw new SBError(`invalid SBStorageToken (null or undefined)`)\n  else if (data[SB_STORAGE_TOKEN_SYMBOL]) return data as SBStorageToken\n  else if (typeof data === 'string' && (data as string).slice(0, 4) === SBStorageTokenPrefix)\n    // if at runtime we get just the hash, we 'upgrade' the type to help caller\n    return { [SB_STORAGE_TOKEN_SYMBOL]: true, hash: data as string } as SBStorageToken\n  else if (_check_SBStorageToken(data)) {\n    return { ...data, [SB_STORAGE_TOKEN_SYMBOL]: true } as SBStorageToken\n  } else {\n    if (DBG0) console.error('invalid SBStorageToken ... trying to ingest:\\n', data)\n    throw new SBError(`invalid SBStorageToken`)\n  }\n}\n\n\n/**\n * This is whatever token system the channel server uses.\n * \n * For example with 'channel-server', you could command-line bootstrap with\n * something like:\n * \n * '''bash\n *   wrangler kv:key put --preview false --binding=LEDGER_NAMESPACE \"zzR5Ljv8LlYjgOnO5yOr4Gtgr9yVS7dTAQkJeVQ4I7w\" '{\"used\":false,\"size\":33554432}'\n * \n * This is available in the cli.\n * \n * @public\n * \n */\nexport type SBStorageTokenHash = string\n\n/**\n * Generates a new (random) storage token hash in the correct format. Note,\n * this doesn't 'authorize' the token anywhere or associate it with \n * a storage amount.\n */\nexport function generateStorageToken(): SBStorageTokenHash {\n  return SBStorageTokenPrefix + arrayBufferToBase62(crypto.getRandomValues(new Uint8Array(32)).buffer)\n}\n", "// (c) 2023-2024 384 (tm)\n\nimport { Base62Encoded, arrayBufferToBase62 } from '../utils/b62'\n\nconst DBG0 = false;\n\n// this library only supports '3'\n/** @internal */ export type ObjectHandleVersions = '1' | '2' | '3'\nexport const currentSBOHVersion: ObjectHandleVersions = '3'\n\n/**\n * This is the lowest-level format of shard information that's presented across\n * an API. Internally, the storage server uses slightly different interfaces.\n * @public\n */\nexport interface ShardInfo {\n  version?: ObjectHandleVersions,\n  id: Base62Encoded, // strictly speaking, only id is needed\n  iv?: Uint8Array | Base62Encoded,\n  salt?: ArrayBuffer | Base62Encoded,\n  actualSize?: number, // actual size of underlying (packaged, padded, and encrypted) contents\n  verification?: Promise<string> | string,\n  data?: WeakRef<ArrayBuffer> | ArrayBuffer, // if present, the raw data (packaged, encrypted)\n}\n\nexport const SB_OBJECT_HANDLE_SYMBOL = Symbol.for('ObjectHandle')\n\n/**\n * ObjectHandle  (extends ShardInfo)\n *\n * ObjectHandle encodes necessary information for a shard, as well as some\n * conveniences for making contents available after it's loaded.\n *\n * - id is a 43 character base62 string that identifies the object. It is used\n *   to retrieve the object from the storage server.\n *\n * - version is a single character string that indicates the version of the\n *   object handle. '1' and '2' are legacy, '3' is current.\n * \n * - key is a 43 character base62\n *\n * - verification is a random (server specific) string that is used to verify\n *   that you're allowed to access the object (specifically, that somebody,\n *   perhaps you, has paid for the object).\n *\n * - iv and salt are optional, but provide some safeguards. Object server\n *   will provide these for an object.\n * \n * - hash can be slightly confusing: it hashes the packaged (but not encrypted,\n *   nor padded) contents. It needs to hash the packaged contents since 'payload'\n *   can be any object, and the hashing needs to operate against an array buffer.\n *   If the object per se is an arraybuffer (eg a chunk of a large file), then\n *   it will nevertheless be hashed in the 'payload' format. This is the hash\n *   that the global 'ChannelApi.knownShards' uses as index.\n * \n * Validator is {@link validate_ObjectHandle}.\n *\n * @public\n */\nexport interface ObjectHandle extends ShardInfo {\n  [SB_OBJECT_HANDLE_SYMBOL]?: boolean,\n  key?: Base62Encoded, // decryption key\n  /** if present, clarifies where to get it (or where it was found) */\n  storageServer?: string,\n\n  // ToDo: might want to transition to weakref\n  payload?: any // if present, decrypted and extracted data\n\n  // for some backwards compatibility. slowly being deprecated.\n  type?: string,\n\n  /** hash of the object (hashed in payload format) */\n  hash?: string,\n\n  /**\n   * Signature is a base62 encoded string that is used to verify the integrity\n   * of a 'publisher' and the object. It can be used in different ways, but\n   * the corresponding public key is always inside the object. This allows\n   * composite objects (such as os384 applications) to internally define\n   * publisher, and the resulting ObjectHandle can then be signed.\n   * The object will \"work\" just fine without it, but some other services\n   * (such as the os384 app launcher) will check it. \n   */\n  signature?: string,\n\n  // // various additional properties are optional. note that core SB lib does not\n  // // have a concept of a 'file'\n  // fileName?: string, // by convention will be \"PAYLOAD\" if it's a set of objects\n  // dateAndTime?: string, // time of shard creation\n  // fileType?: string, // file type (mime)\n  // lastModified?: number, // last modified time (of underlying file, if any)\n  // savedSize?: number, // size of shard (may be different from actualSize)\n}\n\nexport function _check_ObjectHandle(h: ObjectHandle) {\n  return (\n    Object.getPrototypeOf(h) === Object.prototype\n    && (!h.version || h.version === currentSBOHVersion) // anything 'this' code sees needs to be v3\n    && h.id && typeof h.id === 'string' && h.id.length === 43\n    && (!h.key || (typeof h.key === 'string' && h.key.length === 43))\n    && (!h.verification || typeof h.verification === 'string' || typeof h.verification === 'object')\n    && (!h.iv || typeof h.iv === 'string' || h.iv instanceof Uint8Array)\n    && (!h.salt || typeof h.salt === 'string' || h.salt instanceof ArrayBuffer)\n  )\n}\n\n/**\n * Validate ObjectHandle, throws if there's an issue\n * @public\n */\nexport function validate_ObjectHandle(h: ObjectHandle) {\n  if (!h) throw new Error(`invalid ObjectHandle (null or undefined)`)\n  else if (h[SB_OBJECT_HANDLE_SYMBOL]) return h as ObjectHandle\n  else if (_check_ObjectHandle(h)) {\n    return { ...h, [SB_OBJECT_HANDLE_SYMBOL]: true } as ObjectHandle\n  } else {\n    if (DBG0) console.error('invalid ObjectHandle ... trying to ingest:\\n', h)\n    throw new Error(`invalid ObjectHandle`)\n  }\n}\n\n/**\n * In some circumstances we need to make sure we have a JSON serializable\n * version of the object handle, eg that iv and salt are base62 strings,\n * and that the verification has been resolved\n * @public\n */\nexport async function stringify_ObjectHandle(h: ObjectHandle) {\n  if (h.iv) h.iv = typeof h.iv === 'string' ? h.iv : arrayBufferToBase62(h.iv)\n  if (h.salt) h.salt = typeof h.salt === 'string' ? h.salt : arrayBufferToBase62(h.salt)\n  h.verification = await h.verification\n  return validate_ObjectHandle(h)\n}\n", "// (c) 2023-2024 384 (tm)\n\nimport {\n    SBError,\n    ChannelApi, _appendBuffers,\n    arrayBufferToBase62,\n    ChannelHandle, Channel, SBStorageToken,\n    ObjectHandle, assemblePayload, \n    validate_SBStorageToken,\n} from '../index'\n\nimport {\n    fetchDataFromHandle,\n    getDataFromHandle,\n    getObjectKey,\n    unpadData\n} from './core'\n\nimport {\n    DBG2, sbCrypto, SEP, \n    SBApiFetch, _sb_assert,\n} from '../common'\n\nconst DBG0 = false;\n\nimport { _check_SBStorageToken } from 'src/storage/StorageToken'\nimport { _check_ChannelHandle } from 'src/channel/ChannelHandle'\nimport { SB_OBJECT_HANDLE_SYMBOL, currentSBOHVersion, validate_ObjectHandle } from 'src/storage/ObjectHandle'\n\n\n\n/**\n * Basic object handle for a shard (all storage).\n * \n * To RETRIEVE a shard, you need id and verification.\n * \n * To DECRYPT a shard, you need key, iv, and salt. Current\n * generation of shard servers will provide (iv, salt) upon\n * request if (and only if) you have id and verification.\n * \n * Note that id32/key32 are array32 encoded base62 encoded.\n * \n * 'verification' is a 64-bit integer, encoded as a string\n * of up 23 characters: it is four 16-bit integers, either\n * joined by '.' or simply concatenated. Currently all four\n * values are random, future generation only first three\n * are guaranteed to be random, the fourth may be \"designed\".\n * \n * \n * @typedef {Object} ObjectHandleClass\n * @property {boolean} [SB_OBJECT_HANDLE_SYMBOL] - flag to indicate this is an ObjectHandle\n * @property {string} version - version of this object\n * @property {string} id - id of object\n * @property {string} key - key of object\n * @property {Base62Encoded} [id32] - optional: array32 format of id\n * @property {Base62Encoded} [key32] - optional: array32 format of key\n * @property {Promise<string>|string} verification - and currently you also need to keep track of this,\n * but you can start sharing / communicating the\n * object before it's resolved: among other things it\n * serves as a 'write-through' verification\n * @property {Uint8Array|string} [iv] - you'll need these in case you want to track an object\n * across future (storage) servers, but as long as you\n * are within the same SB servers you can request them.\n * @property {Uint8Array|string} [salt] - you'll need these in case you want to track an object\n * across future (storage) servers, but as long as you\n * are within the same SB servers you can request them.\n * @property {string} [fileName] - by convention will be \"PAYLOAD\" if it's a set of objects\n * @property {string} [dateAndTime] - optional: time of shard creation\n * @property {string} [shardServer] - optionally direct a shard to a specific server (especially for reads)\n * @property {string} [fileType] - optional: file type (mime)\n * @property {number} [lastModified] - optional: last modified time (of underlying file, if any)\n * @property {number} [actualSize] - optional: actual size of underlying file, if any\n * @property {number} [savedSize] - optional: size of shard (may be different from actualSize)\n * \n * StorageAPI. Used to interact with storage server(s). It will have a concept\n * of a 'default' server, but that is not needed for all operations. It will\n * default to using server choices in any handles.\n * \n * @public\n */\nexport class StorageApi {\n    #server?: string; // either a channel or storage server\n    #storageServer: string = ''; // empty means unknown (for example we're offline)\n    static #uploadBacklog = 0\n    static getObjectKey = getObjectKey // compatibility\n    constructor(server?: string) {\n        if (server) {\n            this.#server = server\n            this.#_getStorageServer().then((s) => {\n                if (!s) {\n                    if (DBG0) console.error(\"[StorageApi] Could not (immediately) resolve storage server\")\n                    // ToDo: we are proactive in checking again during dev&test, this might be unnecessary\n                    //       since ''getStorageServer()'' will retry later anyway, as needed\n                    const reCheckInterval = setInterval(async () => {\n                        if (ChannelApi.isShutdown) {\n                            clearInterval(reCheckInterval)\n                            if (DBG0) console.error(\"[StorageApi] Shutting down, will not retry getting storage server\")\n                        } else {\n                            const s2 = await this.#_getStorageServer()\n                            if (s2) {\n                                clearInterval(reCheckInterval)\n                                if (DBG0) console.log(`[StorageApi] ... eventually resolved storage server ('${s2}')`)\n                            } // else: no-op, we keep trying\n                        }\n                    }, 1000)\n                } // else: no need to try again\n            })\n        }\n    }\n\n    // we use a promise so that asynchronicity can be handled interally in StorageApi,\n    // eg so users don't have to do things like ''(await SB.storage).fetchObject(...)''.\n    // this fetch is low-level and returns empty string if not online. if it receives\n    // inconsistent or incorrect information, it will throw\n    async #_getStorageServer(): Promise<string> {\n        if (this.#storageServer) {\n            return this.#storageServer\n        } else if (!this.#server) {\n            if (DBG0) console.warn('[StorageApi] No server information known (neither channel or storage)')\n        } else {\n            const retValue = await ChannelApi.getServerInfo(this.#server)\n            if (!retValue) return '' // we're probably offline\n            if (retValue && !retValue.storageServer)\n                throw new SBError('[StorageApi] Server available did not provide storage server name, cannot initialize. Should not happen [L4651]')\n            if (DBG0) console.log(\"[StorageApi] Fyi, server returned info info:\", retValue)\n            this.#storageServer = retValue.storageServer\n\n        }\n        return this.#storageServer // if undetermined, we return empty string\n    }\n\n    async getStorageServer() {\n        const s = await this.#_getStorageServer()\n        if (s) return s;\n        else throw new SBError(\"[StorageApi] Identity of storage server is not (yet) known.\");\n    }\n\n    /**\n     * Pads object up to closest permitted size boundaries,\n     * taking into account meta data overhead of the padding itself,\n     * increasing privacy by hiding actual size of data.\n     * \n     * Currently, this means minimum size of 4 KiB, after which\n     * we round up to closest power of 2, doing so up to 1 MiB,\n     * after which we round up to the next MiB boundary.\n     */\n    static padBuf(buf: ArrayBuffer): ArrayBuffer {\n        const dataSize = buf.byteLength; let _target\n\n        const MIN_SIZE = 4096;    // 4 KiB\n        const MAX_SIZE = 1048576; // 1 MiB\n        const OVERHEAD = 4;       // Size of Uint32\n\n        // pick the size to be rounding up to\n        if ((dataSize + OVERHEAD) < MIN_SIZE) _target = MIN_SIZE // smallest size\n        else if ((dataSize + OVERHEAD) < MAX_SIZE) _target = 2 ** Math.ceil(Math.log2(dataSize + OVERHEAD)) // in between\n        else _target = (Math.ceil((dataSize + OVERHEAD) / MAX_SIZE)) * MAX_SIZE // largest size\n        // append the padding buffer\n        let finalArray = _appendBuffers([buf, (new Uint8Array(_target - dataSize)).buffer]);\n        // set the (original) size in the last 4 bytes\n        (new DataView(finalArray)).setUint32(_target - OVERHEAD, dataSize)\n        if (DBG2) console.log(\"padBuf bytes:\", finalArray.slice(-OVERHEAD));\n        return finalArray\n    }\n\n    /**\n     * Reverse of padBuf(). Note that actual size is in the last 4 bytes.\n     */\n    static unpadBuf(data_buffer: ArrayBuffer): ArrayBuffer {\n        return unpadData(data_buffer)\n    }\n\n    /** derives final object ID */\n    static async getObjectId(iv: Uint8Array, salt: ArrayBuffer, encryptedData: ArrayBuffer): Promise<string> {\n        if (DBG2) console.log(\n            SEP,\n            \"getObjectId()\",\n            SEP, iv,\n            SEP, salt,\n            SEP, encryptedData,\n            SEP\n        )\n        // todo: yes we end up doing a bit more copying of data then needed\n        const id = await crypto.subtle.digest('SHA-256',\n            _appendBuffers([\n                iv,\n                salt,\n                encryptedData\n            ]))\n        return arrayBufferToBase62(id)\n    }\n\n    /**\n     * Paces uploads to avoid overloading the storage server. Takes into account\n     * global number of operations.\n     */\n    static async paceUploads() {\n        if (DBG0) console.log(\"+++++ [paceUploads] called, backlog is:\", StorageApi.#uploadBacklog)\n        while (StorageApi.#uploadBacklog > 8) { // ToDo: evaluate this better and/or redesign storage server\n            if (DBG0) console.log(\"+++++ [paceUploads] waiting for server, backlog is:\", StorageApi.#uploadBacklog)\n            await new Promise((resolve) => setTimeout(resolve, 25))\n        }\n    }\n\n    /**\n     * Store 'contents' as a shard, returns an object handle. Note that 'contents' can be\n     * anything, and is always packaged as a payload before storing.\n     */\n    async storeData(\n        contents: any,\n        budgetSource: ChannelHandle | Channel | SBStorageToken\n    ): Promise<ObjectHandle> {\n        StorageApi.#uploadBacklog++\n        try {\n            const buf = assemblePayload(contents)!\n            if (!buf) throw new SBError(\"[storeData] failed to assemble payload\")\n            const hash = arrayBufferToBase62(await crypto.subtle.digest('SHA-256', buf)).slice(0, 12);\n\n            // const bufSize = (buf as ArrayBuffer).byteLength // before padding\n            const paddedBuf = StorageApi.padBuf(buf)\n            const fullHash = await sbCrypto.generateIdKey(paddedBuf)\n\n            // 'phase 1': get salt and iv from storage server for this object\n            const storageServer = await this.getStorageServer()\n            const idForKeyLookup = arrayBufferToBase62(fullHash.idBinary)\n            const requestQuery = storageServer + '/api/v2/storeRequest?id=' + idForKeyLookup\n            const keyInfo = await SBApiFetch(requestQuery) as { salt: ArrayBuffer, iv: Uint8Array }\n            if (!keyInfo.salt || !keyInfo.iv)\n                throw new SBError('[storeData] Failed to get key info (salt, nonce) from storage server')\n\n            const key = await getObjectKey(fullHash.keyMaterial, keyInfo.salt)\n            const encryptedData = await sbCrypto.encrypt(paddedBuf, key, { iv: keyInfo.iv })\n\n            let storageToken: SBStorageToken\n            if (budgetSource instanceof Channel) {\n                storageToken = await budgetSource.getStorageToken(encryptedData.byteLength)\n            } else if (_check_ChannelHandle(budgetSource as ChannelHandle)) {\n                storageToken = await (await new Channel(budgetSource as ChannelHandle).ready).getStorageToken(encryptedData.byteLength)\n            } else if (_check_SBStorageToken(budgetSource as SBStorageToken)) {\n                storageToken = validate_SBStorageToken(budgetSource as SBStorageToken)\n            } else {\n                throw new SBError(\"[storeData] invalid budget source (needs to be a channel, channel handle, or storage token)\")\n            }\n\n            // 'phase 1B': object id is created by hashing the encryptedData with the iv and salt\n            const id = await StorageApi.getObjectId(keyInfo.iv, keyInfo.salt, encryptedData)\n\n            // 'phase 2': we store the object\n            const storeQuery = storageServer + '/api/v2/storeData?id=' + id\n            const init: RequestInit = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/octet-stream\"',\n                },\n                body: assemblePayload({\n                    id: id,\n                    iv: keyInfo.iv,\n                    salt: keyInfo.salt,\n                    storageToken: storageToken,\n                    data: encryptedData\n                })\n            }\n\n            if (DBG2) console.log(\"5555 5555 [storeData] storeQuery:\", SEP, storeQuery, SEP)\n\n            const result = await SBApiFetch(storeQuery, init)\n\n            const r: ObjectHandle = {\n                [SB_OBJECT_HANDLE_SYMBOL]: true,\n                version: currentSBOHVersion,\n                id: id,\n                key: arrayBufferToBase62(fullHash.keyMaterial),\n                iv: keyInfo.iv,\n                salt: keyInfo.salt,\n                // actualSize: bufSize,\n                hash: hash,\n                verification: result.verification,\n                storageServer: storageServer,\n            }\n            if (DBG0) console.log(\"storeData() - success, handle:\", r, encryptedData)\n            return (r)\n        } catch (error) {\n            console.error(\"[storeData] failed:\", error)\n            if (error instanceof SBError) {\n                // check if 'Not enough storage budget' is in the message\n                if (error.message.includes('Not enough storage budget'))\n                    throw new SBError('Not enough storage budget')\n                else\n                    throw error\n            }\n            throw new SBError(`[storeData] failed to store data: ${error}`)\n        } finally {\n            StorageApi.#uploadBacklog--\n        }\n    }\n\n    /**\n     * Fetches the data for a given object handle. Result will be referenced by\n     * the 'payload' property in the returned handle. This is the main 'read'\n     * workhorse. Note it will result in a call to core.fetchDataFromHandle().\n     *\n     * This will work if you have sufficient information in the passed\n     * ObjectHandle. fetchData() will flesh out everything it can, and throw if\n     * it's not able to. It will return the same handle, with whatever additional\n     * parts it was able to fill in.\n     *\n     * Note that fetchData will prioritize checking with the storageServer in the\n     * handle, if present. Next, it will always check localhost at port 3841 if a\n     * local mirror is running. After that, it may or may not check one or several\n     * possible servers. And it might throw if there are inconsisencies.\n     *\n     * Note that 'storageServer' in the returned object might have changed, it\n     * will be whichever server fetchData() was able to fetch from (so could be\n     * local mirror for example, so be a bit careful with overwriting the original\n     * handle that was used).\n     *\n     * The contents of the shard are decrypted and extracted into 'payload', and\n     * 'data' will contain the raw data prior to decryption and extraction, in\n     * case callee is interested. Note that to avoid unnecessary duplication of\n     * space, it is stored as a 'weakref' - use getData() to safely retrieve.\n     * \n     * Note that as a side effect, ChannelApi.knownShards is updated.\n     */\n    async fetchData(handle: ObjectHandle): Promise<ObjectHandle> {\n        if (!handle)\n            throw new SBError('[fetchData] No handle provided (cannot accept null or undefined)')\n        const s = await this.getStorageServer()\n        if (!handle.storageServer)\n            handle.storageServer = s\n        else if (handle.storageServer !== s)\n            console.warn(`[fetchData] handle has different storage server than current server (possibly an error). Handle has '${handle.storageServer}', StorageApi server is '${s}'`)\n        const h = validate_ObjectHandle(handle)\n        if (ChannelApi.shardBreakpoints.has(h.id)) debugger;\n        return fetchDataFromHandle(h)\n    }\n\n    /**\n     * Convenience wrapper for object handles: returns the 'data' if it's present,\n     * returns undefined if it's not, and throws an error if the handle is\n     * invalid. Accepts 'undefined' for easier chaining. Note that this is a\n     * low-level operation, you probably want to use fetchPayload() instead.\n     */\n    static getData(handle: ObjectHandle | undefined): ArrayBuffer | undefined {\n        if (typeof handle === 'undefined') return undefined\n        const h = validate_ObjectHandle(handle)\n        return getDataFromHandle(h)\n    }\n\n\n    /**\n     * Convenience wrapper for object handles: returns the payload (eg contents of\n     * the shard). It can parse out if the payload is already present. If not, it\n     * will fetch the data and extract the payload. \n     *\n     * Note: this cannot take an undefined parameter, since it cannot return\n     * 'undefined' as a non-throwing response (because 'undefined' by itself is a\n     * permitted shard content).\n     *\n     * For the same reason, we can't have a non-throwing 'fetchPayload()' method,\n     * that would be analogous to 'getData()'. \n     */\n    async fetchPayload(h: ObjectHandle): Promise<any> {\n        if (!h) throw new SBError('[fetchPayload] No handle provided (cannot accept null or undefined)')\n        if (!h.payload && !h.data)\n            h = await this.fetchData(h)\n        if (h.payload)\n            return h.payload\n        if (h.data)\n            return StorageApi.getData(h)\n        throw new SBError('[fetchPayload] Failed to fetch data or payload')\n    }\n    \n\n} /* class StorageApi */\n", "// (c) 2023-2024 384 (tm)\n\nconst DBG0 = false\n//\n\nimport { SBError, SEP } from '../common'\n\n/** @internal */\nexport class MessageQueue<T> {\n    private queue: T[] = [];\n    private resolve: ((value: T | PromiseLike<T> | null) => void) | null = null;\n    private reject: ((reason?: any) => void) | null = null;\n    private closed = false;\n    private error: any = null;\n    enqueue(item: T) {\n      if (DBG0) console.log(`[MessageQueue] Enqueueing. There were ${this.queue.length} messages in queue`)\n      if (this.closed) throw new SBError('[MessageQueue] Error, trying to enqueue to closed queue');\n      if (this.resolve) {\n        if (this.queue.length > 0) throw new SBError('[MessageQueue] Error, queue should be empty when resolve is set');\n        this.resolve(item);\n        this.resolve = null;\n        this.reject = null;\n      } else {\n        this.queue.push(item);\n      }\n    }\n    async dequeue(): Promise<T | null> {\n      if (DBG0) console.log(`[MessageQueue] Dequeueing. There are ${this.queue.length} messages left`)\n      if (this.queue.length > 0) {\n        const item = this.queue.shift()!;\n        if (this.closed)\n          return Promise.reject(item);\n        else {\n          if (DBG0) console.log(SEP, SEP, SEP, `[MessageQueue] Dequeueing. Returning item.\\n`, item, SEP)\n          return Promise.resolve(item);\n        }\n      } else {\n        // if we know nothing more is coming, we can close shop\n        if (this.closed)\n          return null\n        // otherwise, we maintain a promise until we get more data\n        return new Promise((resolve, reject) => {\n          this.resolve = resolve;\n          this.reject = reject;\n        });\n      }\n    }\n    isEmpty() {\n      return this.queue.length === 0;\n    }\n\n    // 'close' will stop queue from accepting more data\n    close(reason = 'close') {\n      if (DBG0) console.log(`[MessageQueue] Closing. There are ${this.queue.length} messages left. Close reason: ${reason}`)\n      this.closed = true;\n      this.error = reason;\n      if (this.reject) this.reject(this.error); // if anything was waiting, we reject it and close out\n    }\n\n    // wait for queue to drain\n    async drain(reason?: string) {\n      if (DBG0) console.log(`[MessageQueue] Draining.`)\n      if (!this.closed) this.close(reason || 'drain')\n      while (this.queue.length > 0) {\n        if (DBG0) console.log(`[MessageQueue] Draining. There are ${this.queue.length} messages left.`)\n        await new Promise((resolve) => setTimeout(resolve, 0));\n      }\n    }\n  }\n  \n  ", "// (c) 2024 384 (tm)\n\n/**\n * Maximum allowed size of a channel message body.\n * In principle these could be much (much) bigger; but the intent of Channels is\n * lots of small 'messages', anything 'big' should be managed as shards, and the\n * handles of such shards sent in messages. There are good arguments for allowing\n * larger messages, especially if ephemeral, but it's always easy to INCREASE\n * max size, harder to decrease. Also, storage cost of messages is much higher than\n * shard storage, so we don't want to inadvertently encourage unnecessary channel\n * budget consumption.\n * \n * @public\n */\nexport const MAX_SB_BODY_SIZE = 64 * 1024\n\n/**\n * time we wait for a send() not to do anything before we interpret it as an\n * error and reset, and time we wait when creating a websocket before we\n * interpret the attempt as failed, and finally number of times to retry\n * before giving up on a message (each retry will reset the socket)\n * @internal\n */\nexport const WEBSOCKET_MESSAGE_TIMEOUT = 20000 // ms   // ... testing resilience\nexport const WEBSOCKET_SETUP_TIMEOUT = 2000 // ms\nexport const WEBSOCKET_RETRY_COUNT = 3\n\n/**\n * time in ms between 'ping' messages; in other words, on average we are about\n * half of this behind IF the socket has hibernated. if the edge server stack\n * does not support hibernation, then the channel server will respond instead.\n * @internal\n */\nexport const WEBSOCKET_PING_INTERVAL = 1000\n\n/**\n * minimum when creating a new channel. channels can be reduced below this, but\n * not created below this. todo: this should be from a server config.\n * @internal\n */\nexport const NEW_CHANNEL_MINIMUM_BUDGET = 8 * 1024 * 1024; // 8 MB\n", "// (c) 2023-2024 384 (tm)\n\nconst SB_CHANNEL_MESSAGE_SYMBOL = Symbol('SB_CHANNEL_MESSAGE_SYMBOL')\n\nimport {\n    _sb_assert, ChannelId, SBUserId,\n    SBError, DBG2,\n    isSBUserId,\n} from 'src/common'\n\nimport { SBProtocol } from './Protocol'\nimport { _check_ChannelHandle } from './ChannelHandle'\nimport { _check_SBChannelData } from './Channel'\nimport { MessageTtl } from './Message'\n\n/**\n * SB standard wrapped encrypted messages. This is largely 'internal', normal\n * usage of the library will work at a higher level, see @link{Message}.\n *\n * Encryption is done with AES-GCM, 16 bytes of salt.\n *\n * Timestamp prefix is twenty six (26) [0-3] characters. It encodes epoch\n * milliseconds * 4^4 (last four are '0000').\n *\n * \"Everything is optional\" as this is used in multiple contexts.\n *\n * Note that channel server doesn't need userPublicKey on every channel message\n * since it's provided on websocket setup.\n *\n * Complete channel \"\\_id\" is channelId + '\\_' + subChannel + '\\_' +\n * timestampPrefix This allows (prefix) searches within time spans on a per\n * channel (and if applicable, subchannel) basis. Special subchannel 'blank'\n * (represented as '____') is the default channel and generally the only one\n * that visitors have access to.\n *\n * A core exception is that all messages with a TTL in the range 1-7 (eg range\n * of 1 minute to 72 hours) are duplicated onto subchannels matching the TTLs,\n * namely '___1', '___2', '___3', etc. Thus an oldMessages fetch can for example\n * request '___4' to get all messages that were sent with TTL 4 (eg 1 hour).\n * Which also means that as Owner, if you set TTL on a message then you can't\n * use the fourth character (if you try to while setting a TTL, channel server\n * will reject it).\n *\n * Properties that are generally retained or communicated inside payload\n * packaging have short names (apologies for lack of readability).\n * 'unencryptedContents' has a long and cumbersome name for obvious reasons.\n *\n * There are a couple of semantics that are enforced by the channel server;\n * since this is partly a policy issue of the channel server, anything in this\n * documentation might be incomplete. For example, baseline channel server\n * does not allow messages to both be 'infinite ttl' and addressed (eg have a\n * 'to' field value). \n *\n * If any protocol wants to do additional or different encryption, it would need\n * to wrap: the core binary format is defined to have room for iv and salt, and\n * prescribes sizes 12 and 16 respectively. Strictly speaking, the protocol can\n * use these 28 bytes for whatever it wants. A protocol that wants to do\n * something completely different can simply modify the 'c' (contents) buffer\n * and append any binary data it needs.\n * \n * Validator is {@link validate_ChannelMessage}.\n *\n * @public\n */\nexport interface ChannelMessage {\n    [SB_CHANNEL_MESSAGE_SYMBOL]?: boolean,\n  \n    // the following is minimum when *sending*. see also stripChannelMessage()\n  \n    /** 'from': public (hash) of sender, matches publicKey of sender, verified by channel server */\n    f?: SBUserId, \n    /** encrypted contents, or an unencrypted 'string message' if 'stringMessage' is true */\n    c?: ArrayBuffer | string, \n    /** nonce, always present whether needed by protocol or not (12 bytes) */\n    iv?: Uint8Array, \n    /** salt, always present whether needed by protocol or not (16 bytes) */\n    salt?: ArrayBuffer, \n    /** sender signature */\n    s?: ArrayBuffer, // ToDo: list here exactly what is signed\n    /** timestamp at point of encryption, by client, verified along with encrypt/decrypt */\n    ts?: number, \n    /** channel server, if present, clarifies where message was processed */\n    cs?: string, \n  \n    // the remainder are either optional (with default values), internally used,\n    // server provided, or can be reconstructed\n  \n    /** (optional) channelId base62 x 43 */\n    channelId?: ChannelId, \n    /** (optional) subchannel; default is '____', can be any 4xbase62; only owner can read/write subchannels */\n    i2?: string, \n    /**  timestamp from server */\n    sts?: number,\n    /** string/base4 encoding of timestamp (see timestampToBase4String) */\n    timestampPrefix?: string, \n    /** '_id' format is: channelId + '\\_' + subChannel + '\\_' + timestampPrefix */\n    _id?: string, \n    /** if present, hash of previous message from this sender */\n    p?: string; // ToDo: need to make sure lib384 tries to use this consistently\n  \n    /** whatever is being sent; should (must) be stripped when sent. when\n        encrypted, this is packaged as payload first (signing is done on the\n        payload version) */\n    unencryptedContents?: any,\n    /** internal, if true then do not package (special 'string' message type) */\n    stringMessage?: boolean,\n  \n    /** if present, signals other side is ready to receive messages (rest of message ignored) */\n    ready?: boolean, \n    /** if present, signals error (and rest of message ignored) */\n    error?: string,\n    /** 'to': public (hash) of recipient; note that Owner sees all messages; if omitted usually means broadcast */\n    t?: SBUserId,\n    /** Value 0-15; if it's missing it's 15/0xF (infinite); if it's 1-7 it's duplicated to subchannels */\n    ttl?: MessageTtl, \n    /** protocol to be used for message */\n    protocol?: SBProtocol,\n  }\n  \n  /**\n   * Validates 'ChannelMessage', throws if there's an issue. Checks for a lot\n   * of things. It does not explain itself. Don't count on it to catch everything.\n   * Note that you should use the returned value, as this function might fix\n   * some minor things (like converting iv from ArrayBuffer to Uint8Array).\n   * @public\n   */\n  export function validate_ChannelMessage(body: ChannelMessage): ChannelMessage {\n    // we 'fix' body.iv, if it's an ArrayBuffer we convert to Uint8Array\n    if (body && body.iv && body.iv instanceof ArrayBuffer) body.iv = new Uint8Array(body.iv)\n    if (!body) throw new SBError(`invalid ChannelMessage (null or undefined)`)\n    else if (body[SB_CHANNEL_MESSAGE_SYMBOL]) return body as ChannelMessage\n    else if (\n      // these are minimally required\n      (body.f && isSBUserId(body.f))\n      && ((body.c && !body.stringMessage && body.c instanceof ArrayBuffer) \n        || (body.c && body.stringMessage && typeof body.c === 'string'))\n      && (body.ts && Number.isInteger(body.ts))\n      && (body.iv && body.iv instanceof Uint8Array && body.iv.length === 12)\n      \n      // salt might be absent at early phases, but, i don't think we call\n      // validate_ChannelMessage at those points? anyway, making this more strict\n      && (body.salt && body.salt instanceof ArrayBuffer && body.salt.byteLength === 16)\n      // && (!body.salt || body.salt instanceof ArrayBuffer && body.salt.byteLength === 16)\n\n      && (body.s && body.s instanceof ArrayBuffer)\n      && (body.cs === undefined || typeof body.cs === 'string')\n  \n      && (!body.sts || Number.isInteger(body.sts)) // if present came from server\n  \n      // todo: might as well add regexes to some of these\n      && (!body._id || (typeof body._id === 'string' && body._id.length === 86)) // that's resulting length\n      && (!body.ready || typeof body.ready === 'boolean')\n      && (!body.timestampPrefix || (typeof body.timestampPrefix === 'string' && body.timestampPrefix.length === 26))\n      && (!body.channelId || (typeof body.channelId === 'string' && body.channelId.length === 43))\n      // 'subChannel': 'i2' is a bit more complicated, it must be 4xbase62 (plus boundary '_'), so we regex against [a-zA-Z0-9_]\n      && (!body.i2 || (typeof body.i2 === 'string' && /^[a-zA-Z0-9_]{4}$/.test(body.i2)))\n      // body.ttl must be 0-15 (4 bits)\n      && (body.ttl === undefined || (Number.isInteger(body.ttl) && body.ttl >= 0 && body.ttl <= 15))\n      && (!body.t || isSBUserId(body.t))  // Validates format if present\n    ) {\n      return { ...body, [SB_CHANNEL_MESSAGE_SYMBOL]: true } as ChannelMessage\n    } else {\n      if (DBG2) console.error('invalid ChannelMessage ... trying to ingest:\\n', body)\n      throw new SBError(`invalid ChannelMessage`)\n    }\n  }\n  \n  /**\n   * Complements validate_ChannelMessage. This is used to strip out the parts that\n   * are not strictly needed. Addresses privacy, security, and message size\n   * issues. Note that 'ChannelMessage' is a 'public' interface, in the sense that\n   * this is what is actually stored (as payload ArrayBuffers) at rest, both on\n   * servers and clients.\n   * \n   * 'serverMode' is slightly more strict and used by server-side code.\n   * \n   * @internal\n   */\n  export function stripChannelMessage(msg: ChannelMessage, serverMode: boolean = false): ChannelMessage {\n    if (DBG2) console.log('stripping message:\\n', msg)\n    const ret: ChannelMessage = {}\n    if (msg.f !== undefined) ret.f = msg.f; else throw new SBError(\"ERROR: missing 'f' ('from') in message\")\n    if (msg.c !== undefined) ret.c = msg.c; else throw new SBError(\"ERROR: missing 'c' ('encrypted contents') in message\")\n    // if it's a 'string' type message, it's not encrypted, so no nonce\n    if (msg.iv !== undefined) ret.iv = msg.iv; else if (!(msg.stringMessage) === true) throw new SBError(\"ERROR: missing 'iv' ('nonce') in message\")\n    if (msg.salt !== undefined) ret.salt = msg.salt; else throw new SBError(\"ERROR: missing 'salt' in message\")\n    if (msg.s !== undefined) ret.s = msg.s; else if (!(msg.stringMessage) === true) throw new SBError(\"ERROR: missing 's' ('signature') in message\")\n    if (msg.ts !== undefined) ret.ts = msg.ts; else throw new SBError(\"ERROR: missing 'ts' ('timestamp') in message\")\n    if (msg.sts !== undefined) ret.sts = msg.sts; else if (serverMode) throw new SBError(\"ERROR: missing 'sts' ('servertimestamp') in message\")\n    if (msg.ttl !== undefined && msg.ttl !== 0xF) ret.ttl = msg.ttl; // optional, and we strip if set to default value\n    if (msg.t !== undefined) ret.t = msg.t; // 'to', optional but if present is kept\n    if (msg.i2 !== undefined && msg.i2 !== '____') ret.i2 = msg.i2; // optional, also we strip out default value\n    if (msg.cs !== undefined) ret.cs = msg.cs; // optional\n    return ret\n  }\n  ", "const base32mi = \"0123456789ADMRTxQjrEywcLBdHpNufk\" // \"v05.05\" (strongpinVersion ^0.6.0)\nconst base62Regex = new RegExp(`[${base32mi}.concat(' ')]`); // lenient, allows spaces\n\n// encodes a 19-bit number into a 4-character string\nexport function b32encode(num: number): string {\n  const charMap = base32mi;\n  if (num < 0 || num > 0x7ffff)\n    throw new Error('Input number is out of range. Expected a 19-bit integer.');\n  let bitsArr15 = [\n    (num >> 14) & 0x1f,\n    (num >> 9) & 0x1f,\n    (num >> 4) & 0x1f,\n    (num) & 0x0f\n  ];\n  bitsArr15[3] |= (bitsArr15[0] ^ bitsArr15[1] ^ bitsArr15[2]) & 0x10;\n  return bitsArr15.map(val => charMap[val]).join('');\n}\n\nexport function b32process(str: string): string {\n  const substitutions: { [key: string]: string } = {\n    \"o\": \"0\", \"O\": \"0\", \"i\": \"1\", \"I\": \"1\",\n    \"l\": \"1\", \"z\": \"2\", \"Z\": \"2\", \"s\": \"5\",\n    \"S\": \"5\", \"b\": \"6\", \"G\": \"6\", \"a\": \"9\",\n    \"g\": \"9\", \"q\": \"9\", \"m\": \"M\", \"t\": \"T\",\n    \"X\": \"x\", \"J\": \"j\", \"e\": \"E\", \"Y\": \"y\",\n    \"W\": \"w\", \"C\": \"c\", \"P\": \"p\", \"n\": \"N\",\n    \"h\": \"N\", \"U\": \"u\", \"v\": \"u\", \"V\": \"u\",\n    \"F\": \"f\", \"K\": \"k\"\n  }\n  let processedStr = '';\n  for (let char of str)\n    processedStr += substitutions[char] || char;\n  return processedStr;\n}\n\nexport function b32decode(encoded: string): number | null {\n  if (!base62Regex.test(encoded))\n    throw new Error(`Input string contains invalid characters (${encoded}) - use 'process()'.`);\n  let bin = Array.from(encoded)\n    .map(c => base32mi.indexOf(c))\n  if (bin.reduce((a, b) => (a ^ b)) & 0x10)\n    return null;\n  return (((bin[0] * 32 + bin[1]) * 32 + bin[2]) * 16 + (bin[3] & 0x0f));\n}\n", "// (c) 2023 384 (tm)\n\nimport {\n    Base62Encoded,\n    isBase62Encoded,\n    arrayBufferToBase62,\n    base62ToArrayBuffer,\n} from './b62';\n\nimport {\n    arrayBufferToBase64url,\n    base64ToArrayBuffer,\n} from './b64';\n\nimport {\n    compareBuffers,\n} from './buffers';\n\nimport {\n    assemblePayload,\n    extractPayload,\n} from './payloads';\n\n/**\n * Convenience: direct conversion from Base62 to Base64.\n * @public\n */\nexport function base62ToBase64(s: Base62Encoded): string {\n    return arrayBufferToBase64url(base62ToArrayBuffer(s));\n}\n\n/**\n * Convenience: direct conversion from Base64 to Base62.\n * @public\n */\nexport function base64ToBase62(s: string): Base62Encoded {\n    return arrayBufferToBase62(base64ToArrayBuffer(s));\n}\n\n\n/**\n * @public\n */\nexport const utils = {\n    arrayBufferToBase62,\n    arrayBufferToBase64url,\n    assemblePayload,\n    base62ToArrayBuffer,\n    base62ToBase64,\n    base64ToArrayBuffer,\n    base64ToBase62,\n    compareBuffers,\n    extractPayload,\n    isBase62Encoded,\n\n    // generateRandomString,\n\n    // _check_ObjectHandle,\n    // stringify_ObjectHandle,\n    // validate_ObjectHandle,\n\n    // _check_SBChannelData,\n    // validate_SBChannelData,\n\n    // validate_Message,\n};\n", "// (c) 2023-2024 384 (tm)\n\nconst DBG0 = false;\n\nimport {\n    _sb_assert, ChannelId,\n    SBUserPrivateKey, SBUserPublicKey, SBError,\n    DBG2, Memoize, Ready,\n    sbCrypto,\n    SB384Hash\n} from 'src/common'\n\nimport { WrapError } from 'src/utils/error'\n\nimport { parseSB384string, ySign, KeyPrefix, KeySubPrefix, xdySignToPrivateKey } from './SBCrypto'\n\nimport { _appendBuffers } from 'src/utils/buffers'\n\nexport type jwkStruct = {\n    x: string;\n    y: string;\n    ySign: 0 | 1;\n    d?: string\n}\n\nimport { base64ToArrayBuffer } from 'src/utils/b64'\nimport { arrayBufferToBase62 } from 'src/utils/b62'\nimport { b32encode } from 'src/utils/b32mi'\nimport { base64ToBase62 } from 'src/utils/index'\n\n\n/**\n  * Basic (core) capability object in SB.\n  *\n  * Can initialize from various formats. If no starting point key is given,\n  * it will \"mint\" a fresh key.\n  *\n  * If ``forcePrivate`` is true, will force SB384 to include private key; it\n  * will throw an exception if the key is not private. If SB384 is used to mint,\n  * then it's always private.\n  *\n  * The important \"externally visible\" formats are:\n  *\n  * - {@link SB384.userId}: unique hash ({@link SB384Hash}) of contents of\n  *   public key, shorter format (256 bits, 43 x base62), cannot be used to\n  *   reconstruct key, used to identify users (and channels)\n  *\n  * - {@link SB384.userPublicKey}: encodes core public key info ('x' and 'y' fields), as a\n  *   base62 string (with a unique prefix). This is 'wire' format as well as\n  *   human-readable. \n  *\n  * - userPrivateKey(): similar to public key format, adds the 'd' field\n  *   information (embedded), from this format a full private key can be\n  *   reconstructed.\n  *\n  * Like most SB classes, SB384 follows the \"ready template\" design pattern: the\n  * object is immediately available upon creation, but isn't \"ready\" until it\n  * says it's ready. See {@link Channel} example below. Getters will throw\n  * exceptions if the object isn't sufficiently initialized. Also see Design\n  * Note [4]_.\n  *\n  * @public\n  */\nexport class SB384 {\n    // ready: Promise<SB384>\n    sb384Ready: Promise<SB384>\n\n    // SB384ReadyFlag: boolean = false // must be named <class>ReadyFlag\n    static ReadyFlag = Symbol('SB384ReadyFlag'); // see below for '(this as any)[SB384.ReadyFlag] = false;'\n\n    #private?: boolean\n\n    #x?: string // all these are base64 encoded\n    #y?: string\n    #ySign?: 0 | 1 // 0 = even, 1 = odd\n    #d?: string\n\n    #privateUserKey?: CryptoKey // if present always private\n    #publicUserKey?: CryptoKey  // always public\n\n    #signKey?: CryptoKey // can sign/verify if private, or just verify\n\n    #hash?: SB384Hash // generic 'identifier', see hash getter below\n    #hashB32?: string // base32 version of hash (first 12 sets eg 48 chars)\n\n    errorState = false; // catch errors and blocks; helps with async error/cleanup sequence\n\n    /**\n     * As a fundamental object, SB384 can be initialized from a number starting points:\n     * \n     * - No key provided: a new key pair is generated\n     * \n     * - A CryptoKey object: a key pair is generated from the CryptoKey\n     * \n     * - A JsonWebKey object: a key pair is generated from the provided JsonWebKey\n     * \n     * - A SBUserPublicKey object: a key pair is generated from the SBUserPublicKey\n     * \n     * - A SBUserPrivateKey object: a key pair is generated from the SBUserPrivateKey\n     * \n     * The 'forcePrivate' parameter is used to force the object to be private; if\n     * the key provided is inherently not private, an exception is thrown. This simplifies\n     * situation where it would only make sense if you're operating with a private key,\n     * and spares you from (sometimes convoluted) checks (eg what fields are present in\n     * a 'jwk' field etc).\n     */\n    constructor(key?: CryptoKey | JsonWebKey | SBUserPublicKey | SBUserPrivateKey, forcePrivate?: boolean) {\n        (this as any)[SB384.ReadyFlag] = false;\n        this.sb384Ready = new Promise<SB384>(async (resolve, reject) => {\n            try {\n                if (!key) {\n                    // generate a fresh ID\n                    if (DBG2) console.log(\"SB384() - generating new key pair\")\n                    const keyPair = await sbCrypto.generateKeys()\n                    const _jwk = await sbCrypto.exportKey('jwk', keyPair.privateKey);\n                    _sb_assert(_jwk && _jwk.x && _jwk.y && _jwk.d, 'INTERNAL');\n                    this.#private = true\n                    this.#x = _jwk!.x!\n                    this.#y = _jwk!.y!\n                    this.#d = _jwk!.d!\n                    if (DBG2) console.log(\"#### FROM SCRATCH\", this.#private)\n                } else if (key instanceof CryptoKey) {\n                    const _jwk = await sbCrypto.exportKey('jwk', key);\n                    _sb_assert(_jwk && _jwk.x && _jwk.y, 'INTERNAL');\n                    if (_jwk!.d) {\n                        this.#private = true\n                        this.#d = _jwk!.d!\n                    } else {\n                        this.#private = false\n                        _sb_assert(!forcePrivate, `ERROR creating SB384 object: key provided is not the requested private`)\n                    }\n                    this.#x = _jwk!.x!\n                    this.#y = _jwk!.y!\n                } else if (key && key instanceof Object && 'kty' in key) {\n                    // jwk key provided\n                    const _jwk = key as JsonWebKey\n                    _sb_assert(_jwk && _jwk.x && _jwk.y, 'Cannot parse format of JWK key');\n                    if (key.d) {\n                        this.#private = true\n                        this.#d = _jwk!.d!\n                    } else {\n                        this.#private = false\n                        _sb_assert(!forcePrivate, `ERROR creating SB384 object: key provided is not the requested private`)\n                    }\n                    this.#x = _jwk!.x!\n                    this.#y = _jwk!.y!\n                } else if (typeof key === 'string') {\n                    // we're given a string encoding\n\n                    const tryParse = parseSB384string(key)\n                    if (!tryParse) {\n                        if (DBG0) console.trace(`SB384() - failed to parse key, trying to create new key pair from '${key}'`)\n                        throw new SBError('ERROR creating SB384 object: invalid key (must be a JsonWebKey | SBUserPublicKey | SBUserPrivateKey, or omitted)')\n                    }\n                    const { x, y, d } = tryParse as jwkStruct\n                    if (d) {\n                        this.#private = true\n                        this.#d = d\n                    } else {\n                        this.#private = false\n                        _sb_assert(!forcePrivate, `ERROR creating SB384 object: key provided is not the requested private`)\n                    }\n                    _sb_assert(x && y, 'INTERNAL');\n                    this.#x = x\n                    this.#y = y\n                } else {\n                    throw new SBError('ERROR creating SB384 object: invalid key (must be a JsonWebKey, SBUserId, or omitted)')\n                }\n                if (DBG2) console.log(\"SB384() constructor; x/y/d:\\n\", this.#x, \"\\n\", this.#y, \"\\n\", this.#d)\n                if (this.#private)\n                    this.#privateUserKey = await sbCrypto.importKey('jwk', this.jwkPrivate, 'ECDH', true, ['deriveKey'])\n                this.#publicUserKey = await sbCrypto.importKey('jwk', this.jwkPublic, 'ECDH', true, [])\n                // we mostly use for sign/verify, occasionally encryption, so double use is ... hopefully ok\n                if (this.#private) {\n                    const newJwk = { ...this.jwkPrivate, key_ops: ['sign'] }\n                    if (DBG2) console.log('starting jwk (private):\\n', newJwk)\n                    this.#signKey = await crypto.subtle.importKey(\"jwk\",\n                        newJwk,\n                        {\n                            name: \"ECDSA\",\n                            namedCurve: \"P-384\",\n                        },\n                        true,\n                        ['sign'])\n                } else {\n                    const newJwk = { ...this.jwkPublic, key_ops: ['verify'] }\n                    if (DBG2) console.log('starting jwk (public):\\n', newJwk)\n                    this.#signKey = await crypto.subtle.importKey(\"jwk\",\n                        newJwk,\n                        {\n                            name: \"ECDSA\",\n                            namedCurve: \"P-384\",\n                        },\n                        true,\n                        ['verify'])\n                }\n\n                // can't put in getter since it's async\n                const channelBytes = _appendBuffers([base64ToArrayBuffer(this.#x!), base64ToArrayBuffer(this.#y!)])\n                const rawHash = await crypto.subtle.digest('SHA-256', channelBytes)\n                this.#hash = arrayBufferToBase62(rawHash)\n\n                // we also create a base32 version of the hash, for use in channel ids (Pages)\n                const hashBigInt = BigInt('0x' + Array.from(new Uint8Array(rawHash)).map(b => b.toString(16).padStart(2, '0')).join('')) >> 28n;\n                this.#hashB32 = Array.from({ length: 12 }, (_, i) => b32encode(Number((hashBigInt >> BigInt(19 * (11 - i))) & 0x7ffffn))).join('');\n\n                if (DBG2) console.log(\"SB384() constructor; hash:\\n\", this.#hash)\n\n                this.#ySign = ySign(this.#y!);\n\n                if (DBG2) console.log(\"SB384() - constructor wrapping up\", this)\n                    // sbCrypto.addKnownKey(this)\n                    ; (this as any)[SB384.ReadyFlag] = true\n                resolve(this)\n            } catch (e) {\n                reject('ERROR creating SB384 object failed: ' + WrapError(e))\n            }\n        })\n\n        // if (DBG0) console.log(\"SB384() - constructor promises set up, promise is:\", this.sb384Ready)\n    }\n\n    get SB384ReadyFlag() { return (this as any)[SB384.ReadyFlag] }\n    get ready() { return this.sb384Ready }\n    // get readyFlag() { return this.#SB384ReadyFlag }\n\n    /** Returns true if this is a private key, otherwise false.\n     * Will throw an exception if the object is not ready. */\n    @Memoize @Ready get private() { return this.#private! }\n\n    /**\n     * Returns a unique identifier for external use, that will be unique\n     * for any class or object that uses SB384 as it's root.\n     * \n     * This is deterministic. Typical use case is to translate a user id\n     * into a {@link ChannelId} (eg the channel that any user id is inherently\n     * the owner of).\n     * \n     * The hash is base62 encoding of the SHA-384 hash of the public key.\n     * \n     */\n    @Memoize @Ready get hash(): SB384Hash { return this.#hash! }\n\n    /**\n     * Similar to {@link SB384.hash}, but base32 encoded.\n     */\n    @Memoize @Ready get hashB32(): SB384Hash { return this.#hashB32! }\n\n    // convenience getter\n    @Memoize @Ready get userId(): SB384Hash { return this.hash }\n\n    /**\n     * This is the {@link ChannelId} corresponding to the user private key.\n     * (If user is owner of THIS channel, then this is same as channelid.) \n     */\n    @Memoize @Ready get ownerChannelId() {\n        // error even though there's a #hash, since we know it needs to be private\n        // ... update, hm, actually this is still used as \"whatif\" for non-owner\n        // if (!this.private) throw new SBError(`ownerChannelId() - not a private key, cannot be an owner key`)\n        return this.hash\n    }\n\n    /** @type {CryptoKey} Private key (might not be present, in which case this will throw) */\n    @Memoize @Ready get privateKey(): CryptoKey {\n        if (!this.private) throw new SBError(`this is a public key, there is no 'privateKey' value`)\n        return this.#privateUserKey!\n    }\n\n    /** @type {CryptoKey} Signing key. */\n    @Memoize @Ready get signKey(): CryptoKey { return this.#signKey! }\n\n    /** @type {CryptoKey} Basic public key, always present. */\n    @Memoize @Ready get publicKey(): CryptoKey { return this.#publicUserKey! }\n\n    /* Deprecated For 'jwk' format use cases. @type {JsonWebKey} */\n    // @Memoize @Ready get exportable_pubKey() { return sbCrypto.extractPubKey(this.#jwk!)! }\n\n    /** @type {JsonWebKey} Exports private key in 'jwk' format. */\n    @Memoize get jwkPrivate(): JsonWebKey {\n        _sb_assert(this.#private, 'jwkPrivate() - not a private key')\n        _sb_assert(this.#x && this.#y && this.#d, \"JWK key info is not available (fatal)\")\n        return {\n            crv: \"P-384\",\n            ext: true,\n            key_ops: [\"deriveKey\"],\n            kty: \"EC\",\n            x: this.#x!,\n            y: this.#y!,\n            d: this.#d!,\n        }\n    }\n\n    /** @type {JsonWebKey} Exports public key in 'jwk' format. */\n    @Memoize get jwkPublic(): JsonWebKey {\n        _sb_assert(this.#x && this.#y, \"JWK key info is not available (fatal)\")\n        return {\n            crv: \"P-384\",\n            ext: true,\n            key_ops: [],\n            kty: \"EC\",\n            x: this.#x!,\n            y: this.#y!\n        }\n    }\n\n    @Memoize get ySign(): 0 | 1 {\n        _sb_assert(this.#ySign !== null, \"ySign() - ySign is not available (fatal)\")\n        return this.#ySign!\n    }\n\n    /**\n     * Wire format of full (decodable) public key\n     * @type {SBUserPublicKey}\n     */\n    @Memoize get userPublicKey(): SBUserPublicKey {\n        _sb_assert(this.#x && (this.#ySign !== undefined), \"userPublicKey() - sufficient key info is not available (fatal)\")\n        return KeyPrefix.SBPublicKey + (this.#ySign! === 0 ? KeySubPrefix.CompressedEven : KeySubPrefix.CompressedOdd) + base64ToBase62(this.#x!)\n    }\n\n    /**\n     * Wire format of full info of key (eg private key). Compressed.\n     */\n    @Memoize get userPrivateKey(): SBUserPrivateKey {\n        _sb_assert(this.#private, 'userPrivateKey() - not a private key, there is no userPrivateKey')\n        const key = xdySignToPrivateKey(this.#x!, this.#d!, this.#ySign!)\n        _sb_assert(key !== undefined, \"userPrivateKey() - failed to construct key, probably missing info (fatal)\")\n        return key!\n    }\n\n    /**\n     * Compressed and dehydrated, meaning, 'x' needs to come from another source\n     * (namely, derived from 'd').\n     */\n    @Memoize get userPrivateKeyDehydrated(): SBUserPrivateKey {\n        _sb_assert(this.#private && this.#d, \"userPrivateKey() - not a private key, and/or 'd' is missing, there is no userPrivateKey\")\n        return (KeyPrefix.SBPrivateKey + KeySubPrefix.Dehydrated + base64ToBase62(this.#d!)) as SBUserPrivateKey\n    }\n\n    /**\n     * Returns private key field 'd' as a binary ArrayBuffer.\n     */\n    @Memoize get binaryD(): ArrayBuffer {\n        if (!this.#private || !this.#d) throw new SBError(\"binaryD() - not a private key, and/or 'd' is missing, there is no userPrivateKey\")\n        return (base64ToArrayBuffer(this.#d))\n    }\n    \n    /**\n     * Convenience wrapper, returns a promise to new, valid SB384 private key.\n     * It's essentially short for:\n     * \n     * ```javascript\n     * const newKey = (await (new SB384()).ready).userPrivateKey\n     * ```\n     * @public\n     */\n    static async newPrivateKey(): Promise<SBUserPrivateKey> {\n        return (await (new SB384()).ready).userPrivateKey\n    }\n\n\n} /* class SB384 */", "// (c) 2024 384 (tm)\n\nimport { SB384 } from '../sbCrypto/SB384'\nimport {SB_CHANNEL_HANDLE_SYMBOL} from './Channel'\n\nconst DBG0 = false\n\nimport {\n    _sb_assert, ChannelId,\n    SBUserPrivateKey, SBError,\n    DBG2, Memoize, Ready,\n    assemblePayload,\n    sbCrypto,\n    SBApiFetch\n} from 'src/common'\n\nimport { WrapError } from 'src/utils/error'\n\nimport { SBChannelData, _check_SBChannelData, validate_SBChannelData } from './Channel'\n\nimport { ChannelApi, ChannelApiBody, validate_ChannelApiBody } from './ChannelApi'\nimport { ChannelHandle, validate_ChannelHandle, _check_ChannelHandle } from './ChannelHandle'\n\nimport { _appendBuffers } from 'src/utils/buffers'\n\n\n/**\n * The minimum state of a Channel is the \"user\" keys, eg how we identify when\n * connecting to the channel.\n *\n * We can construct them from a {@link ChannelHandle} or from a {@link SBUserPrivateKey}.\n */\nexport class ChannelKeys extends SB384 {\n    #channelId?: ChannelId\n    sbChannelKeysReady: Promise<ChannelKeys>\n    static ReadyFlag = Symbol('SBChannelKeysReadyFlag'); // see below for '(this as any)[<class>.ReadyFlag] = false;'\n    #channelData?: SBChannelData\n\n    /** can be read/written freely; will always have a value */\n    channelServer: string\n  \n    constructor(handleOrKey?: ChannelHandle | SBUserPrivateKey) {\n      // undefined (missing) is fine, but 'null' is not\n      let channelServer: string | undefined\n      if (handleOrKey === null) throw new SBError(`ChannelKeys constructor: you cannot pass 'null'`)\n      if (handleOrKey) {\n        if (typeof handleOrKey === 'string') {\n          // we're provided an owner private key\n          const ownerPrivateKey = handleOrKey as SBUserPrivateKey\n          super(ownerPrivateKey, true)\n        } else if (_check_ChannelHandle(handleOrKey)) {\n          const handle = validate_ChannelHandle(handleOrKey)\n          channelServer = handle.channelServer\n          super(handle.userPrivateKey, true);\n          this.#channelId = handle.channelId\n          this.#channelData = handle.channelData // which might not be there\n        } else {\n          throw new SBError(`ChannelKeys() constructor: invalid parameter (must be ChannelHandle or SBUserPrivateKey)`)\n        }\n      } else {\n        // brand new, state will be derived from SB384 keys\n        super()\n      }\n      if (!channelServer) channelServer = ChannelApi.defaultChannelServer;\n      // make sure there are no trailing '/' in channelServer\n      if (channelServer![channelServer!.length - 1] === '/')\n        this.channelServer = channelServer!.slice(0, -1);\n      this.channelServer = channelServer!;\n  \n      (this as any)[ChannelKeys.ReadyFlag] = false\n      this.sbChannelKeysReady = new Promise<ChannelKeys>(async (resolve, reject) => {\n        try {\n          if (DBG0) console.log(\"ChannelKeys() constructor.\")\n          // wait for parent keys (super)\n          await this.sb384Ready; _sb_assert(this.private, \"Internal Error [L2833]\")\n          // either channelId wasn't provided (in which case we must be owner)\n          // or it was (and we're also the owner)\n          if (!this.#channelId || this.owner) {\n            if (!this.#channelId) this.#channelId = this.ownerChannelId\n            this.#channelData = {\n              channelId: this.ownerChannelId,\n              ownerPublicKey: this.userPublicKey\n            }\n          } else if (!this.#channelData) {\n            // we're not owner, and we haven't gotten the ownerPublicKey, so we need to ask the server\n            if (!this.channelServer)\n              throw new SBError(\"ChannelKeys() constructor: either key is owner key, or handle contains channelData, or channelServer is provided ...\")\n            if (DBG0) console.log(\"++++ ChannelKeys being initialized from server\")\n            var cpk: SBChannelData\n            try {\n              cpk = await this.callApi('/getChannelKeys')\n            } catch (e) {\n              // any errors, and we wait 1 second and then try again, until it works\n              while (true) {\n                let count = 0\n                await new Promise(resolve => setTimeout(resolve, 75))\n                try {\n                  cpk = await this.callApi('/getChannelKeys')\n                  break\n                } catch (e) {\n                  // ToDo: these retries should be behind a ChannelApi 'back online' event;\n                  // and in any case a Channel can be 'partly' ready without channel keys.\n                  // right now proper offline resilience only works for owner keys.\n                  // we limit retries regardless\n                  if (count++ > 6)\n                    throw new SBError(\"ChannelKeys() constructor: failed to get channel data, retrying ...\")\n                  console.error(\"ChannelKeys() constructor: failed to get channel data, retrying ...\")\n                }\n              }\n            }\n            cpk = validate_SBChannelData(cpk) // throws if there's an issue\n            // we have the authoritative keys from the server, sanity check\n            _sb_assert(cpk.channelId === this.#channelId, \"Internal Error (L2493)\")\n            this.#channelData = cpk\n          }\n          // should be all done at this point\n          (this as any)[ChannelKeys.ReadyFlag] = true;\n          resolve(this)\n        } catch (e) {\n          reject('[ChannelKeys] constructor failed. ' + WrapError(e))\n        }\n      })\n    }\n  \n    get ready() { return this.sbChannelKeysReady }\n    get SBChannelKeysReadyFlag() { return (this as any)[ChannelKeys.ReadyFlag] }\n  \n    @Memoize get owner() { return this.private && this.ownerChannelId && this.channelId && this.ownerChannelId === this.channelId }\n    @Memoize get channelId() {\n      if (this.#channelId) return this.#channelId\n      else throw new SBError(\"[ChannelKeys] ChannelID not known / object not ready. Internal Error (L894)\")\n    }\n  \n    @Memoize @Ready get channelData() { return this.#channelData! }\n  \n  \n    @Memoize @Ready get handle(): ChannelHandle {\n      return {\n        [SB_CHANNEL_HANDLE_SYMBOL]: true,\n        channelId: this.channelId!,\n        userPrivateKey: this.userPrivateKey,\n        // channelPrivateKey: this.channelUserPrivateKey,\n        channelServer: this.channelServer,\n        channelData: this.channelData\n      }\n    }\n  \n    async buildApiBody(path: string, apiPayload?: any) {\n      await this.sb384Ready // enough for signing\n      const timestamp = await ChannelApi.dateNow() // todo: x256 string format\n      const viewBuf = new ArrayBuffer(8);\n      const view = new DataView(viewBuf);\n      view.setFloat64(0, timestamp);\n      const pathAsArrayBuffer = new TextEncoder().encode(path).buffer\n      const prefixBuf = _appendBuffers([viewBuf, pathAsArrayBuffer])\n      const apiPayloadBuf = apiPayload ? assemblePayload(apiPayload)! : undefined\n      // sign with userId key, covering timestamp + path + apiPayload\n      const sign = await sbCrypto.sign(this.signKey, apiPayloadBuf ? _appendBuffers([prefixBuf, apiPayloadBuf]) : prefixBuf)\n      const apiBody: ChannelApiBody = {\n        channelId: this.#channelId!,\n        path: path,\n        userId: this.userId,\n        userPublicKey: this.userPublicKey,\n        timestamp: timestamp,\n        sign: sign\n      }\n      if (apiPayloadBuf) apiBody.apiPayloadBuf = apiPayloadBuf\n      return validate_ChannelApiBody(apiBody)\n    }\n  \n    /**\n      * Implements Channel api calls.\n      * \n      * Note that the API call details are also embedded in the ChannelMessage,\n      * and signed by the sender, completely separate from HTTP etc auth.\n      */\n    callApi(path: string): Promise<any>\n    callApi(path: string, apiPayload: any): Promise<any>\n    callApi(path: string, apiPayload?: any): Promise<any> {\n      _sb_assert(this.channelServer, \"[ChannelApi.callApi] channelServer is unknown (you can just set it, eg 'channel.channelServer = ...')\")\n      if (DBG0) console.log(\"ChannelApi.callApi: calling fetch with path:\", path)\n      if (DBG2) console.log(\"... and body:\", apiPayload)\n      _sb_assert(this.#channelId && path, \"Internal Error (L2528)\")\n      // todo: we can add 'GET' support with apiBody put into search term,\n      //       if we want that (as we're forced to do for web sockets)\n      return new Promise(async (resolve, reject) => {\n        const init: RequestInit = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/octet-stream\"',\n          },\n          body: assemblePayload(await this.buildApiBody(path, apiPayload))\n        }\n        if (DBG2) console.log(\"==== ChannelApi.callApi: calling fetch with init:\\n\", init)\n        SBApiFetch(this.channelServer + '/api/v2/channel/' + this.#channelId! + path, init)\n          .then((ret: any) => { resolve(ret) })\n          .catch((e: Error) => {\n            if (e instanceof SBError) reject(e)\n            else reject(\"[Channel.callApi] Error: \" + WrapError(e))\n          })\n      })\n    }\n  \n  \n  } /* class ChannelKeys */\n  ", "// (c) 2024 384 (tm)\n\nimport { _sb_assert } from 'src/utils/error'\nimport { SBUserPublicKey, isSBUserId } from '../index'\nimport { Channel } from './Channel'\nimport { ChannelMessage } from './ChannelMessage'\nimport { SBUserId } from '../common'\nimport { SB384 } from '../sbCrypto/SB384'\n\nconst DBG0 = false;\n// declare var DBG2: boolean;\n\n/**\n * Key exchange protocol. Note \n * \n * that SBMessage always includes\n * a reference to the channel. Also note that all this methods\n * are likely to be asynchronous (you'll need await).\n * @public\n */\nexport interface SBProtocol {\n\n  /** even if not used by the protocol, this is set by the channel once the\n      protocol is associated with it; note that if a protocol needs to do\n      prelimaries once it knows the channel, it needs to track that itself.\n      */\n  setChannel(channel: Channel): Promise<void>;\n\n  /** if the protocol doesn't 'apply' to the message, this should throw */\n  encryptionKey(msg: ChannelMessage /* SBMessage */): Promise<CryptoKey>;\n\n  /** 'undefined' means it's outside the scope of our protocol, for example\n       if we're not a permitted recipient, or keys have expired, etc */\n  decryptionKey(msg: ChannelMessage): Promise<CryptoKey | undefined>;\n\n}\n\n/**\n * Superset of what different protocols might need. Their meaning\n * depends on the protocol\n */\nexport interface Protocol_KeyInfo {\n  salt1?: ArrayBuffer,\n  salt2?: ArrayBuffer,\n  iterations1?: number,\n  iterations2?: number,\n  hash1?: string,\n  hash2?: string,\n  summary?: string,\n}\n\n/**\n * Basic protocol, just provide entropy and salt, then all messages are\n * encrypted accordingly.\n *\n * Note that the AES protocol does not depend on any per-message information,\n * nor particulars of sender or recipient. Thus, for example, getting a key will\n * never return 'undefined', but instead will throw if something is wrong (such\n * as missing salt).\n */\nexport class Protocol_AES_GCM_256 implements SBProtocol {\n  #masterKey?: Promise<CryptoKey>\n  #keyInfo: Protocol_KeyInfo\n\n  constructor(passphrase: string, keyInfo: Protocol_KeyInfo) {\n    this.#keyInfo = keyInfo;\n    if (!this.#keyInfo || !this.#keyInfo.salt1 || !this.#keyInfo.iterations1 || !this.#keyInfo.hash1)\n      throw new Error(\"Protocol_AES_GCM_256() - insufficient key info (fatal)\")\n    this.#masterKey = this.initializeMasterKey(passphrase);\n  }\n\n  async ready() {\n    // only really needed for unit tests (they don't like promises left dangling)\n    await this.#masterKey\n  }\n\n  async setChannel(_channel: Channel): Promise<void> {\n    // this protocol doesn't do anything with it, but we need to have endpoint\n    // (channel will always call this method once it has the protocol)\n    return (void 0)\n  }\n\n  async initializeMasterKey(passphrase: string): Promise<CryptoKey> {\n    const salt = this.#keyInfo.salt1!;\n    const iterations = this.#keyInfo.iterations1!;\n    const hash = this.#keyInfo.hash1!;\n    _sb_assert(salt && iterations && hash, \"Protocol_AES_GCM_256.initializeMasterKey() - insufficient key info (fatal)\")\n\n    const baseKey = await crypto.subtle.importKey(\n      'raw',\n      new TextEncoder().encode(passphrase),\n      { name: 'PBKDF2' },\n      false,\n      ['deriveBits', 'deriveKey']\n    );\n\n    const masterKeyBuffer = await crypto.subtle.deriveBits(\n      {\n        name: 'PBKDF2',\n        salt: salt,\n        iterations: iterations,\n        hash: hash\n      },\n      baseKey,\n      256\n    );\n\n    return crypto.subtle.importKey(\n      'raw',\n      masterKeyBuffer,\n      { name: 'PBKDF2' },\n      false,\n      ['deriveBits', 'deriveKey']\n    );\n  }\n\n  static async genKey(): Promise<Protocol_KeyInfo> {\n    return {\n      salt1: crypto.getRandomValues(new Uint8Array(16)).buffer,\n      iterations1: 100000,\n      iterations2: 10000,\n      hash1: 'SHA-256',\n      summary: 'PBKDF2 - SHA-256 - AES-GCM',\n    }\n  }\n\n  // Derive a per-message key (but for AES the message doesn't matter)\n  async #getMessageKey(salt: ArrayBuffer): Promise<CryptoKey> {\n    if (!salt || !(salt instanceof ArrayBuffer)) throw new Error(\"Protocol_AES_GCM_256 - salt missing (fatal)\")\n    const k = await crypto.subtle.deriveKey(\n      {\n        'name': 'PBKDF2',\n        'salt': salt,\n        'iterations': this.#keyInfo.iterations2!, // on a per-message basis\n        'hash': this.#keyInfo.hash1!\n      },\n      await this.#masterKey!,\n      { 'name': 'AES-GCM', 'length': 256 }, true, ['encrypt', 'decrypt'])\n    \n    if (DBG0) {\n      const v = (await crypto.subtle.exportKey('jwk', k)).k\n      if (!v) throw new Error(\"Internal Error (L136)\");\n      console.log(`++++ Protocol_AES_GCM_256.#getMessageKey() - key (k):`, v);\n    }\n    return k\n  }\n\n  async encryptionKey(msg: ChannelMessage): Promise<CryptoKey> {\n    return this.#getMessageKey(msg.salt!)\n  }\n\n  async decryptionKey(msg: ChannelMessage): Promise<CryptoKey> {\n    return this.#getMessageKey(msg.salt!)\n  }\n}\n\n\nfunction _N_id(x: SBUserId | SBUserPublicKey): string { return Protocol_ECDH.keyToName.get(x) || x.slice(0, 6)}\nfunction _N_key(x: SBUserId | SBUserPublicKey): string { return Protocol_ECDH.keyToName.get(x) || x.slice(4, 12) + '...' + x.slice(-4)}\n\n\n/**\n * Essentially implements 'whisper', eg 1:1 public-key based encryption between\n * sender and receiver. It will use as sender the private key used on the\n * Channel, and you can either provide 'sendTo' in the SBMessage options, or\n * omit it in which case it will use the channel owner's public key.\n *\n * Careful not to be 'reusing' this protocol for different channels and/or\n * different users. It will be particular to the channel that it is (eventually)\n * configured for (using setChannel()).\n */\nexport class Protocol_ECDH implements SBProtocol {\n  #channel?: Channel;\n  #keyMap: Map<string, CryptoKey> = new Map();\n\n  /**\n   * For debugging support, you can set this map to translate keys to descriptive\n   * names. This is not used by the protocol itself, only bug DBG0 output.\n   */\n  public static keyToName: Map<SBUserId | SBUserPublicKey, string> = new Map();\n\n  constructor() {\n    /* this protocol depends on channel (sender) and recipient only */\n  }\n\n  async setChannel(ch: Channel): Promise<void> {\n    this.#channel = ch;\n  }\n\n  // track crypto keys to use for different senders (we are always the recipient)\n  async #getKey(privateKey: CryptoKey, otherParty: SBUserId): Promise<CryptoKey> {\n    if (!this.#keyMap.has(otherParty)) {\n      // if (DBG0) console.log(`[${_N_id(c.userId)}] ++++ Protocol_ECDH.#getKey() - creating key for messages from:`, from)\n      const z = await this.#channel!.getVisitorKeyFromID(otherParty);\n      if (!z) throw new Error(`Protocol_ECDH.#getKey() - visitor key not found for '${otherParty}'`);\n      const p384 = await new SB384(z).ready\n      if (p384!.userId !== otherParty) throw new Error(\"Visitor key not consistent. Internal Error (L176)\")\n      const newKey = await crypto.subtle.deriveKey(\n        {\n          name: 'ECDH',\n          public: p384.publicKey\n        },\n        privateKey,\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n      );\n      this.#keyMap.set(otherParty, newKey);\n    }\n    const res = this.#keyMap.get(otherParty);\n    if (!res) throw new Error(\"Internal Error (L205)\");\n    return res!;\n  }\n\n  async encryptionKey(msg: /* SBMessage */ ChannelMessage): Promise<CryptoKey> {\n    const c = await this.#channel!.ready\n\n    const f = msg.f\n    if (!f || f !== c.userId) {\n      if (DBG0) console.error(`[${_N_id(c.userId)}] ERROR. sender missing or it's not us. Sender is:`, f)\n      throw new Error(\"Protocol_ECDH.encryptionKey() - sender is missing or it's not us (error)\")\n    }\n    const t = msg.t ? msg.t : c.channelId!;\n    if (!t || !isSBUserId(t)) throw new Error(\"Protocol_ECDH.encryptionKey() - recipient is missing or it's not a SBUserId (error)\");\n    const k = await this.#getKey(c.privateKey, t);\n    if (DBG0) {\n      const v = (await crypto.subtle.exportKey('jwk', k)).k\n      if (!v) throw new Error(\"Internal Error (L175)\");\n      console.log(`[${_N_id(c.userId)}] ++++ Protocol_ECDH. +EN+ cryptionKey() -  from us and to:`, _N_key(t), \"key:\", v);\n    }\n    return k;\n  }\n\n  async decryptionKey(msg: ChannelMessage): Promise<CryptoKey | undefined> {\n    const c = await this.#channel!.ready\n    const t = msg.t ? msg.t : c.channelId;\n    const f = msg.f\n    if (!f || !isSBUserId(f)) throw new Error(\"Protocol_ECDH.decryptionKey() - sender is missing or not a valid SBUserId\")\n    if (t !== c.userId && f !== c.userId) {\n      if (DBG0) console.log(`[${_N_id(c.userId)}] ++++ Protocol_ECDH.decryptionKey() - neither to nor from us (from [${_N_id(f)}] to [${_N_id(t)}])`)\n      return undefined;\n    }\n    let k: CryptoKey;\n    if (f === c.userId) {\n      // if it's from ourselves (reflected), then we swap (it's symmetric)\n      k = await this.#getKey(c.privateKey, t);\n    } else {\n      k = await this.#getKey(c.privateKey, f);\n    }\n    if (DBG0) {\n      const v = (await crypto.subtle.exportKey('jwk', k)).k\n      if (!v) throw new Error(\"Internal Error (L241)\");\n      console.log(`[${_N_id(c.userId)}] ++++ Protocol_ECDH. -DE- cryptionKey() - from [${_N_id(f)}] to [${_N_id(t)}], key:`, _N_key(v))\n    }\n    return k;\n  }\n\n}\n", "// (c) 2023-2024 384 (tm)\n\nimport {\n    _sb_assert, ChannelId, SBUserId,\n    SBUserPublicKey, SBError,\n} from 'src/common'\n\nconst DBG0 = false;\n\nimport { SBProtocol } from './Protocol'\n\n/**\n * Options for sending a message.\n * @public\n */\nexport interface MessageOptions {\n  /** Time to live, see MessageTtl enum for how it translates to time. */\n  ttl?: MessageTtl,\n  /** Routed message (named recipient). Will be SBUserId but for convenience internally will convert from SBUserPublicKey. */\n  sendTo?: SBUserId | SBUserPublicKey,\n  /** 'i2' in ChannelMessage (Owner only) */\n  subChannel?: string,\n  protocol?: SBProtocol,\n  /** if true, just send the string, no other processing */\n  sendString?: boolean,\n  /** Internal. Optional override of defaults (0 for no retries) */\n  retries?: number,\n}\n\n\n/**\n     Index/number of seconds/string description of TTL values (0-15) for\n     messages and shards.\n\n     ```text\n         #    Seconds  Description\n         0          0  Ephemeral (not stored)\n         1             <reserved>\n         2             <reserved>\n         3         60  One minute (current minimum)\n         4        300  Five minutes\n         5       1800  Thirty minutes\n         6      14400  Four hours\n         7     129600  36 hours\n         8     864000  Ten days\n        10             <reserved> (all 'reserved' future choices will be monotonically increasing)\n        11             <reserved>\n        12             <reserved>\n        13             <reserved>\n        14             <reserved>\n        15   Infinity  Permastore, this is the default.\n      ```\n\n      Note that time periods above '8' (10 days) is largely TBD pending\n      finalization of what the storage server will prefer. As far as messages\n      are concerned, anything above '8' is 'very long'.\n\n      A few rules around messages and TTL (this list is not exhaustive):\n\n      - Currently only values 0, 3-8, and 15 are valid (15 is default).\n      - Routable messages (eg messages with a 'to' field) may not have ttl above '8'.\n      - TTL messages are never in storage shards; channel servers can chose to\n        limit how many they will keep (on a per TTL category basis) regardless\n        of time value (but at least last 1000).\n      - TTL messages are duplicated and available on 'main' channel ('i2')\n        '____' as well as on subchannels '___3', '___4', up to '___8'.\n\n      It's valid to encode it as four bits (by design).\n\n      The  {@link msgTtlToSeconds} array provides the actual time in seconds for\n      each value, and {@link msgTtlToString} provides a string description.\n\n      @public\n*/\nexport type MessageTtl = 0 | 3 | 4 | 5 | 6 | 7 | 8 | 15\n\n/** @internal */ export const msgTtlToSeconds = [0, -1, -1, 60, 300, 1800, 14400, 129600, 864000, -1, -1, -1, -1, -1, Infinity]\n/** @internal */ export const msgTtlToString = ['Ephemeral', '<reserved>', '<reserved>', 'One minute', 'Five minutes', 'Thirty minutes', 'Four hours', '36 hours', '10 days', '<reserved>', '<reserved>', '<reserved>', '<reserved>', '<reserved>', 'Permastore (no TTL)']\n\n\n\n/**\n * The \"app\" level message format, provided to onMessage (by ChannelSocket), and\n * similar interfaces.\n * \n * 'body' contains whatever the message contents are, most apps won't be accessing\n * the rest of the fields. And they are all populated either by the library\n * or the server.\n * \n * Note that generally apps won't see a message unless it's been validated\n * in a variety of ways.\n * \n * Internally, os384 shuffles messages around as @{link ChannelMessage}.\n * \n * Validator is {@link validate_Message}.\n * \n * @public\n */\nexport interface Message {\n    body: any;\n\n    channelId: ChannelId;\n    sender: SBUserId;\n    /** implied is userId of channel, but note that all 'private' messages are 'cc' to Owner */\n    messageTo?: SBUserId;\n    senderPublicKey: SBUserPublicKey;\n    senderTimestamp: number;\n    /** reconstructed from timestampPrefix */\n    serverTimestamp: number;\n    /** end of life (timestamp, if present) */\n    eol?: number;\n    _id: string;\n    /** if present, hash of previous message from this sender */\n    previous?: string;\n    /** if present, there was an error */\n    error?: string;\n}\n\n/**\n * Validates 'Message', throws if there's an issue\n * @public\n */\nexport function validate_Message(data: Message): Message {\n    if (!data) throw new SBError(`invalid Message (null or undefined)`)\n    else if (\n        // body can be anything, but must be something\n        data.body !== undefined && data.body !== null\n        && data.channelId && typeof data.channelId === 'string' && data.channelId.length === 43\n        && data.sender && typeof data.sender === 'string' && data.sender.length === 43\n        && data.senderPublicKey && typeof data.senderPublicKey === 'string' && data.senderPublicKey.length > 0\n        && data.senderTimestamp && Number.isInteger(data.senderTimestamp)\n        && data.serverTimestamp && Number.isInteger(data.serverTimestamp)\n        && data._id && typeof data._id === 'string' && data._id.length === 75 // 86 new v3 format is shorter (base 4)\n    ) {\n        return data as Message\n    } else {\n        if (DBG0) console.error('invalid Message ... trying to ingest:\\n', data)\n        throw new SBError(`invalid Message`)\n    }\n}\n\n\n\n/**\n * Every message being sent goes through the SBMessage object. Upon creation,\n * the provided contents (which can be any JS object more or les) is encrypted\n * and wrapped into a ChannelMessage object, which is what is later sent. Same\n * binary format is used for restful endpoints, websockets, and other\n * transports.\n *\n * Body should be below 32KiB. Note: for protocol choice, sbm will prioritize\n * message options over channel choice, and lacking both will default to\n * Channel.defaultProtocol (which is Protocol_ECDH).\n *\n * Note that with Protocl_ECDH, you need to make sure 'sendTo' is set, since\n * that will otherwise default to Owner. It does not support channel\n * 'broadcast'.\n *\n * The option 'sendString' allows for 'lower-level' messaging, for example for\n * special 'keep alive' messages that might be server-specific. If that is set,\n * the contents are expected to be a string, and the message will be sent as-is,\n * and features like encryption, ack/nack, ttl, routing, etc, are not available.\n */\n\n\n// class SBMessage {\n//   [SB_MESSAGE_SYMBOL] = true\n//   sbMessageReady: Promise<SBMessage>\n//   static ReadyFlag = Symbol('SBMessageReadyFlag'); // see below for '(this as any)[<class>.ReadyFlag] = false;'\n//   #message?: ChannelMessage | string   // the message that's set to send\n//   salt?: ArrayBuffer\n\n//   constructor(\n//     public channel: Channel,\n//     public contents: any,\n//     public options: MessageOptions = {}\n//   ) {\n\n//     if (options.sendString) {\n//       // in this case, we don't need to do anything else, so 'sbMessageReady'\n//       // should resolve to 'this' right away\n//       _sb_assert(typeof contents === 'string', \"SBMessage() - sendString is true, but contents is not a string\")\n//       this.#message = contents\n//       this.sbMessageReady = new Promise<SBMessage>(async (resolve) => {\n//         (this as any)[SBMessage.ReadyFlag] = true\n//         resolve(this)\n//       })\n//     } else {\n//       // there is always sbm-generated salt, whether or not the protocol needs it,\n//       // or wants to create/manage it by itself\n//       this.salt = crypto.getRandomValues(new Uint8Array(16)).buffer;\n//       this.sbMessageReady = new Promise<SBMessage>(async (resolve) => {\n//         await channel.channelReady\n//         if (!this.options.protocol) this.options.protocol = channel.protocol\n//         if (!this.options.protocol) this.options.protocol = Channel.defaultProtocol\n//         this.#message = await sbCrypto.wrap(\n//           this.contents,\n//           this.channel.userId,\n//           await this.options.protocol.encryptionKey(this),\n//           this.salt!,\n//           this.channel.signKey,\n//           options);\n//         (this as any)[SBMessage.ReadyFlag] = true\n//         resolve(this)\n//       })\n//     }\n//   }\n\n//   get ready() { return this.sbMessageReady }\n//   get SBMessageReadyFlag() { return (this as any)[SBMessage.ReadyFlag] }\n//   @Ready get message() { return this.#message! }\n\n//   /**\n//    * SBMessage.send()\n//    */\n//   async send() {\n//     await this.ready\n//     if (DBG0) console.log(\"SBMessage.send() - sending message:\", this.message)\n//     return this.channel.callApi('/send', this.message)\n//   }\n// } /* class SBMessage */\n\n", "// (c) 2024 384 (tm)\n\nconst DBG0 = false\nconst DBG1 = false\nconst DBG2 = false\n\nconst _SEP_ = '='.repeat(76)\nconst SEP = '\\n' + _SEP_ + '\\n'\n\n// const _SEP = '\\n' + _SEP_\n// const SEP_ = _SEP_ + '\\n'\n\n// import { AsyncSequence } from \"../utils/AsyncSequence\"\n\n// @internal\nexport const TEST_WITH_SMALL_BRANCHING = false // if true, will use NON PRODUCTION settings for DeepHistory\nif (TEST_WITH_SMALL_BRANCHING && !(DBG0 || DBG1)) throw new Error(\"TEST_WITH_SMALL_BRANCHING is set, but DBG0 or DBG1 is not set\");\n\n// all (value) nodes are indexed with strings; and they are always sorted etc\n/** @internal */\nexport interface TreeNodeValueType {\n  type: 'messageHistory',\n  from: string,\n  to: string,\n  count: number,\n}\n\n/** @internal */\nexport class HistoryTreeNode<FrozenType> {\n\n  // it's either one or the other of these arrays, but merging the types will\n  // lead to convoluted code (eg type guards for constructed vs generic types).\n  childrenNodes: HistoryTreeNode<FrozenType>[] = [];\n  childrenValues: TreeNodeValueType[] = [];\n\n  from: string | undefined = undefined;\n  to: string | undefined = undefined;\n  count: number = 0;\n  isFull: boolean = false;\n  height: number = 1;\n  frozenChunkId: FrozenType | undefined = undefined; // if we're frozen at this point, this is the chunk number\n\n  constructor(\n    public isLeaf: boolean = false // if true, children array has TreeNodeValueType members, otherwise TreeNode members\n  ) { }\n\n  // Inserts a value (will always succeed). Will handle any partial freezing or merging of nodes.\n  async insertTreeNodeValue(\n    root: HistoryTree<FrozenType>,\n    value: TreeNodeValueType\n  ): Promise<void> {\n    if (this.isFull) throw new Error(\"Should not be inserting here\")\n    const { count, from, to } = value\n    this.count += count; // we are always the destination of the count\n    if (isNil(this.from) !== isNil(this.to)) throw new Error(\"Internal Error (L52)\") // we start with either both or neither\n    if (isNil(this.from) || isNil(this.to)) { // we have not been initialized\n      this.from = from;\n      this.to = to;\n    } else if (to > this.to) { // we have existing values, so new value must be 'larger' (newer)\n      this.to = to;\n    } else {\n      throw new Error(\"Internal Error (L59)\") // we should not be inserting 'older' values\n    }\n    if (this.isLeaf) {\n      if (DBG0) console.log(\"We are a leaf, ergo we insert the value as a child\")\n      if (DBG1) console.log(value)\n      this.childrenValues.push(value);\n      if (this.childrenValues.length === root.branchFactor) {\n        if (DBG0) console.log(\"... that was the last value child we have room for, so, we freeze ('leaf')\")\n        this.isFull = true;\n        const x = this.export()\n        this.frozenChunkId = await root.freeze(x)\n        this.childrenValues.length = 0; // coldsleep, all of them, look out for Steel\n        if (DBG1) console.log(SEP, \"How 'we' look like after freezing:\\n\", this, SEP)\n      }\n      if (DBG2) console.log(\"... done, result:\\n\", this)\n    } else if (this.childrenNodes.length === 0 || this.childrenNodes[this.childrenNodes.length - 1].isFull) {\n      if (DBG0) console.log(\"We either have no children, or they're all full\")\n      if (this.childrenNodes.length === root.branchFactor)\n        throw new Error(\"Internal Error (L77)\")\n      const newNode = new HistoryTreeNode<FrozenType>(true); // always start with leaf node\n      await newNode.insertTreeNodeValue(root, value);\n      this.childrenNodes.push(newNode);\n    } else {\n      if (DBG0) console.log(\"We have children, and the last one is not full, pick last on our list and insert\")\n      await this.childrenNodes[this.childrenNodes.length - 1].insertTreeNodeValue(root, value);\n      if (this.childrenNodes[this.childrenNodes.length - 1].isFull && this.childrenNodes.length === root.branchFactor) {\n        if (DBG0) console.log(\"That filled up our last child, and we have a full set of children ...\")\n        let allEqual = true;\n        let i = 0;\n        for (i = 0; i < this.childrenNodes.length - 1; i++)\n          if (this.childrenNodes[i].height !== this.childrenNodes[i + 1].height) {\n            allEqual = false;\n            break;\n          }\n        if (allEqual) {\n          if (DBG0) console.log(\"... and they are all the same height, thus, we freeze ('node')\")\n          if (DBG1) console.log(\"... here is what we look like before freezing:\\n\", this)\n          this.isFull = true;\n          this.frozenChunkId = await root.freeze(this.export());\n          this.childrenNodes.length = 0; // coldsleep, all of them, look out for Steel\n        } else {\n          if (DBG0) console.log(\"... but they are not all the same height, so the 'right' side are shiftedn 'down'\")\n          // we know that child 'i+1' onwards are shorter than child 'i'; merge those into a new node\n          const newChild = new HistoryTreeNode<FrozenType>();\n          newChild.childrenNodes = this.childrenNodes.splice(i + 1);\n          // we leverage that the leaves are always sorted 'left to right'\n          newChild.count = newChild.childrenNodes.map(child => child.count).reduce((acc, val) => acc + val, 0);\n          const newChildHeight = newChild.childrenNodes.map(child => child.height).reduce((acc, val) => Math.max(acc, val!), 0) + 1\n          newChild.height = newChildHeight;\n          newChild.from = newChild.childrenNodes[0].from;\n          newChild.to = newChild.childrenNodes[newChild.childrenNodes.length - 1].to;\n          this.childrenNodes.push(newChild);\n        }\n      }\n    }\n  }\n\n  // this will traverse all entries, deFrost along the way as needed, and call the callback\n  async traverse(\n    root: HistoryTree<FrozenType>,\n    callback: (node: HistoryTreeNode<FrozenType>) => Promise<void>,\n    reverse = false\n  ): Promise<void> {\n    if (!reverse) await callback(this);\n    if (!isNil(this.frozenChunkId)) {\n      HistoryTreeNode.import<FrozenType>(await root.deFrost(this.frozenChunkId)).traverse(root, callback, reverse);\n    } else {\n      if (!reverse) for (const child of this.childrenNodes)\n        await child.traverse(root, callback, reverse);\n      else for (let i = this.childrenNodes.length - 1; i >= 0; i--)\n        await this.childrenNodes[i].traverse(root, callback, reverse);\n    }\n    if (reverse) await callback(this);\n  }\n\n  async* _iterateValues(\n    node: this,\n    reverse = false,\n    residualSkip: number\n  ): AsyncIterableIterator<TreeNodeValueType> {\n    if (DBG0) console.log(\"HistoryTreeNode._iterateValues\")\n    if (node.childrenValues.length > 0) {\n      if (residualSkip > node.childrenValues.length)\n        return residualSkip - node.childrenValues.length;\n      if (node.childrenValues.length > 0) {\n        const valuesArray = (reverse ? node.childrenValues.slice().reverse() : node.childrenValues).slice(residualSkip);\n        for (const value of valuesArray)\n          yield value;\n        return 0;\n      }\n    }\n    return residualSkip;\n  }\n\n  /**\n   * Asynchronously traverses all entries in the tree, defrosting\n   * as needed, calling _iterateValues() on each.\n   */\n  async *traverseGenerator(\n    root: HistoryTree<FrozenType>,\n    from: string,\n    to: string,\n    reverse: boolean = false,\n    residualSkip: number /* = 0 */\n  ): AsyncIterableIterator<TreeNodeValueType> {\n    if (!root) throw new Error(\"Internal Error (L165)\")\n    if (DBG0) console.log(\"HistoryTreeNode.traverseGenerator\")\n    if (residualSkip >= this.count) return residualSkip - this.count;\n    if (!reverse) residualSkip = yield* this._iterateValues(this, reverse, residualSkip);\n    if (!isNil(this.frozenChunkId)) {\n      const frozenData = await root.deFrost(this.frozenChunkId);\n      const importedNode = HistoryTreeNode.import<FrozenType>(frozenData);\n      return residualSkip = yield* importedNode.traverseGenerator(root, from, to, reverse, residualSkip);\n    } else {\n      if (DBG0) console.log(\"HistoryTreeNode.traverseGenerator, childrenNodes.length\", this.childrenNodes.length)\n      if (reverse) {\n        for (let i = this.childrenNodes.length - 1; i >= 0; i--)\n          return yield* this.childrenNodes[i].traverseGenerator(root, from, to, reverse, residualSkip);\n      } else {\n        for (const child of this.childrenNodes)\n          return yield* child.traverseGenerator(root, from, to, reverse, residualSkip);\n      }\n    }\n    if (reverse) residualSkip = yield* this._iterateValues(this, reverse, residualSkip);\n    return 0;\n  }\n\n  async *traverseValuesGenerator(\n    root: HistoryTree<FrozenType>,\n    from: string,\n    to: string,\n    reverse: boolean = false,\n    residualSkip: number = 0\n  ): AsyncIterableIterator<TreeNodeValueType> {\n    if (!root) throw new Error(\"Internal Error (L192)\")\n    if (DBG0) console.log(\"HistoryTreeNode.traverseValuesGenerator\")\n    yield* this.traverseGenerator(root, from, to, reverse, residualSkip)\n  }\n\n\n  // very picky validator, available for test suites (not called during normal\n  // operation). Will throw an error if anything is amiss. note that this will\n  // not recurse into frozen nodes.\n  async validate(root: HistoryTree<FrozenType>, valueSize: number = 1): Promise<void> {\n\n    // but checks if height is unnecessarily high; the log of count to the\n    // base of branch factor should be within '1' of height.\n    function heightError(height: number, count: number): boolean {\n      if (isNil(count) || count <= 1) return false;\n      const actualCount = count / valueSize; // account for TreeNodeValueType count of items\n      const exponent = Math.log(actualCount) / Math.log(root.branchFactor)\n      const result = (Math.abs(exponent - height) > (1 + 1e-10)) // avoid floating point imperfections\n      if (result)\n        console.log(SEP, \"Height error found.\\nheight =\", height, \", count =\", count,\n          \", actualCount =\", actualCount, \", exponent =\",\n          exponent, \", Math.floor(exponent) =\", Math.floor(exponent),\n          \", branch =\", root.branchFactor, \", branch ** height =\", root.branchFactor ** height, SEP);\n      return result;\n    }\n\n    let errorList = \"\";\n    if (isNil(this.from) !== isNil(this.to)) errorList += \"[1]\"\n    if ((this.childrenValues.length > 0) && (this.childrenNodes.length > 0)) errorList += \"[2]\" // can't both be empty\n    if (this.childrenValues.length !== 0 || this.childrenNodes.length !== 0) {\n      if (isNil(this.from)) errorList += \"[3]\"\n      if (this.count === 0) errorList += \"[4]\"\n    }\n    if (this.childrenValues.length > 0) {\n      const childrenCount = this.childrenValues.map(child => child.count).reduce((acc, val) => acc + val, 0);\n      if (this.count !== childrenCount) errorList += \"[5]\"\n      if (this.height !== 1) errorList += \"[6]\"\n    }\n    if (this.childrenNodes.length > 0) {\n      // check that all children have a height value\n      if (this.childrenNodes.map(child => child.height).some(height => isNil(height) || height === 0)) errorList += \"[7]\"\n      // traverse all children and calculate MAX height among them\n      const maxChildHeight = this.childrenNodes.map(child => child.height).reduce((acc, val) => Math.max(acc, val!), 0);\n      if (this.height !== maxChildHeight + 1) errorList += \"[8]\"\n    }\n    if (!isNil(this.frozenChunkId)) {\n      if (this.childrenValues.length > 0) errorList += \"[9]\"\n      if (this.childrenNodes.length > 0) errorList += \"[10]\"\n    }\n    if (this.count === (root.branchFactor ** this.height)) {\n      // if it's a 'perfect' node, then it should have ended up perfectly\n      // balanced, and full, ergo frozen.\n      if (this.childrenValues.length > 0) errorList += \"[11]\"\n      if (this.childrenNodes.length > 0) errorList += \"[12]\"\n      if (isNil(this.frozenChunkId)) errorList += \"[13]\"\n      if (!this.isFull) errorList += \"[14]\"\n    }\n\n    if (heightError(this.height, this.count)) errorList += \"[15]\"\n    if (this.childrenNodes.length >= 2) {\n      // check that all 'from' and 'to' values make sense\n      for (let i = 0; i < this.childrenNodes.length - 1; i++) {\n        if (isNil(this.childrenNodes[i].to) || isNil(this.childrenNodes[i + 1].to)) errorList += \"[16]\"\n        if (isNil(this.childrenNodes[i].from) || isNil(this.childrenNodes[i + 1].from)) errorList += \"[17]\"\n        if (this.childrenNodes[i].to! >= this.childrenNodes[i + 1].from!) errorList += \"[18]\"\n      }\n    }\n    if (errorList !== \"\") {\n      console.error(SEP, \"Validation failed: \" + errorList, SEP)\n      if (DBG0) console.log(this, SEP)\n      throw new Error(\"Validation failed: \" + errorList)\n    }\n    if (this.childrenNodes.length > 0) {\n      for (const child of this.childrenNodes)\n        await child.validate(root, valueSize);\n    }\n  }\n\n  async _callbackValues(\n    node: HistoryTreeNode<FrozenType>,\n    _nodeCallback?: (value: TreeNodeValueType) => Promise<void>,\n    reverse = false\n  ): Promise<void> {\n    if (node.childrenValues.length > 0) {\n      const valuesArray = reverse ? node.childrenValues.slice().reverse() : node.childrenValues;\n      for (const value of valuesArray) {\n        if (!isNil(_nodeCallback)) {\n          await _nodeCallback(value);\n        } else {\n          if (DBG0) console.log(value);\n        }\n      }\n    }\n  }\n\n  async traverseValues(\n    root: HistoryTree<FrozenType>,\n    callback?: (value: TreeNodeValueType) => Promise<void>,\n    reverse = false\n  ): Promise<void> {\n    return this.traverse(root, async node => await this._callbackValues(node, callback, reverse), reverse);\n  }\n\n\n\n  export(): any {\n    let retVal: any = { from: this.from, to: this.to, count: this.count, height: this.height }\n    if (this.isFull) retVal.isFull = true; // omit if false (default)\n    if (!isNil(this.frozenChunkId)) {\n      retVal = { ...retVal, frozenChunkId: this.frozenChunkId }\n    } else if (this.childrenValues.length > 0) {\n      retVal = { ...retVal, isLeaf: true, children: this.childrenValues }\n    } else if (this.childrenNodes.length > 0)\n      retVal = {\n        ...retVal, children: this.childrenNodes.map(child => child.export())\n      }\n    return retVal;\n  }\n\n  static import<FrozenType>(\n    data: any\n  ): HistoryTreeNode<FrozenType> {\n    if (DBG1) console.log(\"importing data:\", data)\n    const node = new HistoryTreeNode<FrozenType>(data.isLeaf);\n    node.from = data.from;\n    node.to = data.to;\n    node.count = data.count;\n    node.height = data.height;\n    if (!isNil(data.frozenChunkId)) {\n      node.frozenChunkId = data.frozenChunkId;\n      node.isFull = true;\n    } else if (data.isLeaf) {\n      node.isFull = data.isFull;\n      node.childrenValues = data.children;\n    } else {\n      node.isFull = data.isFull;\n      if (data.children && data.children.length > 0)\n        node.childrenNodes = data.children.map((child: any) => HistoryTreeNode.import(child));\n    }\n    return node;\n  }\n\n}\n\n// true if value is null or undefined. less confusing than using '==' in code.\nfunction isNil(value: any): value is null | undefined {\n  return value == null; // deliberate use of '==' (do not use '===')\n}\n\n/**\n* Handles an arbitrary number of entries. An entry is of type 'TreeNodeValueType'; it\n* will contain, or reference, some set of items, which 'HistoryTree' doesn't\n* care about per se. Every set is characterized by having a population count\n* ('count'), and a range of index (key) values, ranging from 'from' to 'to',\n* inclusive. These indexes are of type 'string' (typically number or\n* string).\n* \n* 'count' of zero is not permitted, and similarly both 'from' and 'to' must\n* have values (they are allowed to be the same).\n*\n* Note that 'TreeNodeValueType' is assumed to be compact.\n*\n* Only insertion of 'larger' values are permitted; the 'from' index must be\n* greater than the highest 'to' value in the tree, and also may not overlap.\n* \n* 'branchFactor' is self explanatory. If created with 'data', that in turn\n* is assumed to be the (exact) same format as a previously exported tree.\n*\n* @internal\n*/\nexport abstract class HistoryTree<FrozenType> {\n  root: HistoryTreeNode<FrozenType> = new HistoryTreeNode<FrozenType>(true)\n  abstract freeze(data: HistoryTreeNode<FrozenType>): Promise<FrozenType>\n  abstract deFrost(data: FrozenType): Promise<HistoryTreeNode<FrozenType>>\n  private insertOrValidateLock = false;\n  private residualSkip = 0;\n  constructor(public branchFactor: number, data?: any) {\n    if (DBG2) console.log(\"branchFactor\", branchFactor, \"data\", data)\n    // super({\n    //   [Symbol.asyncIterator]: () => this.spawn(),\n    // });\n    if (data)\n      this.root = HistoryTreeNode.import(data);\n\n  }\n  async insertTreeNodeValue(value: TreeNodeValueType): Promise<void> {\n    if (this.insertOrValidateLock) throw new Error(\"Insertion or validation already in progress (these operations are not parallelized, are you missing an 'await'?)\")\n    this.insertOrValidateLock = true;\n    const { count, from, to } = value;\n    if (DBG1) console.log(\"inserting value:\", value, \"count:\", count, \"from:\", from, \"to:\", to)\n    if (!isNil(this.root.to) && from <= this.root.to)\n      throw new Error(`Insertion 'from' index ('${from}') must be greater than the highest 'to' value in the tree (currently '${this.root.to}')`)\n    if (this.root.isFull) {\n      if (DBG0) console.log(\"ROOT is full, we need to create a new root, push current root to first child\")\n      const newRoot = new HistoryTreeNode<FrozenType>();\n      newRoot.from = this.root.from;\n      newRoot.to = this.root.to;\n      newRoot.count = this.root.count;\n      newRoot.height = this.root.height + 1;\n      newRoot.childrenNodes.push(this.root);\n      this.root = newRoot;\n    }\n    if (DBG1) console.log(\"... inserting value from root on down\")\n    await this.root.insertTreeNodeValue(this, value);\n    this.insertOrValidateLock = false;\n  }\n  async traverse(callback: (node: HistoryTreeNode<FrozenType>) => Promise<void>, reverse = false): Promise<void> {\n    return this.root.traverse(this, callback, reverse);\n  }\n  async traverseValues(callback?: (value: TreeNodeValueType) => Promise<void>, reverse = false): Promise<void> {\n    return this.root.traverseValues(this, callback, reverse);\n  }\n  async *traverseValuesGenerator(\n    from: string,\n    to: string,\n    reverse = false\n  ): AsyncIterableIterator<TreeNodeValueType> {\n    if (DBG0) console.log(\"HistoryTree.traverseValuesGenerator\")\n    yield* this.root.traverseValuesGenerator(this, from, to, reverse, this.residualSkip);\n  }\n\n  skip(count: number): HistoryTree<FrozenType> {\n    this.residualSkip += count;\n    return this;\n  }\n\n  // async *spawn() {\n  //   yield* this.traverseValuesGenerator();\n  // }\n\n  async validate(valueSize?: number): Promise<void> {\n    if (this.insertOrValidateLock) throw new Error(\"Validation or insertion already in progress (these operations are not parallelized, are you missing an 'await'?)\")\n    this.insertOrValidateLock = true;\n    if (isNil(this.root)) throw new Error(\"Root missing (Internal Error)\")\n    await this.root.validate(this, valueSize);\n    this.insertOrValidateLock = false;\n  }\n  get from(): string | undefined {\n    if (isNil(this.root)) return undefined;\n    return this.root.from;\n  }\n  get to(): string | undefined {\n    if (isNil(this.root)) return undefined;\n    return this.root.to;\n  }\n  export(): any {\n    if (this.root)\n      return this.root.export();\n    else return {};\n  }\n}\n", "// (c) 2024 384 (tm)\n\nconst DBG0 = false\n\nimport {\n  ChannelId, SBUserPublicKey, ObjectHandle, ChannelApi, Channel, Message,\n  ChannelMessage,\n} from '../index'\nimport { DBG2, SEP, _SEP, _SEP_, Memoize, isNil } from '../common'\n// import { AsyncSequence } from \"../utils/AsyncSequence\"\nimport { TreeNodeValueType, HistoryTree, HistoryTreeNode, TEST_WITH_SMALL_BRANCHING } from './HistoryTree'\n\n/**\n* 'MessageHistory' is where Messages go to retire. It's a scaleable structure\n* that can be used to store messages in a flexible way. Chunks of messages are\n* stored as shards, in the form of a payload wrapped Map (key->message), where\n* each message in turn is a payload-wrapped ChannelMessage.\n*\n* This can be thought of as a flexible 'key-value store archive format' (where\n* the keys are globally unique and monotonically increasing).\n*\n* The channel server keeps the 'latest' messages (by some definition) in a\n* straight KV format; overflow (or archiving) is done by processing messages\n* into this structure.\n*\n* The class for the whole thing is 'DeepHistory', below. It is a variant of a\n* Merkle tree (strictly speaking, it's only a Merkle tree when fully 'frozen').\n*\n* @public\n*/\nexport interface MessageHistory extends TreeNodeValueType {\n  version: '20240603.0',\n  channelId: ChannelId, // server from which this backup was originally taken\n  ownerPublicKey: SBUserPublicKey, // archives pub key that created original channel\n  created: number, // timestamp of creation (of this backup shard)\n  size?: number, // total size of all the messages (counted individually, not the size of the shard)\n  shard: ObjectHandle, // the actual shard with the messages\n}\n\n/**\n* Full deep history (\"DH\") feature. If no budget is provided, it will be in\n* read-only mode. Uses Tree with index type 'string' (eg channelId + '_' +\n* subChannel + '_' + timestampPrefix). The 'values' handled by HistoryTree are\n* MessageHistory, and this class will encapsulate shardifying the lowest level,\n* eg 'leaf' nodes with between ~128 and 512 messages.\n*\n* Note that the channel server has a parallel class to this ('ChannelHistory')\n*\n* @public\n*/\nexport abstract class DeepHistory<FrozenType> extends HistoryTree<FrozenType> {\n  /*\n     the production values are calibrated for overflowing on either max message\n     count or max message size, whichever happens first.  a 'directory' (eg\n     'node') entry is at most ~750 bytes per child. hence the branching factor\n     of 32, which will keep the size of a sharded 'node' under 24 KiB.\n\n     the message set size is set to 512, which is approx half of 1000, which is\n     the current Cloudflare limit to single-query key queries. with a current\n     maximum of 64 KiB per message (though we are currently using 32 KiB), that\n     would translate to at least 32 MiB in a single shard, which is well above\n     efficient sizes, so we also limit the size message contents to 4 MiB, which\n     in practice leads to a minimum message count of 125 (not 128, because of\n     packaging overhead, and a small buffer).\n\n     in practice, most messages are (much) shorter than max.\n\n     we want large values, if for no other reason than that the mutable part of\n     DeepHistory is of a size that's a function of height.\n\n     these production values imply a single-level tree can reference up to 16K\n     messages (or up to 128 MiB of message content); two levels can reference\n     512K messages (or up to 4 GiB of message content); three levels can\n     reference 16M messages (or up to 128 GiB of message content).\n\n     the design limit for a single channel is 256K messages per second. so two\n     year's worth of flat-out messaging would be over 16 trillion messages, and\n     could in principle fit in a 7-level tree.\n\n     our current channel servers are capped by CF at 1K messages per second, but\n     we have POC server code that can handle >1M.\n\n  */\n\n  abstract storeData(data: any): Promise<FrozenType>\n  abstract fetchData(handle: FrozenType): Promise<any>\n\n  // this is specific to DH; we take a cue from SBFile max chunks which are\n  // currently 4 MiB, and current channel server message maximum is 32 KiB. \n  public static MAX_MESSAGE_HISTORY_SHARD_SIZE = (4 * 1024 * 1024) - (2 * 32 * 1024)\n\n  constructor(\n    public branchFactor: number,\n    data?: any\n  ) { super(branchFactor, data); }\n\n  // provides abstract interface for the Tree class\n  async freeze(data: HistoryTreeNode<FrozenType>): Promise<FrozenType> {\n    if (DBG2) console.log(\"freezing data:\", data)\n    const f = await this.storeData(data)\n    if (DBG2) console.log(\"... frozen data identifier:\", f)\n    return f\n  }\n  // provides abstract interface for the Tree class\n  async deFrost(handle: FrozenType) {\n    if (DBG2) console.log(\"deFrosting handle:\", handle)\n    const data = await this.fetchData(handle) as any;\n    if (DBG2) console.log(\"... deFrosted results:\\n\", data)\n    return data\n  }\n  /** returns timestamp form of FIRST message covered by this history (use 'from' for prefix format) */\n  @Memoize get fromTimestamp(): number | undefined {\n    if (isNil(this.from)) throw new Error(\"Requesting 'from' timestamp on uninitialized history\");\n    return Channel.base4StringToTimestamp(this.from);\n  }\n  /** returns timestamp form of LAST message covered by this history (use 'to' for prefix format) */\n  @Memoize get toTimestamp(): number | undefined {\n    if (isNil(this.to)) throw new Error(\"Requesting 'to' timestamp on uninitialized history\");\n    return Channel.base4StringToTimestamp(this.to);\n  }\n}\n\n// used server-side (write only)\nexport abstract class ServerDeepHistory extends DeepHistory<ObjectHandle> {\n  public static MESSAGE_HISTORY_BRANCH_FACTOR = TEST_WITH_SMALL_BRANCHING ? 3 : 32; // production value\n  public static MAX_MESSAGE_SET_SIZE = TEST_WITH_SMALL_BRANCHING ? 5 : 512; // production value\n  constructor(\n    data: any\n  ) {\n    super(ServerDeepHistory.MESSAGE_HISTORY_BRANCH_FACTOR, data)\n  }\n  async insert(data: MessageHistory) {\n    await this.insertTreeNodeValue(data)\n  }\n  async fetchData(_handle: ObjectHandle): Promise<any> {\n    throw new Error(\"[ServerDeepHistory] should not be fetching data (server-side is write-only)\")\n  }\n\n}\n\n/**\n * Client-side Deep History.\n * @public\n */\nexport class ClientDeepHistory extends DeepHistory<ObjectHandle> {\n  private SB: ChannelApi\n  constructor(\n    data: any,\n    private channel: Channel\n  ) {\n    super(ServerDeepHistory.MESSAGE_HISTORY_BRANCH_FACTOR, data)\n    this.SB = new ChannelApi(this.channel.channelServer)\n  }\n\n  // wrapper (blocker) for the storage API\n  async storeData(_data: any): Promise<ObjectHandle> {\n    throw new Error(\"[ClientDeepHistory] should not be storing data (client-side is read-only)\")\n  }\n  // wrapper for the storage API; returns the final payload (extracted)\n  async fetchData(handle: ObjectHandle): Promise<any> {\n    if (!this.SB) throw new Error(\"SB required to fetch data\")\n    return (await this.SB.storage.fetchData(handle)).payload\n\n  }\n\n  // /** traverses all messages in the tree, in order or reverse; currently only\n  //     used by unit test code. end-users would presumably use streams */\n  // async traverseMessages(callback: (value: Message) => Promise<void>, reverse: boolean): Promise<void> {\n  //   if (DBG0) console.log(SEP, `Traversing the tree ${reverse ? 'in REVERSE' : 'in order'} :`, _SEP)\n  //   await this.traverseValues(async t => {\n  //     const node = t as MessageHistory // specialized TreeNodeValueType\n  //     if (DBG0) console.log(SEP, \"We are looking at node:\\n\", node, SEP)\n  //     if (node.shard) {\n  //       const messages = await this.fetchData(node.shard) as Map<string, ChannelMessage>\n  //       if (!(messages instanceof Map)) throw new Error(\"Expected a map\")\n  //       // if (DBG0) console.log(SEP, \"We are looking at:\\n\", node.shard, SEP, messages, SEP, messages.size, SEP)\n  //       if (DBG0) console.log(SEP, `... in this shard we find ${messages.size} messages):`, \"\\n\", node.shard, SEP)\n  //       const keys = Array.from(messages.keys())\n  //       // either sort in order or sort reverse\n  //       keys.sort()\n  //       if (reverse) keys.reverse()\n  //       for (const key of keys) {\n  //         const value = messages.get(key)\n  //         if (value) {\n  //           const msg = await this.channel.extractMessage(value)\n  //           if (msg)\n  //             if (callback) await callback(msg)\n  //             else console.log(msg)\n  //         }\n  //       }\n  //     }\n  //   }, reverse);\n  //   if (DBG0) console.log(SEP)\n  // }\n\n  async *traverseMessagesGenerator(\n    from: number,\n    to: number,\n    reverse: boolean\n    // ): AsyncGenerator<Message, void, unknown> {\n  ): AsyncIterableIterator<Message> {\n    const fromStr = Channel.timestampToBase4String(from);\n    const toStr = Channel.timestampToBase4String(to);\n    if (!fromStr || !toStr) throw new Error(\"Invalid timestamp conversion\");\n    if (DBG0) console.log(SEP, `Generator traversing the tree ${reverse ? 'in REVERSE' : 'in order'} from ${from} to '${to}':`, SEP,\n       \"From string:\", fromStr, \"To string:\", toStr, _SEP);\n    for await (const t of this.traverseValuesGenerator(fromStr, toStr, reverse)) {\n      const node = t as MessageHistory; // Specialized TreeNodeValueType\n      if (DBG0) console.log(SEP, \"We are looking at node:\\n\", node, SEP);\n      if (isNil(node.from) || isNil(node.to)) throw new Error(\"Node missing 'from' or 'to' values\");\n      if (node.shard) {\n        if (toStr < node.from || fromStr > node.to) {\n          if (DBG0) console.log(SEP, \"Skipping shard, out of range\", '\\n',\n            \"         node from/to:\", node.from, node.to, '\\n',\n            \"  restriction from/to:\", fromStr, toStr, SEP);\n          continue;\n        } else {\n          if (DBG0) console.log(SEP, \"Processing shard range:\", '\\n',\n            \"                node from/to\", node.from, node.to, '\\n',\n            \" touches restriction from/to:\", fromStr, toStr, SEP);\n        }\n        const messages = await this.fetchData(node.shard) as Map<string, ChannelMessage>;\n        if (!(messages instanceof Map)) throw new Error(\"Expected a map\");\n        if (DBG0) console.log(SEP, `... FETCHING FROM STORAGE SERVER and in this shard we find ${messages.size} messages:`, \"\\n\", node.shard, SEP);\n        const keys = Array.from(messages.keys());\n        keys.sort();\n        if (reverse) keys.reverse();\n        for (const key of keys) {\n          const value = messages.get(key);\n          if (value) {\n            if (isNil(value.sts)) throw new Error(\"Message missing 'sts' value (L219)\");\n             if (value.sts >= from && value.sts <= to) {\n              const msg = await this.channel.extractMessage(value);\n              if (msg) {\n                if (DBG2) console.log(\"[ClientDeepHistory] Yielding message with server timestamp:\", msg.senderTimestamp);\n                yield msg;\n              }\n            } else {\n              if (DBG2) console.log(\"Skipping message, out of range. message sts:\", value.sts, \"  restriction from/to:\", from, to);\n            }\n          }\n        }\n      }\n    }\n    if (DBG0) console.log(SEP);\n  }\n\n  // specialized version, non-reversed traversal, requesting raw messages.\n  // used by ChannelStream to populate it's cache with full history\n  async traverseMessagesEncrypted(callback: (id: string, value: ChannelMessage) => Promise<void>): Promise<void> {\n    await this.traverseValues(async t => {\n      const node = t as MessageHistory // specialized TreeNodeValueType\n      if (node.shard) {\n        const messages = await this.fetchData(node.shard) as Map<string, ChannelMessage>\n        if (!(messages instanceof Map)) throw new Error(\"Expected a map\")\n        // perform callback for raw messages, remember (key, value)\n        for (const [key, value] of messages)\n          await callback(key, value)\n      }\n    });\n  }\n\n  async validate(): Promise<void> {\n    await super.validate(ServerDeepHistory.MAX_MESSAGE_SET_SIZE);\n  }\n}\n", "// (c) 2024 384 (tm)\n\nimport {\n    _sb_assert, ChannelId, SBUserId,\n    SBUserPrivateKey, SBUserPublicKey, SBError,\n    SEP, SEP_, DBG2, Memoize, Ready,\n    extractPayload, assemblePayload,\n    sbCrypto, isSBUserId, isSet\n} from 'src/common'\n\nimport { WrapError } from 'src/utils/error';\nimport { parseSB384string } from 'src/sbCrypto/SBCrypto';\nimport { Retry } from 'src/utils/timeout';\nimport { StorageApi } from 'src/storage/StorageApi';\n\nconst DBG0 = false;\n\nimport {\n    MessageQueue\n} from 'src/utils/MessageQueue'\n\nimport { MAX_SB_BODY_SIZE } from './config';\nimport { ChannelMessage, validate_ChannelMessage, stripChannelMessage } from './ChannelMessage'\nimport { ChannelApi } from './ChannelApi'\nimport { ChannelKeys } from './ChannelKeys'\nimport { SBProtocol, Protocol_ECDH } from './Protocol'\nimport { ChannelHandle, validate_ChannelHandle } from './ChannelHandle'\nimport { Message, MessageOptions, validate_Message } from 'src/channel/Message'\n\nimport { ObjectHandle } from 'src/storage/ObjectHandle'\n\nimport { SBStorageToken, validate_SBStorageToken } from 'src/storage/StorageToken'\n\nimport { ClientDeepHistory } from 'src/storage/MessageHistory';\n\nimport { NEW_CHANNEL_MINIMUM_BUDGET } from './config'\nimport { getSBFetch } from 'src/utils/fetch'\nimport { arrayBufferToBase62 } from 'src/utils/b62';\n\nexport const SB_CHANNEL_HANDLE_SYMBOL = Symbol('ChannelHandle')\n\n// channel message 'id' format\nconst messageRegex = /^([a-zA-Z0-9]{43})______([0-3]{26})$/;\n\n/**\n * This is what the {term}`Channel` Server knows about the channel.\n * \n * Note: all of these are (ultimately) strings, and are sent straight-up\n * to/from channel server.\n * \n * Validator is {@link validate_SBChannelData}.\n * \n * @public\n */\nexport interface SBChannelData {\n    channelId: ChannelId,\n    ownerPublicKey: SBUserPublicKey,\n    // used when creating/authorizing a channel\n    storageToken?: SBStorageToken,\n}\n\n/** @internal */\nexport function _check_SBChannelData(data: SBChannelData) {\n    return (\n        Object.getPrototypeOf(data) === Object.prototype\n        && data.channelId && data.channelId.length === 43\n        && data.ownerPublicKey && typeof data.ownerPublicKey === 'string' && data.ownerPublicKey.length > 0\n        && (!data.storageToken || validate_SBStorageToken(data.storageToken))\n    )\n}\n\n/**\n * Validates 'SBChannelData', throws if there's an issue\n * @public\n */\nexport function validate_SBChannelData(data: any): SBChannelData {\n    if (!data) throw new SBError(`invalid SBChannelData (null or undefined)`)\n    else if (_check_SBChannelData(data)) {\n        return data as SBChannelData\n    } else {\n        if (DBG0) console.error('invalid SBChannelData ... trying to ingest:\\n', data)\n        throw new SBError(`invalid SBChannelData`)\n    }\n}\n\n/**\n * This corresponds to all important meta-data on a channel that an Owner\n * has access to.\n * \n * @public\n */\nexport interface ChannelAdminData {\n    channelId: ChannelId,\n    channelData: SBChannelData,\n    capacity: number,\n    locked: boolean,\n    accepted: Set<SBUserId>,\n    visitors: Map<SBUserId, SBUserPublicKey>,\n    storageLimit: number,\n    motherChannel: ChannelId,\n    latestTimestamp: string, // base4 'x256' format\n}\n\n\n// Decorator\n// asserts caller is an owner of the channel for which an api is called\n/** @internal */\nexport function Owner(target: any, propertyKey: string /* ClassGetterDecoratorContext */, descriptor?: PropertyDescriptor) {\n    if ((descriptor) && (descriptor.get)) {\n        let get = descriptor.get\n        descriptor.get = function () {\n            const obj = target.constructor.name\n            if ('owner' in this) {\n                const o = \"owner\" as keyof PropertyDescriptor\n                _sb_assert(this[o] === true, `${propertyKey} getter or method accessed for object ${obj} but callee is not channel owner`)\n            }\n            return get.call(this) // we don't check return value here\n        }\n    }\n}\n\n\n// Every channel has a queue of messages to send; entries track not just the\n// message per se, but also the 'original' resolve/reject of the 'send()'\n// operation, and a binding to the 'actual' sending function (eg restful API,\n// socket, whatever))\nexport interface EnqueuedMessage {\n    msg: ChannelMessage,\n    resolve: (value: any) => any,\n    reject: (reason: any) => any,\n    _send: (msg: ChannelMessage) => any,\n    retryCount: number, // note, must be 0 or positive\n}\n\n/**\n * Channels are the core communication and 'read/write' object.\n *\n * The Channel class communicates asynchronously with the channel.\n *\n * The ChannelSocket class is a subclass of Channel, and it communicates\n * synchronously (via websockets).\n *\n * Protocol is called for every message to get the CryptoKey to use for that\n * message; if provided, then it's the default for each message. Individual\n * messages can override this. Upon sending, one or the other needs to be there.\n * The default protocol is Protocol_ECDH, which does basic sender-receipient\n * public key encryption.\n * \n * The interface equivalent of a Channel is {@link ChannelHandle}.\n *\n * Note that you don't need to worry about what API calls involve race\n * conditions and which don't, the library will do that for you. Like most\n * classes in SB it follows the \"ready\" template: objects can be used right\n * away, but they decide for themselves if they're ready or not. The SB384 state\n * is the *user* of the channel, not the channel itself; it has an Owner (also\n * SB384 object), which can be the same as the user/visitor, but that requires\n * finalizing creating the channel to find out (from the channel server).\n * \n * The channel endpoint itself looks as follows, for both visitors and owners\n * (there is a corresponding method for most of these):\n * \n * ```plaintext\n *     /api/v2/channel/<ID>/getChannelKeys      :     get owner pub key, channel pub key, etc\n *     /api/v2/channel/<ID>/getHistory          :     returns a deep history of messages\n *     /api/v2/channel/<ID>/getLatestTimestamp  :     latest message timestamp, in prefix format\n *     /api/v2/channel/<ID>/getMessages         :     given keys, get messages\n *     /api/v2/channel/<ID>/getMessageKeys      :     get message keys\n *     /api/v2/channel/<ID>/getPubKeys          :     returns Map<userId, pubKey>\n *     /api/v2/channel/<ID>/getStorageLimit     :     returns storage limit\n *     /api/v2/channel/<ID>/getStorageToken     :     mint a storage token\n *     /api/v2/channel/<ID>/send                :     send a message\n *     /api/v2/channel/<ID>/websocket           :     upgrades to websocket protocol\n * ```\n *\n * And the following endpoints are for owners only:\n *\n * ```plaintext\n *     /api/v2/channel/<ID>/acceptVisitor       :     adds a vistor to the channel\n *     /api/v2/channel/<ID>/budd                :     either creates a new channel or transfers storage\n *     /api/v2/channel/<ID>/getAdminData        :     returns all admin data in one struct\n *     /api/v2/channel/<ID>/getCapacity         :     returns max number of visitors\n *     /api/v2/channel/<ID>/getJoinRequests     :     for locked channels, returns pending join requests\n *     /api/v2/channel/<ID>/getMother           :     returns the mother channel\n *     /api/v2/channel/<ID>/lockChannel         :     locks down the channel (must be 'accepted')\n *     /api/v2/channel/<ID>/setCapacity         :     sets max number of visitors\n *     /api/v2/channel/<ID>/setPage             :     sets the page for the channel\n * ```\n *\n * There are also a number of wrapper/convenience methods.\n *\n */\nexport class Channel extends ChannelKeys {\n    channelReady: Promise<Channel>\n    static ReadyFlag = Symbol('ChannelReadyFlag'); // see below for '(this as any)[Channel.ReadyFlag] = false;'\n    locked?: boolean = false // ToDo: need to make sure we're tracking whenever this has changed\n    // #cursor: string = ''; // last (oldest) message key seen\n\n    defaultProtocol: SBProtocol = new Protocol_ECDH() // default\n    protocol?: SBProtocol = this.defaultProtocol\n\n    // todo: should this be static (global), eg a global version?\n    #visitors: Map<SBUserId, SBUserPublicKey> = new Map()\n    #reverseVisitors: Map<SBUserPublicKey, SBUserId> = new Map()\n\n    // all messages come through this queue; that includes 'ChannelSocket'\n    // messages, but need not include all objects that inherits from 'Channel'\n    sendQueue: MessageQueue<EnqueuedMessage> = new MessageQueue()\n\n    // explicitly tracks if 'close' has been called\n    closingDown = false\n\n    // ToDo: add support in channel server\n    previous: string | undefined = undefined // previous message hash\n\n    #kvParams: any = undefined\n    #initializingKV: Promise<void> | undefined = undefined\n\n    /**\n     * Channel supports creation from scratch, from a handle, or from a key.\n     * With no parameters, you're creating a channel from scratch, which\n     * means in particular it creates the Owner keys. The resulting object\n     * can be recreated from `channel.userPrivateKey`. A from-scratch\n     * Channel is an \"abstract\" object, a mathematical construct, it isn't\n     * yet hosted anywhere. But it's guaranteed to be globally unique.\n     */\n    constructor() // requesting a new channel, no protocol\n    /**\n     * In the special case where you want to create a Channel from scratch,\n     * and immediately start using it, you can directly pass a protocol and\n     * mark absense of a handle with `null`.\n     */\n    constructor(newChannel: null, protocol: SBProtocol) // requesting a new channel\n    /**\n     * If you are re-creating a Channel from the Owner private key, you\n     * can so so directly.\n     */\n    constructor(key: SBUserPrivateKey, protocol?: SBProtocol)\n    /**\n     * If you have a full (or partial) handle present, you can use that as well;\n     * for example it might already contain the name of a specific channel server,\n     * the ChannelData from that server for the channel, etc. This is also the\n     * quickest way, since bootstrapping from keys requires more crypto.\n     * \n     * @param handle - ChannelHandle\n     * @param protocol - SBProtocol\n     */\n    constructor(handle: ChannelHandle, protocol?: SBProtocol)\n    constructor(handleOrKey?: ChannelHandle | SBUserPrivateKey | null, protocol?: SBProtocol) {\n        if (DBG0) console.log(\"Channel() constructor called with handleOrKey:\\n\", handleOrKey)\n        if (handleOrKey === null)\n            super()\n        else\n            super(handleOrKey);\n        this.protocol = protocol ? protocol : this.defaultProtocol\n        if (!this.protocol) throw new SBError(\"Channel() constructor - no protocol? (internal error)\")\n        this\n            .messageQueueManager() // fire it up\n            .then(() => { if (DBG0) console.log(\"Channel() constructor - messageQueueManager() is DONE\") })\n            .catch(e => { throw e })\n        this.channelReady =\n            this.sbChannelKeysReady\n                .then(async () => {\n                    // owner 'userId' is same as channelId, always added\n                    this.#addVisitor(this.channelId!, this.channelData.ownerPublicKey);\n                    (this as any)[Channel.ReadyFlag] = true;\n                    await this.protocol!.setChannel(this); // if protocol needs to do something \n                    return this;\n                })\n                .catch(e => { throw e; });\n    }\n\n    get ready() {\n        _sb_assert(!this.closingDown, \"[Channel] Channel is closed, blocking on'ready' will reject\")\n        return this.channelReady\n    }\n    get ChannelReadyFlag(): boolean { return (this as any)[Channel.ReadyFlag] }\n\n    @Memoize @Ready get api() { return this } // for compatibility\n\n    /**\n     * Returns a map of all known participants - maps SBUserdId to SBUserPublicKey.\n     * Note that this will poke the server; if you just want to look up individual\n     * visitors, you can use 'getVisitorKeyFromId()' or 'getVisitorIdFromKey()',\n     * which will be faster (caching results).\n     */\n    @Ready async getPubKeys(): Promise<Map<SBUserId, SBUserPublicKey>> {\n        const visitorMap = await this.callApi('/getPubKeys')\n        if (!visitorMap || !(visitorMap instanceof Map)) throw new SBError(\"getPubKeys() - no visitor map returned\")\n        for (const [k, v] of visitorMap) {\n            this.#addVisitor(k, v)\n        }\n        // channelId itself is the owner user id and always points to the owner public key\n        this.#addVisitor(this.channelId!, this.channelData.ownerPublicKey)\n        return visitorMap\n    }\n\n    #addVisitor(userId: SBUserId, publicKey: SBUserPublicKey) {\n        this.#visitors.set(userId, publicKey)\n        this.#reverseVisitors.set(publicKey, userId)\n    }\n\n    /**\n     * Translates an SBUserId to an SBUserPublicKey, for this channel. This will\n     * be fast, and it will ping server if and when needed. 'undefined' is a \n     * permitted value, it will return the public key of the channel owner.\n     */\n    @Memoize @Ready async getVisitorKeyFromID(userId: SBUserId | undefined): Promise<SBUserPublicKey | undefined> {\n        if (userId === undefined) return this.channelData.ownerPublicKey\n        let f = this.#visitors.get(userId)\n        if (!f) {\n            await this.getPubKeys() // side effect will update #visitors\n            f = this.#visitors.get(userId) // try again\n        }\n        return f\n    }\n\n    /**\n     * Reverse of 'getVisitorKeyFromID()'. Translates an SBUserPublicKey to an SBUserid.\n     * Note, it will return undefined if the public key is not found in the visitor map\n     * of this channel. You can always create the ID directly with:\n     * \n     * ```typescript\n     * \n     *      const id = (await new SB384(publicKey).ready).userId\n     * \n     * ```\n     * \n     * This function deliberately does not do this, on the assumption that you prefer\n     * to find out if this key is not on the channel's visitor list.\n     */\n    @Memoize @Ready async getVisitorIDFromKey(userId: SBUserPublicKey): Promise<SBUserId | undefined> {\n        if (userId === this.channelData.ownerPublicKey) return this.channelId!\n        let i = this.#reverseVisitors.get(userId)\n        if (!i) {\n            await this.getPubKeys() // side effect will update #reverseVisitors\n            i = this.#reverseVisitors.get(userId) // try again\n        }\n        return i\n    }\n\n    /**\n     * Takes a 'ChannelMessage' format and presents it as a 'Message'. Does a\n     * variety of things. If there is any issue, will return 'undefined', and you\n     * should probably just ignore that message. Only requirement is you extract\n     * payload before calling this (some callees needs to, or wants to, fill in\n     * things in ChannelMessage). If 'dbgOn' is set, will print out \n     * debugging information.\n     */\n    async extractMessage(msgRaw: ChannelMessage | undefined, dbgOn = false): Promise<Message | undefined> {\n        if (!msgRaw) return undefined\n        if (DBG2) console.log(\"[extractMessage] Extracting message:\", msgRaw)\n        else if (dbgOn) console.log(\"[extractMessage] Will try to extract message ...\")\n        if (msgRaw instanceof ArrayBuffer) throw new SBError('[Channel.extractMessage] Message is an ArrayBuffer (did you forget extractPayload()?)')\n        try {\n            msgRaw = validate_ChannelMessage(msgRaw)\n            if (!msgRaw) {\n                if (DBG0 || dbgOn) console.warn(\"++++ [extractMessage]: message is not valid (probably an error)\", msgRaw)\n                return undefined\n            }\n            const sender = msgRaw.f // protocols may use 'from', so needs to be in channel visitor map\n            if (!sender) {\n                console.error(\"++++ [extractMessage]: no sender userId hash in message (probably an error)\")\n                return undefined\n            }\n            const senderPublicKey = await this.getVisitorKeyFromID(sender)\n            if (!senderPublicKey) throw new SBError(`Cannot find sender userId hash ${sender} in public key map (including asking server)`)\n\n            _sb_assert(this.protocol, \"Protocol not set (internal error)\")\n            const k = await this.protocol?.decryptionKey(msgRaw)\n            if (!k) {\n                if (DBG2 || dbgOn) console.error(\"++++ [extractMessage]: no decryption key provided by protocol (perhaps an error)\")\n                return undefined\n            }\n\n            if (dbgOn) {\n                console.log(\"[extractMessage] Decryption key:\")\n                crypto.subtle.exportKey(\"raw\", k)\n                    .then(rawKeyBuffer => {\n                        const keyBytes = new Uint8Array(rawKeyBuffer);\n                        const hexString = Array.from(keyBytes)\n                            .map(b => b.toString(16).padStart(2, '0') + \" \")\n                            .join('');\n                        console.log(hexString);\n                    })\n                    .catch(err => {\n                        console.error('Error exporting key:', err);\n                    });\n            }\n\n            if (!msgRaw.ts) throw new SBError(`unwrap() - no timestamp in encrypted message`)\n            const { c: t, iv: iv } = msgRaw // encryptedContentsMakeBinary(o)\n            _sb_assert(t, \"[unwrap] No contents in encrypted message (probably an error)\")\n            const view = new DataView(new ArrayBuffer(8));\n            view.setFloat64(0, msgRaw.ts); // ToDo: upgrade our timestamp validation to use the *256 version (which doesn't fit in 'Number')\n\n            // print out the (timestamp) 'view' in hex\n            if (dbgOn) {\n                const viewBytes = new Uint8Array(view.buffer);\n                const hexString = Array.from(viewBytes)\n                    .map(b => b.toString(16).padStart(2, '0') + \" \")\n                    .join('');\n                console.log(\"[extractMessage] Timestamp view (hex):\", hexString);\n            }\n\n            let bodyBuffer\n            try {\n                bodyBuffer = await crypto.subtle.decrypt({ name: 'AES-GCM', iv: iv, additionalData: view }, k, t! as ArrayBuffer)\n            } catch (e: any) {\n                if (DBG0 || dbgOn) console.error(\"[extractMessage] Could not decrypt message (exception) [L2898]:\", e.message)\n                return undefined\n            }\n            if (!msgRaw._id)\n                msgRaw._id = Channel.composeMessageKey(this.channelId!, msgRaw.sts!, msgRaw.i2)\n            if ((DBG0  || dbgOn) && msgRaw.ttl !== undefined && msgRaw.ttl !== 15) console.warn(`[extractMessage] TTL->EOL missing (TTL set to ${msgRaw.ttl}) [L2762]`)\n            // ToDo: verify 'cs' (sender channel server domain) is correct, if present\n            const msg: Message = {\n                body: extractPayload(bodyBuffer).payload,\n                channelId: this.channelId!,\n                sender: sender,\n                senderPublicKey: senderPublicKey,\n                senderTimestamp: msgRaw.ts!,\n                serverTimestamp: msgRaw.sts!,\n                // eol: <needs to be calculated>, // ToDo: various places for TTL/EOL processing\n                _id: msgRaw._id!,\n            }\n            if (DBG2 || dbgOn) console.log(\"[Channel.extractMessage] Extracted message (before validation):\", msg.body)\n            return validate_Message(msg)\n        } catch (e: any) {\n            if (DBG0 || dbgOn) console.error(\"[extractMessage] Could not process message (exception) [L2782]:\", e.message)\n            return undefined\n        }\n    }\n\n    /**\n     * Applies 'extractMessage()' to a map of messages.\n     */\n    async extractMessageMap(msgMap: Map<string, ChannelMessage>): Promise<Map<string, Message>> {\n        const ret = new Map<string, Message>()\n        for (const [k, v] of msgMap) {\n            const msg = await this.extractMessage(v)\n            if (msg) {\n                ret.set(k, msg)\n            } else {\n                if (DBG0) console.warn(\"[extractMessageMap] - message not valid, skipping:\", k, v)\n\n            }\n        }\n        return ret\n    }\n\n    /**\n     * Convenience function. Takes either a SBUserId or a SBUserPrivateKey,\n     * and will return the SBUserId. Validates along the way. Any issues\n     * result in returning 'undefined'.\n     */\n    sendToToUserId(sendTo: SBUserId | SBUserPrivateKey): SBUserId | undefined {\n        if (isSBUserId(sendTo)) {\n            if (DBG0) console.log(\"[sendToToUserId] - sending to a user ID:\", sendTo)\n            return sendTo\n        } else {\n            if (DBG0) console.log(\"[sendToToUserId] - will try to parse string:\", sendTo)\n            if (!parseSB384string(sendTo)) throw new SBError(`wrapMessage(): invalid 'sendTo' format (not a userid nor a key): '${sendTo}'`)\n            let k = this.#reverseVisitors.get(sendTo)\n            if (k) return k\n            // note: we could create the user ID, but, that would make this async and that propagates up to callees\n            console.error(\"[sendToToUserId] - sending to an ID that is not on the visitor list, probably an error\")\n            return undefined\n        }\n    }\n\n    /**\n     * when *sending* messages, the processing of a message is divided into a\n     * synchronous and an asynchronous part. 'packageMessage()' is the synchronous\n     * part, and 'finalizeMessage()' is the asynchronous part. this way we enqueue\n     * as fast as possible, whereas dequeueing where for instance sender timestamp\n     * semantics are enforced, is done async off a queue.\n     * \n     * everything is a 'ChannelMessage' unless it's a low-level message of some\n     * sort, which we call 'stringMessage' (eg status, server, etc)\n     */\n    packageMessage(contents: any, options: MessageOptions = {}): ChannelMessage {\n        if (DBG0 || DBG2) console.log(SEP, `[Channel#packageMessage] From '${this.userId}'`, SEP, \"contents:\\n\", contents, SEP, \"options:\\n\", options, SEP)\n        let msg: ChannelMessage = {\n            f: this.userId,\n            unencryptedContents: contents,\n        }\n        if (options) {\n            if (options.sendTo) {\n                const u = this.sendToToUserId(options.sendTo)\n                if (!u) throw new SBError(`wrapMessage(): invalid 'sendTo' contents ('${options.sendTo}')`)\n                msg.t = u\n            }\n            if (options.subChannel) throw new SBError(`wrapMessage(): subChannel not yet supported`) // would be i2\n            if (options.ttl !== undefined) msg.ttl = options.ttl\n            if (options.sendString) {\n                // low-level messages are not encrypted or signed or validated etc\n                _sb_assert(typeof contents === 'string', \"[packageMessage] sendString is true, but contents is not a string\")\n                _sb_assert(options.ttl === undefined || options.ttl === 0, `[packageMessage] sendString implies TTL=0 (we got ${options.ttl})`)\n                msg.ttl = 0\n                msg.stringMessage = true\n            }\n        }\n        if (msg.stringMessage !== true) {\n            // 'proper' message, we prep for encryption, signing, etc\n            msg.protocol = options.protocol ? options.protocol : this.protocol // default to channel's unless overriden\n            if (msg.ttl === undefined) msg.ttl = 15; // note, '0' is valid\n            // there is always pre-generated salt and nonce, whether or not the protocol needs them\n            if (!msg.salt) msg.salt = crypto.getRandomValues(new Uint8Array(16)).buffer\n            if (!msg.iv) msg.iv = crypto.getRandomValues(new Uint8Array(12))\n        }\n\n        // this.#message = await sbCrypto.wrap(\n        //   this.contents,\n        //   this.channel.userId,\n        //   await this.options.protocol.encryptionKey(this),\n        //   this.salt!,\n        //   this.channel.signKey,\n        //   options);\n\n        // if (DBG2) console.log(\"[Channel#packageMessage] - packaged message:\\n\", msg)\n        // return validate_ChannelMessage(msg)\n        return msg\n    }\n\n    // this is called upon actual sending; every 'send callback' in enqueued\n    // messages should call this on the ChannelMessage before sending\n    async finalizeMessage(msg: ChannelMessage): Promise<ChannelMessage> {\n        if (!msg.ts) msg.ts = await ChannelApi.dateNow()\n        _sb_assert(!(msg.stringMessage === true), \"[Channel.finalizeMessage()] stringMessage is true, finalizing should not be called (internal error)\")\n\n        // msg = await sbCrypto.wrap(\n        //   msg.unencryptedContents,\n        //   this.userId,\n        //   msg.protocol ? await msg.protocol.encryptionKey(msg) : await this.protocol.encryptionKey(msg),\n        //   msg.salt!,\n        //   this.signKey);\n\n        const payload = assemblePayload(msg.unencryptedContents)\n        _sb_assert(payload, \"wrapMessage(): failed to assemble payload\")\n        _sb_assert(payload!.byteLength < MAX_SB_BODY_SIZE,\n            `[Channel.finalizeMessage]: body must be smaller than ${MAX_SB_BODY_SIZE / 1024} KiB (we got ${payload!.byteLength / 1024} KiB)})`)\n        msg.ts = await ChannelApi.dateNow()\n\n        // ToDo: we want to add ChannelID, To, From, and possibly other things in the 'view'\n        const view = new DataView(new ArrayBuffer(8));\n        view.setFloat64(0, msg.ts); // ToDo: upgrade to use the *256 version\n\n        _sb_assert(msg.protocol, \"[Channel.finalizeMessage()] Protocol not set (internal error)\")\n        msg.c = await sbCrypto.encrypt(\n            payload!,\n            await msg.protocol!.encryptionKey(msg),\n            { iv: msg.iv, additionalData: view }\n        );\n        // decryption will self-validate including timestamp signature applied to\n        // encrypted contents (including aforementioned timestamp)\n        msg.s = await sbCrypto.sign(this.signKey, msg.c)\n\n        return stripChannelMessage(msg)\n    }\n\n    // actually carries out (async) send of message\n    #_send(msg: ChannelMessage) {\n        return new Promise(async (resolve, reject) => {\n            await this.ready\n            const content = msg.stringMessage === true\n                ? msg.unencryptedContents\n                : await this.finalizeMessage(msg)\n            await this.callApi('/send', content)\n                .then((rez: any) => { resolve(rez) })\n                .catch((e: any) => { reject(e) });\n        });\n    }\n\n    /**\n     * Sends a message to the channel. The message is enqueued synchronously and sent\n     * asynchronously. The return value is a Promise that resolves to the\n     * server's response. If the message is a low-level message (eg status, server,\n     * etc), then 'sendString' should be set to 'true'. If 'sendTo' is not provided,\n     * the message will be sent to the channel owner. If 'protocol' is not provided,\n     * the channel's default protocol will be used. If 'ttl' is not provided, it will\n     * default to 15.\n     */\n    async send(contents: any, options: MessageOptions = {}): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            if (DBG2) console.log(SEP, \"[Channel.send] called.\", SEP, \"contents:\\n\", contents)\n            const msg = this.packageMessage(contents, options)\n            if (DBG2) console.log(SEP, \"packed message:\\n\", msg)\n            if (DBG2 && msg.ttl !== undefined) console.log(SEP, \"enqueuing message with TTL value: \", msg.ttl, SEP)\n            this.sendQueue.enqueue({\n                msg: msg,\n                resolve: resolve,\n                reject: reject,\n                _send: this.#_send.bind(this),\n                retryCount: options.retries !== undefined ? options.retries : 0 // default no retry\n            })\n            if (DBG2) console.log(SEP_)\n        })\n    }\n\n    /** Authorizes/registers this channel on the provided server */\n    create(storageToken: SBStorageToken, channelServer: ChannelId = this.channelServer!): Promise<Channel> {\n        if (DBG0) console.log(\"==== Channel.create() called with storageToken:\", storageToken, \"and channelServer:\", channelServer)\n        _sb_assert(storageToken !== null, '[Channel.create] Missing storage token')\n        if (channelServer) this.channelServer = channelServer;\n        _sb_assert(this.channelServer, '[Channel.create] Missing channel server (neither provided nor in channelKeys)')\n        return new Promise<Channel>(async (resolve, reject) => {\n            await this.channelReady\n            this.channelData.storageToken = validate_SBStorageToken(storageToken)\n            if (DBG0) console.log(\"Will try to create channel with channelData:\", this.channelData)\n            this.callApi('/budd', this.channelData)\n                .then(() => {\n                    // in case it's different or whatevs, but only if it's confirmed\n                    this.channelServer = channelServer\n                    _sb_assert(this.channelData && this.channelData.channelId && this.userPrivateKey, 'Internal Error [L2546]')\n                    resolve(this)\n                    // resolve({\n                    //   [SB_CHANNEL_HANDLE_SYMBOL]: true,\n                    //   channelId: this.channelData.channelId!,\n                    //   userPrivateKey: this.userPrivateKey,\n                    //   // channelPrivateKey: (await new SB384(channelKeys.channelPrivateKey).ready).userPrivateKey,\n                    //   channelServer: this.channelServer,\n                    //   channelData: this.channelData\n                    // })\n                }).catch((e) => { reject(\"Channel.create() failed: \" + WrapError(e)) })\n        })\n    }\n\n    /** Deprecated. Would take an array of channelIds and get latest time stamp from all of them  */\n    getLastMessageTimes() {\n        throw new SBError(\"Channel.getLastMessageTimes(): deprecated\")\n    }\n\n    /**\n     * Gets the latest known timestamp for the channel, using server timestamps.\n     * Returns it in prefix string format.\n     */\n    @Ready getLatestTimestamp(): Promise<string> {\n        return this.callApi('/getLatestTimestamp')\n    }\n\n    async messageQueueManager() {\n        if (DBG2) console.log(SEP, \"[messageQueueManager] Channel message queue is starting up\", SEP)\n        await this.ready\n        if (DBG2) console.log(SEP, \"[messageQueueManager] ... continuing to start up\", SEP)\n        let keepRunning = true\n        while (keepRunning) {\n            await this.sendQueue.dequeue()\n                .then(async (qMsg) => {\n                    if (DBG2) console.log(SEP, \"[messageQueueManager] ... pulled 'msg' from queue:\\n\", qMsg?.msg.unencryptedContents, SEP)\n                    if (qMsg) {\n                        if (DBG2) console.log(SEP, \"[messageQueueManager] Channel message queue is calling '_send' on message\\n\", qMsg.msg.unencryptedContents)\n                        if (DBG2) console.log(qMsg.msg)\n                        let latestError = null\n                        while (qMsg.retryCount-- >= 0) {\n                            if (DBG2) console.log(SEP, \"[messageQueueManager] ... trying message send (\", qMsg.retryCount, \"retries left)\\n\", qMsg.msg.unencryptedContents, SEP)\n                            try {\n                                const ret = await qMsg._send(qMsg.msg)\n                                if (DBG2) console.log(SEP, \"[messageQueueManager] Got response from registered '_send':\\n\", ret, SEP)\n                                qMsg.resolve(ret)\n                                break\n                            } catch (e) {\n                                if (DBG2) console.log(SEP, \"[messageQueueManager] Got exception from '_send' operation, might retry\", e, SEP)\n                                latestError = '[ERROR] ' + e\n                            }\n                        }\n                        // if we're here, we've run out of retries\n                        qMsg.reject(latestError)\n                    } else {\n                        // 'null' signals queue is empty and closed\n                        if (DBG2) console.log(\"[messageQueueManager] Channel message queue is empty and closed\")\n                        keepRunning = false\n                    }\n                })\n                .catch((e: any) => {\n                    // if we are closing down, we don't want to throw\n                    if (this.closingDown || e === 'shutDown') {\n                        if (DBG2) console.log(\"[messageQueueManager] Channel message queue is shutting down\")\n                        return\n                    } else {\n                        // ToDo: actually 'e' here can be an enqueued message, not an error per se\n                        throw new SBError(\"[messageQueueManager] Channel message rejected (ToDo - internal error - L573)\")\n                    }\n                })\n            // .catch((message: EnqueuedMessage) => {\n            //   if (DBG2 || DBG) console.log(SEP, \"[messageQueueManager] Got exception from DEQUEUE operation:\\n\", JSON.stringify(message), SEP)\n            //   // queue will reject (with the message) if it's closing down\n            //   if (DBG2 || DBG) console.log(\"[messageQueueManager] Channel message queue is closing down\")\n            //   if (DBG2 || DBG) console.log(message)\n            //   // check if 'shutDown' is in\n            //   message.resolve('shutDown')\n            // })\n        }\n    }\n\n    // 'Channel' on a close will close and drain\n    close() {\n        if (DBG2) console.log(\"[Channel.close] called (will drain queue)\")\n        this.closingDown = true\n        return this.sendQueue.drain('shutDown')\n    }\n\n    /**\n     * Returns map of message keys from the server corresponding to the request.\n     * Takes a single optional parameter, which is the time stamp prefix for\n     * which a set is requested. If not provided, the default is '0' (which\n     * corresponds to entire history). Returns a set of the message keys,\n     * and the reverse-linked history shard if present.\n     *\n     * Note that if the channel is out of budget (eg \"frozen\" or in \"deep\n     * history\" mode), it will return an empty set of keys (not an error).\n     * \n     * Use 'getMessageMap' to get the actual messages from the set of keys.\n     * \n     * See 'getHistory' for older message keys.\n     * \n     * 'historyShard' is deprecated, and will be removed in a future version;\n     * currently it just returns an empty object.\n     * \n     * 'prefix' is about to be deprectated as well.\n     * \n     * @public\n     */\n    getMessageKeys(prefix: string = '0'): Promise<{ historyShard: ObjectHandle | undefined, keys: Set<string> } > {\n        // getMessageKeys(currentMessagesLength: number = 100, paginate: boolean = false): Promise<Set<string>> {\n        return new Promise(async (resolve, reject) => {\n            try {\n                await this.channelReady\n                _sb_assert(this.channelId, \"Channel.getMessageKeys: no channel ID (?)\");\n                // const { historyShard, keys } =\n                //     (await this.callApi(\n                //         '/getMessageKeys',\n                //         { prefix: prefix })) as { historyShard: ObjectHandle, keys: Set<string> | Array<string> }\n                let keys: Set<string> | Array<string> = await this.callApi('/getMessageKeys', { prefix: prefix })\n                if (DBG2) console.log(\"getMessageKeys:\", keys)\n                // forward compatibility\n                if ((keys as any).keys) keys = (keys as any).keys\n                // server protocol is moving away from Sets and Maps\n                var finalizedKeys = new Set<string>()\n                // check if 'keys' is a set\n                if (keys instanceof Set) {\n                    finalizedKeys = keys\n                } else if (keys instanceof Array) {\n                    keys.forEach(k => finalizedKeys.add(k))\n                } else {\n                    console.error(\"[Channel.getMessageKeys] Unexpected response from server:\", keys)\n                    throw new SBError(\"[Channel.getMessageKeys] Unexpected response from server\")\n                }\n                if (!finalizedKeys || finalizedKeys.size === 0)\n                    console.warn(\"[Channel.getMessageKeys] Warning: no messages (empty/null response); not an error but perhaps unexpected?\")\n                resolve({ historyShard: undefined, keys: finalizedKeys })\n            } catch (e) {\n                const msg = `[Channel.getMessageKeys] Error in getting message keys (offline?) ('${e}')`\n                if (DBG0) console.warn(msg)\n                reject(msg)\n            }\n        });\n    }\n\n    /**\n     * Get raw set of messages from the server. This corresponds to the 'getMessages' server\n     * endpoint, and distinguished from 'getMessageMap' which you're more likely to be using.\n     * @public\n     */\n    @Ready async getRawMessageMap(messageKeys: Set<string>): Promise<Map<string, ArrayBuffer>> {\n        if (DBG0) console.log(SEP, \"[Channel.getRawMessageMap] called ... \", SEP)\n        if (!isSet(messageKeys)) throw new SBError(\"[getRawMessageMap] messageKeys is not a Set\")\n        if (messageKeys.size === 0) throw new SBError(\"[getRawMessageMap] no message keys provided\")\n        if (messageKeys.size > (ChannelApi.MAX_MESSAGE_REQUEST_SIZE))\n            throw new SBError(`[getRawMessageMap] too many messages requested at once (max is ${ChannelApi.MAX_MESSAGE_REQUEST_SIZE}, you requested ${messageKeys.size})`)\n        if (DBG0) console.log(SEP, \"[Channel.getRawMessageMap] calling API with messageKeys ... \", SEP)\n\n        // the format is either already a Map, or it's a pair of arrays that we need to zip together and build a map\n        const mapOrDoubleArray: Map<string, ArrayBuffer> | { keys: Array<string>, values: Array<ArrayBuffer> } = await this.callApi('/getMessages', messageKeys)\n        let messagePayloads: Map<string, ArrayBuffer> = new Map()\n        if (mapOrDoubleArray instanceof Map) {\n            messagePayloads = mapOrDoubleArray\n        } else {\n            const { keys, values } = mapOrDoubleArray\n            if (keys.length !== values.length) throw new SBError(\"[Channel.getRawMessageMap] keys and values arrays are not the same length\")\n            for (let i = 0; i < keys.length; i++) {\n                messagePayloads.set(keys[i], values[i])\n            }\n        }\n        if (DBG0) console.log(SEP, `[Channel.getRawMessageMap] got ${messagePayloads.size} payloads ...`, SEP)\n        return(messagePayloads)\n    }\n\n    /**\n     * given a raw set of messages, extract payloads, validate (at ChannelMessage level),\n     * then call extractMessageMap() to decrypt. generally you won't be using this, but it's\n     * exposed in case you want to first review the raw messages and then separately decrypt\n     * and validate them.\n     */\n    async convertRawMessageMap(messagePayloads: Map<string, ArrayBuffer>): Promise<Map<string, Message>> {\n        if (DBG0) console.log(SEP, \"[Channel.convertRawMessageMap] called ... \", SEP)\n        const messages = new Map<string, ChannelMessage>()\n        for (const [k, v] of messagePayloads) {\n            try {\n                messages.set(k, validate_ChannelMessage(extractPayload(v).payload))\n            } catch (e) {\n                if (DBG0) console.warn(SEP, \"[getMessageMap] Failed extract and/or to validate message:\", SEP, v, SEP, e, SEP)\n            }\n        }\n        return (await this.extractMessageMap(messages))\n    }\n\n    /**\n     * Main function for getting a chunk of messages from the server.\n     * Note that if you want \"raw\" messages (unencrypted), use 'getRawMessageMap()'.\n     */\n    @Ready async getMessageMap(messageKeys: Set<string>): Promise<Map<string, Message>> {\n        if (DBG0) console.log(SEP, `[Channel.getMessageMap] called with ${messageKeys.size} keys ...`, SEP)\n        if (!isSet(messageKeys)) throw new SBError(\"[Channel.getMessageMap] messageKeys is not a Set\")\n        const messagePayloads = await this.getRawMessageMap(messageKeys)\n        if (DBG0) console.log(SEP, `[Channel.getMessageMap] got ${messagePayloads.size} messagePayloads ... decoding`, SEP)\n        const messageMap = await this.convertRawMessageMap(messagePayloads)\n        if (DBG0) console.log(SEP, \"[Channel.getMessageMap] got messageMap ... done, returning\", SEP)\n        return(messageMap)\n    }\n\n    /**\n     * Returns a DeepHistory object corresponding to the channel. Note:\n     * this will (live) instantiate this object at the time of calling\n     * this function. The returned object is not kept in 'sync' with the\n     * server in any manner. This allows calling traverse and similar\n     * operations on it, repeatedly. Calling this function multiple times\n     * is, in fact, not a lot of overhead, given the nature of the history\n     * tree structure (eg it's mostly immutable).\n     */\n    async getHistory(): Promise<ClientDeepHistory> {\n        await this.channelReady\n        _sb_assert(this.channelId, \"Channel.getHistory: no channel ID (?)\")\n        const data = await this.callApi('/getHistory') // as MessageHistoryDirectory\n        if (DBG2) console.log(SEP, \"getHistory result:\\n\", JSON.stringify(data, null, 2), SEP)\n        const h = new ClientDeepHistory(data, this)\n        return h\n    }\n\n    /**\n     * Sets 'page' as the Channel's 'page' response. If type is provided, it will\n     * be used as the 'Content-Type' header in the HTTP request when retrieved;\n     * also, if the type is 'text-like', it will be recoded to UTF-8 before\n     * delivery. Prefix indicates the smallest number of acceptable characters in\n     * the link. Default is 12, shortest is 6. \n     */\n    @Ready @Owner setPage(options: { page: any, prefix?: number, type?: string }) {\n        var { page, prefix, type } = options\n        _sb_assert(page, \"Channel.setPage: no page (contents) provided\")\n        prefix = prefix || 12\n        if (prefix < 6) throw new SBError(\"Channel.setPage: prefix must be at least 6 characters\")\n        type = type || 'sb384payloadV3'\n        return this.callApi('/setPage', {\n            page: page,\n            type: type,\n            prefix: prefix,\n        })\n    }\n\n    /**\n     * Note that 'getPage' can be done without any authentication, in which\n     * case have a look at ChannelApi.getPage(). If however the Page is locked,\n     * you need to access it through this ChannelApi entry point.\n     * \n     * But conversely, we don't need a prefix or anything else, since\n     * we know the channel. So .. we can just shoot this off.\n     * \n     * Note that a 'Page' might be mime-typed, in which case you should\n     * use a regular fetch() call and handle results accordingly. This\n     * function is for 'sb384payloadV3' only.\n     */\n    @Ready async getPage() {\n        const prefix = this.hashB32 // we know the full prefix\n        if (DBG0) console.log(`==== ChannelApi.getPage: calling fetch with: ${prefix}`)\n        const page = await (getSBFetch())(this.channelServer + '/api/v2/page/' + prefix)\n            .catch((e) => { throw new SBError(`[Channel.getPage] fetch failed: ${e}`) })\n        const contentType = page.headers.get('content-type')\n        if (contentType !== 'sb384payloadV3')\n            throw new SBError(\"[Channel.getPage] Can only handle 'sb384payloadV3' content type, use 'fetch()'\")\n        const buf = await page.arrayBuffer()\n        return extractPayload(buf).payload\n        // return extractPayload(await SBApiFetch(this.channelServer + '/api/v2/page/' + prefix)).payload\n    }\n\n    // TODO:\n    // * add padding/unpadding to KV\n    // * add encryption/decryption of both keys and values\n    // * add setup code, it'll use the KV as well for state like nonce and salt\n    // * for larger values, it might make sense to shard them?\n\n    // todo: should probably be in SBCrypto\n    async #deriveAESKeyHKDF(): Promise<CryptoKey> {\n        if (!this.#kvParams) throw new SBError(\"Channel.deriveAESKeyHKDF() - no kvParams\")\n        const salt = this.#kvParams.salt\n        const hkdfInput = new Uint8Array(assemblePayload({\n            x: this.binaryD, y: this.#kvParams.entropy, z: this.#kvParams.derivationNonce\n        })!)\n        // Import hkdfInput as a raw key for HKDF\n        const hkdfBaseKey = await crypto.subtle.importKey(\n            'raw',\n            hkdfInput,\n            {\n                name: 'HKDF',\n            },\n            false,\n            ['deriveKey']\n        );\n        // Derive AES-256-GCM key using HKDF\n        const aesKey = await crypto.subtle.deriveKey(\n            {\n                name: 'HKDF',\n                hash: 'SHA-256',\n                salt: salt,\n                info: new TextEncoder().encode('AES-GCM SHA-256 key'),\n            },\n            hkdfBaseKey,\n            {\n                name: 'AES-GCM',\n                length: 256,\n            },\n            false,\n            ['encrypt', 'decrypt']\n        );\n        return aesKey;\n    }\n\n    async #initializeKV() {\n        if (this.#kvParams) return;\n        if (this.#initializingKV) return this.#initializingKV;\n        this.#initializingKV = (async () => {\n            if (!this.binaryD) throw new SBError(\"Channel.initializeKV() - no binaryD provided\");\n            const kv = await this.get('__KV__params');\n            if (kv) {\n                this.#kvParams = structuredClone(kv);\n                this.#kvParams.aesKey = await this.#deriveAESKeyHKDF();\n            } else {\n                const x = {\n                    derivationNonce: crypto.getRandomValues(new Uint8Array(12)),\n                    salt: crypto.getRandomValues(new Uint8Array(16)),\n                    entropy: crypto.getRandomValues(new Uint8Array(32)),\n                };\n                this.#kvParams = structuredClone(x);\n                this.#kvParams.aesKey = await this.#deriveAESKeyHKDF(); // need the key to 'put'\n                await this.#_put('__KV__params', x, false); // omit cryptokey, and stored unencrypted\n            }\n        })();\n        try {\n            await this.#initializingKV;\n            // console.log(SEP, \"Channel.initializeKV() - done\", SEP, this.#kvParams, SEP)\n        } finally {\n            this.#initializingKV = undefined;\n        }\n    }\n\n    // generates key (location) for KV storage; we can't encrypt this,\n    // since it needs to be deterministic\n    async #hashKey(key: any): Promise<string> {\n        if (!key) throw new SBError(\"Channel.hashKey() - no key provided\")\n        let keyWrapper\n        if (typeof key === 'string' && key.startsWith('__KV__')) {\n            keyWrapper = {\n                x: this.binaryD,\n                // omit entropy, or we'll get recursion\n                key: key,\n            }\n        } else {\n            if (!this.#kvParams) await this.#initializeKV()\n            keyWrapper = {\n                x: this.binaryD,\n                y: this.#kvParams!.entropy,\n                key: key,\n            }\n        }\n        const h = await crypto.subtle.digest('SHA-256', assemblePayload(keyWrapper)!)\n        return arrayBufferToBase62(h)\n}\n\n    // should probably be a static function in SBCrypto\n    async #encryptPayload(\n        aesKey: CryptoKey,\n        plaintext: ArrayBuffer,\n        nonce: Uint8Array\n      ): Promise<ArrayBuffer> {\n        const ciphertext = await crypto.subtle.encrypt(\n          {\n            name: 'AES-GCM',\n            iv: nonce,\n          },\n          aesKey,\n          plaintext\n        );\n        return ciphertext;\n      }\n\n    async #decryptPayload(\n        aesKey: CryptoKey,\n        ciphertext: ArrayBuffer,\n        nonce: Uint8Array\n    ): Promise<ArrayBuffer> {\n        const plaintext = await crypto.subtle.decrypt(\n            {\n                name: 'AES-GCM',\n                iv: nonce,\n            },\n            aesKey,\n            ciphertext\n        );\n        return plaintext;\n    }\n\n    async #_put(key: any, value: any, encrypt = true) {\n        const keyHash = await this.#hashKey(key)\n        const nonce = crypto.getRandomValues(new Uint8Array(12))\n        const paddedpayload = StorageApi.padBuf(assemblePayload(value)!);\n        const finalPayload = encrypt\n            ? await this.#encryptPayload(this.#kvParams!.aesKey!, paddedpayload, nonce)\n            : paddedpayload\n        const packagedValue = assemblePayload({\n            nonce: nonce,\n            timestamp: await ChannelApi.dateNow(),\n            version: 1,\n            encrypted: encrypt,\n            payload: finalPayload,\n        })\n        // console.log(SEP, \"Channel._put() - packaged value:\\n\", SEP, packagedValue, SEP)\n        return this.callApi('/kv', { type: 'global', operation: 'write', key: keyHash, value: packagedValue })\n    }\n\n    /**\n     * Writes a key-value to the channel. Values can be any type and are\n     * mutable.\n     *\n     * Size of an individual value can be up to 4 MiB, but note that channel KV\n     * storage is (much) more expensive than shard/object storage, so you're\n     * generally better off shardifying large values.\n     *\n     * If the channel is out of budget, KV writes allow a small amount of\n     * \"overdraft\". This allows you to update small amount of KV state to avoid\n     * inconsistencies, for example a counter or other summary information.\n     *\n     */\n    @Ready @Owner async put(key: any, value: any, encrypt = true) {\n        if (typeof key === 'string' && key.startsWith('__KV__'))\n            throw new SBError(\"Channel.put() - string key prefix '__KV__' is read-only\")\n        return this.#_put(key, value, encrypt)\n    }\n\n    /**\n     * Reads a key-value from the channel. If key is not found, it will return\n     * 'undefined'. \n     */\n    @Ready @Owner async get(key: any): Promise<any> {\n        if (!key) throw new SBError(\"Channel.get() - no key provided\")\n        const r = await this.callApi('/kv', { type: 'global', operation: 'read', key: await this.#hashKey(key) })\n        // console.log(SEP, \"Channel.get() result:\\n\", SEP, r, SEP)\n        if (!r || r.success !== true) throw new SBError(`Channel.get() failed ('success' false)`)\n        if (!r.value) {\n            // console.log(SEP, \"Channel.get() - no value found, returning undefined\", SEP)\n            return undefined\n        }\n        const v = extractPayload(r.value).payload\n        // console.log(SEP, \"Channel.get() extracted value:\", SEP, v, SEP)\n        if (!v.payload || !v.nonce || v.version != 1) throw new SBError(`Channel.get() failed (got invalid structure)`)\n        if (v.encrypted === false)\n            return extractPayload(v.payload).payload\n        if (!this.#kvParams || !this.#kvParams.aesKey) throw new SBError(\"Channel.get() - no kvParams, or no aes key, needed to decrypt\")\n        const decryptedPayload = await this.#decryptPayload(this.#kvParams.aesKey!, v.payload, v.nonce)\n        return extractPayload(decryptedPayload).payload\n    }\n\n    /**\n     * Adds 'SBUserId' to accepted visitors. Owner only.\n     */\n    @Ready @Owner acceptVisitor(userId: SBUserId) { return this.callApi('/acceptVisitor', { userId: userId }) }\n\n    /**\n     * Returns with total number of permitted (different) visitors/users. Owner only.\n     * Default for a channel is to accept anybody that comes along, to change that\n     * you would call 'localChannel()'\n     */\n    @Ready @Owner getCapacity() { return (this.callApi('/getCapacity')) }\n\n    @Ready getInfo() { return this.callApi('/info') }\n\n    /**\n     * Returns a structure with various channel information. Owner only.\n     * For common pieces of information there various convenience functions.\n     */\n    @Ready @Owner getAdminData() { return this.callApi('/getAdminData') as Promise<ChannelAdminData> }\n\n    /**\n     * Convenience function. Returns 'mother' channel, if any. Owner only.\n     */\n    @Ready @Owner getMother() {\n        return this.getAdminData().then((adminData) => {\n            return adminData.motherChannel\n        });\n    }\n\n    /**\n     * Convenience function. Returns boolean for whether channel is locked or not. Owner only.\n     */\n    @Ready @Owner isLocked() {\n        return this.getAdminData().then((adminData) => {\n            return adminData.locked\n        });\n    }\n\n    /**\n     * Locks down the channel (only visitors the Owner has pre-approved have access).\n     * Owner only.\n     */\n    @Ready @Owner lock(): Promise<{ success: boolean }> { return this.callApi('/lockChannel') }\n\n    /**\n     * Same as lock(). Owner only\n     */\n    @Ready @Owner lockChannel(): Promise<{ success: boolean }> { return this.callApi('/lockChannel') }\n\n    /** Sets limit of number of (different) visitors that can join. Owner only. */\n    @Ready @Owner setCapacity(capacity: number) { return this.callApi('/setCapacity', { capacity: capacity }) }\n    /** Sets limit of number of (different) visitors that can join. Same as setCapacity. Owner only. */\n    @Ready @Owner updateCapacity(capacity: number) { return this.callApi('/setCapacity', { capacity: capacity }) }\n\n    /**\n     * Returns the 'channel data' structure: various keys etc.\n     */\n    @Ready @Memoize getChannelKeys(): Promise<SBChannelData> { return this.callApi('/getChannelKeys') }\n\n    /**\n     * Returns amount of storage available to 'you' on the channel.\n     * Currently this is all the budget (please do not abuse),\n     * but in the future this will be on a per-user basis. (Except for Owner)\n     */\n    @Ready getStorageLimit() { return (this.callApi('/getStorageLimit')) }\n\n    /**\n     * 'Mint' a storaged token off a channel.\n     */\n    @Ready @Retry(1) async getStorageToken(size: number) { return validate_SBStorageToken(await this.callApi('/getStorageToken', { size: size })) }\n\n    /**\n     * \"budd\" will spin a channel off an existing one that you own,\n     * or transfer storage budget to an existing channel.\n     * \n     * You need to provide one of the following combinations of info:\n     * \n     * - nothing: creates new channel with minmal permitted budget\n     * - just storage amount: creates new channel with that amount, returns new channel\n     * - just a target channel: moves a chunk of storage to that channel\n     * - target channel and storage amount: moves that amount to that channel\n     * - keys and storage amount: creates new channel with those keys and that storage amount\n     * - if there's a storage token, add that storage to the channel (ignores size)\n     * \n     * If you want to budd into a channel with specific keys, you'll need to\n     * create a new set of keys (ChannelKeys) and pass the SBChannelData from that.\n     * \n     * It returns a complete ChannelHandle, which will include the private key\n     * \n     * Another way to remember the above: all combinations are valid except\n     * both a target channel and assigning keys.\n     * \n     * In terms of 'keys', you can provide a JsonWebKey, or a SBUserPrivateKey,\n     * or a channel handle. JWK is there for backwards compatibility.\n     * \n     * Note: if you're specifying the target channel, then the return values will\n     * not include the private key (that return value will be empty).\n     * \n     * Note: the owner of the target channel will get a message that you budded\n     * into their channel, which includes the channelId it was budded from.\n     * \n     * Note: a negative storage amount is interpreted as 'leave that much behind'.\n     * \n     * Any indications that your parameters are wrong will result in a rejected\n     * promise. This includes if you ask for more storage than is there, or if\n     * your negative value is more than the storage budget that's there. \n     * \n     * If the budget and target channels are the same, it will throw.\n     * \n     * If you omit budget size, it will use the smallest allowed new channel\n     * storage (currently 32 MB). This will happens regardless of if you are\n     * creating a new channel, or 'depositing'.\n     * \n     * If you give the size value of 'Infinity', then all the storage available\n     * on the source channel will be transferred to the target channel\n     * (aka 'plunder').\n     * \n     * On the server side, budd is in two steps, first extracting the storage\n     * budget from the mother channel, and then creating or transferring the\n     * storage budget to the target channel. \n     * \n     */\n    @Ready @Owner budd(options?: { targetChannel?: ChannelHandle, size?: number, token?: SBStorageToken }): Promise<ChannelHandle> {\n        return new Promise<ChannelHandle>(async (resolve, reject) => {\n            // in general we code a bit conservatively in budd(), to make sure we're returning a valid channel\n            var { targetChannel, size, token } = options || {}\n            if (!targetChannel) {\n                targetChannel = (await new Channel().ready).handle\n                if (DBG0) console.log(\"\\n\", SEP, \"[budd()]: no target channel provided, using new channel:\\n\", SEP, targetChannel, \"\\n\", SEP)\n            } else if (this.channelId === targetChannel.channelId) {\n                reject(new Error(\"[budd()]: source and target channels are the same, probably an error\")); return\n            }\n            if (!targetChannel) throw new SBError(\"[budd()]: no target channel provided\")\n            const targetChannelData = targetChannel.channelData\n            if (!targetChannelData) {\n                reject(new Error(`[budd()]: target channel has no channel data, probably an error`)); return\n            }\n            if (token) {\n                if (size || targetChannel) throw new SBError(\"[budd()]: cannot specify token and size or target channel\")\n                token = validate_SBStorageToken(token)\n            } else {\n                if (!size) size = NEW_CHANNEL_MINIMUM_BUDGET // if nothing provided, goes with 'minimum'\n                if (size !== Infinity && Math.abs(size) > await this.getStorageLimit()) {\n                    // server will of course enforce this but it's convenient to catch it earlier\n                    reject(new Error(`[budd()]: storage amount (${size}) is more than current storage limit`)); return\n                }\n            }\n            try {\n                targetChannelData.storageToken = token || await this.getStorageToken(size!);\n                if (DBG0) console.log(`[budd()]: requested ${size}, got storage token:`, targetChannelData.storageToken)\n                // const newChannelData = validate_SBChannelData(await this.callApi('/budd', targetChannelData))\n                const targetChannelApi = await new Channel(targetChannel).ready\n                if (!targetChannelApi.channelServer) targetChannelApi.channelServer = this.channelServer\n                const newChannelData = validate_SBChannelData(await targetChannelApi.callApi('/budd', targetChannelData))\n                if (targetChannel.channelId !== newChannelData.channelId) {\n                    console.warn(\"[budd()]: target channel ID changed, should not happen, error somewhere\\n\", SEP)\n                    console.warn(\"targetChannel:\", targetChannel, \"\\n\", SEP)\n                    console.warn(\"newChannelData:\", newChannelData, \"\\n\", SEP)\n                    reject(new Error(`[budd()]: target channel ID changed, should not happen, error somewhere`)); return\n                }\n                if (!newChannelData.storageToken)\n                    console.warn(\"[budd()]: target channel has no storage token, possibly an error, should be returned from server\")\n                const newHandle = {\n                    [SB_CHANNEL_HANDLE_SYMBOL]: true,\n                    channelId: newChannelData.channelId,\n                    userPrivateKey: targetChannel.userPrivateKey,\n                    channelServer: this.channelServer,\n                    channelData: newChannelData\n                }\n                if (DBG0) console.log(\"[budd()]: success, newHandle:\", newHandle)\n                resolve(validate_ChannelHandle(newHandle))\n            } catch (e) {\n                reject('[budd] Could not get storage token from server, are you sure about the size?'); return\n            }\n        });\n    }\n\n    /* Some utility functions that are perhaps most logically associated with 'Channel.x' */\n\n    /**\n     * Returns the 'lowest' possible timestamp.\n     */\n    static LOWEST_TIMESTAMP = '0'.repeat(26);\n\n    /**\n     * Returns the 'lowest' possible timestamp.\n     */\n    static HIGHEST_TIMESTAMP = '3'.repeat(26);\n\n    /**\n     * Converts from timestamp to 'base 4' string used in message IDs.\n     * \n     * Time stamps are monotonically increasing. We enforce that they must be\n     * different. Stored as a string of [0-3] to facilitate prefix searches (within\n     * 4x time ranges). We append \"0000\" for future needs, for example if we need\n     * above 1000 messages per second. Can represent epoch timestamps for the next\n     * 400+ years. Currently the appended \"0000\" is stripped/ignored.\n     * \n     * Note: '0' will return LOWEST_TIMESTAMP, 'Infinity' will return HIGHEST_TIMESTAMP.\n     * \n     * If 'tsNum' is undefined it will return undefined.\n     */\n    static timestampToBase4String(tsNum: number | undefined): string | undefined {\n        if (tsNum === undefined) return undefined\n        if (tsNum < 0) throw new SBError(\"[timestampToBase4String] Negative timestamp\")\n        if (tsNum === 0) return Channel.LOWEST_TIMESTAMP\n        if (tsNum === Infinity) return Channel.HIGHEST_TIMESTAMP\n        return tsNum.toString(4).padStart(22, \"0\") + \"0000\" // total length 26\n    }\n\n    /**\n     * Converts the server format (base4) to a string timestamp (ISO format).\n     */\n    static base4stringToDate(tsStr: string) {\n        const ts = parseInt(tsStr.slice(0, -4), 4)\n        return new Date(ts).toISOString()\n    }\n\n    /**\n     * Will take values (or keys), and return the lowest and highest values;\n     * empty data is fine and will return '[]' (falsey).\n     */\n    static getLexicalExtremes<T extends number | string>(set: Set<T> | Array<T> | Map<T, any>): [T, T] | [] {\n        if (!(set instanceof Set || set instanceof Array || set instanceof Map))\n            throw new SBError(\"[getLexicalExtremes] Paramater must be a Set, Array, or Map\");\n        const arr = set instanceof Array ? set : Array.from(set.keys()); // this is legit, which is cute\n        if (arr.length === 0) return [];\n        let [min, max] = [arr[0], arr[0]] as [T, T];\n        for (const value of arr) {\n            if (value < min) min = value;\n            if (value > max) max = value;\n        }\n        return [min, max];\n    }\n\n    /**\n     * Given a set of (full) keys, reviews all the timestamp prefixes, and returns\n     * the shortest prefix that would range all the keys in the set.\n     */\n    static messageKeySetToPrefix = (keys: Set<string>): string => {\n        if (!isSet(keys)) throw new SBError(\"[messageKeySetToPrefix] keys is not a Set\")\n        if (keys.size === 0) return '0'; // special case (everything)\n        const [lowest, highest] = Channel.getLexicalExtremes(keys);\n        _sb_assert(lowest && highest, \"[timestampLongestPrefix]: no lowest or highest (internal error?)\")\n        const { timestamp: s1 } = Channel.deComposeMessageKey(lowest!)\n        const { timestamp: s2 } = Channel.deComposeMessageKey(highest!)\n        let i = 0;\n        while (i < s1.length && i < s2.length && s1[i] === s2[i]) i++;\n        return s1.substring(0, i);\n    }\n\n    static timestampLongestPrefix = (s1: string, s2: string): string => {\n        if (s1 && s2 && typeof s1 === 'string' && typeof s2 === 'string' && s1.length === 26 && s2.length === 26) {\n            let i = 0;\n            while (i < s1.length && i < s2.length && s1[i] === s2[i]) i++;\n            return s1.substring(0, i);\n        } else throw new SBError(`[timestampLongestPrefix]: invalid input:\\n '${s1}' or '${s2}'`);\n    }\n\n    static timestampRegex = /^[0-3]{26}$/;\n\n    /**\n     * Reverse of timestampToBase4String. Strict about the format (needs to be\n     * `[0-3]{26}`), returns undefined if there's any issue. LOWEST_TIMESTAMP\n     * will return 0, HIGHEST_TIMESTAMP will return Infinity.\n     */\n    static base4StringToTimestamp(tsStr: string): number | undefined {\n        if (!tsStr || typeof tsStr !== 'string' || tsStr.length !== 26 || !Channel.timestampRegex.test(tsStr)) return undefined\n        if (tsStr === Channel.LOWEST_TIMESTAMP) return 0\n        if (tsStr === Channel.HIGHEST_TIMESTAMP) return Infinity\n        return parseInt(tsStr.slice(0, -4), 4);\n    }\n\n    /*\n    * Similar to {@link base4StringToTimestamp}, but takes a timestamp string\n    * and returns an (ISO) formatted date string. Returns 'undefined' if there's\n    * an issue with the timestamp. Note that it rigidly expects a 26 character\n    * timestamp (prefix) string. \n    */\n    static base4StringToDate(tsStr: string) {\n        const ts: number | undefined = Channel.base4StringToTimestamp(tsStr)\n        if (ts) return new Date(ts).toISOString()\n        else return undefined\n    }\n\n    /**\n     * Teases apart the three elements of a channel message key. Note, this does not\n     * throw if there's an issue, it just sets all the parts to '', which should\n     * never occur. Up to you if you want to run with that result or assert on it.\n     * Strict about the format (defined as `[a-zA-Z0-9]{43}_[_a-zA-Z0-9]{4}_[0-3]{26}`).\n     * \n     * Note that '____' is the default subchannel.\n     */\n    static deComposeMessageKey(key: string): { channelId: string, i2: string, timestamp: string } {\n        const regex = /^([a-zA-Z0-9]{43})_([_a-zA-Z0-9]{4})_([0-3]{26})$/;\n        const match = key.match(regex);\n        if (match && match.length >= 4)\n            // return [match![1]!, match![2]!, match![3]!]\n            return { channelId: match[1], i2: match[2], timestamp: match[3] }\n        else return { channelId: '', i2: '', timestamp: '' }\n    }\n\n    /**\n     * Creates a 'message key' from constituent parts.\n     */\n    static composeMessageKey(channelId: ChannelId, timestamp: number, subChannel: string = '____',) {\n        let id = `${channelId}_${subChannel ?? '____'}_${Channel.timestampToBase4String(timestamp)}`\n        if (messageRegex.test(id)) return id\n        else throw new SBError(`[composeMessageKey] generated invalid message key: ${id}`)\n    }\n\n} /* class Channel */\n\n", "// (c) 2024 384 (tm)\n\nimport { SB_CHANNEL_HANDLE_SYMBOL } from './Channel'\n\nimport {\n  _sb_assert, ChannelId,\n  SBUserPrivateKey, SBError,\n  DBG2,\n} from 'src/common'\n\nimport { SBChannelData, _check_SBChannelData } from './Channel'\n\n/** \n * Channel 'descriptor'. Validator is {@link validate_ChannelHandle}.\n * @public\n */\nexport interface ChannelHandle {\n  [SB_CHANNEL_HANDLE_SYMBOL]?: boolean, // future use for internal validation\n\n  /** minimum info is the key */\n  userPrivateKey: SBUserPrivateKey,\n\n  /** if channelID is omitted, then the key will be treated as the Owner key\n      (channelId is always derived from owner key) */\n  channelId?: ChannelId,\n\n  /** if channel server is omitted, will use default (global) server */\n  channelServer?: string,\n\n  /** server-side channel data; if missing the server can provide it; if the\n      handle is meant to be 'completely stand-alone', it's good practice to\n      include this */\n  channelData?: SBChannelData,\n}\n\n// returns true of false, does not throw\n/** @internal */\nexport function _check_ChannelHandle(data: ChannelHandle) {\n  if (!data) return false\n  return (\n    Object.getPrototypeOf(data) === Object.prototype\n    && data.userPrivateKey && typeof data.userPrivateKey === 'string' && data.userPrivateKey.length > 0\n    && (!data.channelId || (typeof data.channelId === 'string' && data.channelId.length === 43))\n    && (!data.channelServer || typeof data.channelServer === 'string')\n    && (!data.channelData || _check_SBChannelData(data.channelData))\n  )\n}\n\n/**\n * Validates 'ChannelHandle', throws if there's an issue\n * @public\n */\nexport function validate_ChannelHandle(data: ChannelHandle): ChannelHandle {\n  if (!data) throw new SBError(`invalid ChannelHandle (null or undefined)`)\n  else if (data[SB_CHANNEL_HANDLE_SYMBOL]) return data as ChannelHandle\n  else if (_check_ChannelHandle(data)) {\n    return { ...data, [SB_CHANNEL_HANDLE_SYMBOL]: true } as ChannelHandle\n  } else {\n    if (DBG2) console.error('invalid ChannelHandle ... trying to ingest:\\n', data)\n    throw new SBError(`invalid ChannelHandle`)\n  }\n}\n", "// (c) 2024 384 (tm)\n\n/**\n * Implements event handling interface, compatible with EventTarget but also\n * supports 'on', 'off', and 'emit'. Note: entirely 'static', so any class\n * that extends this will implement a global event handler for that class.\n */\nexport class SBEventTarget {\n    private static listeners: { [type: string]: ((event: Event | any) => void)[] } = {};\n\n    static addEventListener(type: string, callback: (event: Event) => void, _options?: boolean | AddEventListenerOptions): void {\n        SBEventTarget.listeners[type] = SBEventTarget.listeners[type] || [];\n        SBEventTarget.listeners[type].push(callback);\n    }\n\n    static removeEventListener(type: string, callback: (event: Event) => void, _options?: boolean | EventListenerOptions): void {\n        if (!SBEventTarget.listeners[type]) return;\n        const stack = SBEventTarget.listeners[type];\n        const index = stack.indexOf(callback);\n        if (index > -1) {\n            stack.splice(index, 1);\n        }\n    }\n\n    static dispatchEvent(event: Event): boolean {\n        const listeners = SBEventTarget.listeners[event.type];\n        if (!listeners) return true;\n        listeners.forEach(listener => listener(event));\n        return !event.defaultPrevented;\n    }\n\n    static on(eventName: string, listener: (args: any) => void) {\n        SBEventTarget.addEventListener(eventName, listener as any);\n    }\n\n    static off(eventName: string, listener: (args: any) => void) {\n        SBEventTarget.removeEventListener(eventName, listener as any);\n    }\n\n    static emit(eventName: string, ...args: any[]) {\n        const event = new CustomEvent(eventName, { detail: args.length === 1 ? args[0] : args });\n        SBEventTarget.dispatchEvent(event);\n    }\n}\n", "// (c) 2024 384 (tm)\n\nimport {\n    SBUserPrivateKey,\n    SEP, DBG2,\n    extractPayload, assemblePayload,\n} from 'src/common'\n\nimport { jsonOrString, jsonParseWrapper } from 'src/utils/json'\nimport { SBError, _sb_assert, _sb_exception } from 'src/utils/error'\n\nconst DBG0 = false;\n\nimport { ChannelMessage, validate_ChannelMessage } from './ChannelMessage'\nimport { ChannelApi } from './ChannelApi'\nimport { SBProtocol } from './Protocol'\nimport { ChannelHandle, validate_ChannelHandle, _check_ChannelHandle } from './ChannelHandle'\nimport { Message, MessageOptions } from 'src/channel/Message'\nimport { Channel } from './Channel'\n\nimport { arrayBufferToBase62 } from 'src/utils/b62';\nimport { arrayBufferToBase64url } from 'src/utils/b64';\n\nimport {\n    WEBSOCKET_MESSAGE_TIMEOUT,\n    WEBSOCKET_SETUP_TIMEOUT,\n    WEBSOCKET_PING_INTERVAL,\n    WEBSOCKET_RETRY_COUNT,\n} from './config'\n\nimport { _check_SBChannelData } from './Channel'\n\n\ninterface WSProtocolOptions {\n    version?: number,\n    url: string, // not the user (client) url, but where the socket is\n    websocket?: WebSocket, // will have a value if we've connected\n    onOpen?: null | CallableFunction,\n    ready: boolean,\n    // onMessage?: null | CallableFunction,\n    onClose?: null | CallableFunction,\n    onError?: null | CallableFunction,\n    timeout?: number,\n    closed: boolean,\n}\n\n\nasync function closeSocket(socket: WebSocket) {\n    console.log(\"[closeSocket] closing socket\", socket)\n    if (socket.readyState !== WebSocket.CLOSED)\n      await new Promise<void>((resolve) => {\n        socket.addEventListener('close', () => {\n          console.log(\"[ChannelApi.closeSocket] ... socket confirmed closed\", socket)\n          resolve();\n        }, { once: true });\n        socket.close(1000); // not allowed to say '1001'\n      });\n    else {\n      console.warn('[ChannelApi] websocket already closed')\n    }\n  }\n  \n  \n\n/**\n   * ChannelSocket extends Channel. Has same basic functionality as Channel, but\n   * is synchronous and uses websockets, eg lower latency and higher throughput.\n   *\n   * You send by calling channel.send(msg: SBMessage | string), i.e. you can\n   * send a quick string.\n   *\n   * You can set your message handler upon creation, or later by using\n   * channel.onMessage = (m: Message) => { ... }.\n   *\n   * You don't need to worry about managing resources, like closing it, or\n   * checking if it's open. It will close based on server behavior, eg it's up\n   * to the server to close the connection based on inactivity. The\n   * ChannelSocket will re-open if you try to send against a closed connection.\n   *\n   * Messages are delivered as type Message if it could be parsed and decrypted;\n   * it can also be a string (typically if a low-level server message, in which\n   * case it will just be forwarded to the message handler).\n   *\n   * It also handles a simple ack/nack mechanism with the server transparently.\n   *\n   * Be aware that if ChannelSocket doesn't know how to handle a certain\n   * message, it will generally drop it. \n   *\n */\nexport class ChannelSocket extends Channel {\n    channelSocketReady: Promise<ChannelSocket>\n    static ReadyFlag = Symbol('ChannelSocketReadyFlag'); // see below for '(this as any)[ChannelSocket.ReadyFlag] = false;'\n\n    // #myChannelSocketID = Symbol()\n\n    #ws?: WSProtocolOptions\n    #socketServer: string\n\n    onMessage = (_m: Message | string): void => { _sb_assert(false, \"[ChannelSocket] NO MESSAGE HANDLER\"); }\n    #ack: Map<string, (value: string | PromiseLike<string>) => void> = new Map()\n    #ackTimer: Map<string, number> = new Map()\n    #traceSocket: boolean = false // should not be true in production\n\n    // set of messages that have been forwarded to the message handler\n    #forwardedMessages: Set<string> = new Set()\n    #MAX_DUPLICATE_WINDOW = 2000; // max count of messages we look for duplicates in\n\n    // last timestamp we've seen\n    lastTimestampPrefix: string = '0'.repeat(26);\n    #pingInterval: number = 0;\n\n    #errorPromise?: Promise<ChannelSocket>;\n    #rejectError?: (reason?: any) => void;\n\n    constructor(\n        handleOrKey: ChannelHandle | SBUserPrivateKey,\n        onMessage: (m: Message | string) => void,\n        protocol?: SBProtocol\n    ) {\n        _sb_assert(onMessage, '[ChannelSocket] constructor: no onMessage handler provided')\n\n        if (typeof handleOrKey === 'string') {\n            super(handleOrKey as SBUserPrivateKey, protocol) // we let super deal with it\n        } else {\n            const handle = validate_ChannelHandle(handleOrKey)\n            super(handle, protocol)\n            if (handle.channelServer)\n                this.channelServer = handle.channelServer // handle choice will override\n        }\n\n        // if for some reason we still don't have this, go with default\n        if (!this.channelServer) this.channelServer = ChannelApi.defaultChannelServer // might throw\n\n            ; (this as any)[ChannelSocket.ReadyFlag] = false;\n        this.#socketServer = this.channelServer.replace(/^http/, 'ws')\n        this.onMessage = onMessage\n        this.channelSocketReady = this.#channelSocketReadyFactory()\n    }\n\n    #setupPing() {\n        if (DBG0) console.log(SEP, \"[ChannelSocket] Setting up 'ping' messages ... \", SEP)\n\n        // we regularly check how long it's been since we heard from the server;\n        // every channelsocket does this\n        this.#pingInterval = setInterval(() => {\n            if (this.closingDown) {\n                console.error(\"[ChannelSocket] we are closed, removing ping interval\")\n                clearInterval(this.#pingInterval)\n                return // close down quietly\n            }\n            ChannelApi.haveNotHeardFromServer()\n        }, WEBSOCKET_PING_INTERVAL * 0.5);\n\n        // and we fire off the first one\n        if (this.#ws && this.#ws.websocket && this.#ws.websocket.readyState === 1) {\n            if (DBG0) console.log(SEP, \"[ChannelSocket] Sending first 'ping' (timestamp request) message.\", SEP)\n            try {\n                this.#ws.websocket.send('ping')\n            } catch (e) {\n                console.error(\"[ChannelSocket] Failed to send first (hibernation) 'ping' message, Internal Error [L3986]\")\n            }\n        } else {\n            console.error(\"[ChannelSocket] websocket not ready (?), not sending first 'ping', hibernation disabled\")\n        }\n\n        // const pingTimer = setInterval(() => {\n        //   if (this.isClosed) return // close down quietly\n        //   if (DBG2) console.log(SEP, \"[ChannelSocket] Sending 'ping' (timestamp request) message.\", SEP)\n        //   try {\n        //     this.#ws!.websocket!.send('ping')\n        //     // set a timer that is 0.8 * the interval, to time out if this doesn't respond\n        //     setTimeout(() => {\n        //       if (this.isClosed) return // close down quietly\n        //       if (DBG0) console.warn(\"[ChannelSocket] 'ping' message timed out\")\n        //       this.errorState = true;\n        //     }, interval * 0.8);\n        //   } catch (e) {\n        //     if (this.isClosed) {\n        //       if (DBG2) console.log(\"[ChannelSocket] we are closed, removing interval\")\n        //       clearInterval(pingTimer)\n        //     } else {\n        //       if (DBG0) console.warn(\"[ChannelStream.startSocket] Failed to send 'ping' message:\", e)\n        //       this.errorState = true;\n        //     }\n        //   }\n        // }, interval);\n    }\n\n    async #tryReconnect() {\n        if (DBG0) console.log(SEP, \"[ChannelSocket] Trying to re-establish connection ...\", SEP)\n        // first we wait a little bit, then a quick retry\n        await new Promise((resolve) => setTimeout(resolve, 75))\n        this.channelSocketReady = this\n            .#channelSocketReadyFactory()\n            .catch((e) => {\n                console.error(SEP, \"[ChannelSocket] Could not re-establish connection, should queue up\\n\", e, SEP);\n                return this\n            });\n\n    }\n\n    // if we lose the channel, we decide what to do here; only called if we at some point were\n    // 'ready' (connected) and then later disconnected for any reason (other than explicit 'close()')\n    // ToDo: check if explicit close propagates properly to things like online status?\n    async #handleDisconnect(reason: string) {\n        console.warn(`[ChannelSocket] Lost connection to server, will try to reset.\\nReason (if any): '${reason}'`);\n        (this as any)[ChannelSocket.ReadyFlag] = false;\n        ChannelApi.removeChannelSocket(this)\n        ChannelApi.on('online', this.#tryReconnect)\n    }\n\n    #channelSocketReadyFactory() {\n        this.#errorPromise = new Promise<ChannelSocket>((_, reject) => {\n            if (DBG2) console.log(\"Error promise initialized\")\n            this.#rejectError = reject;\n        });\n        const returnPromise = Promise.race([\n            this.#errorPromise,\n            new Promise<ChannelSocket>(async (resolve, _) => {\n                if (DBG0) console.log(\"++++ STARTED ChannelSocket.readyPromise()\")\n                await this.sbChannelKeysReady // because we need the getter for channelId\n                const url = this.#socketServer + '/api/v2/channel/' + this.channelId + '/websocket'\n                this.#ws = {\n                    url: url,\n                    ready: false,\n                    closed: false,\n                    timeout: WEBSOCKET_MESSAGE_TIMEOUT\n                }\n                if (!this.#ws.websocket || this.#ws.websocket.readyState === 3 || this.#ws.websocket.readyState === 2) {\n                    // either it's new, or it's closed, or it's in the process of closing\n                    if (this.#ws.websocket) {\n                        console.warn(\"[ChannelSocket] websocket is in a bad state, closing it ... will await\")\n                        await closeSocket(this.#ws.websocket)\n                        ChannelApi.addChannelSocket(this)\n                    }\n                    // a WebSocket connection is always a 'GET', and there's no way to provide a body\n                    const apiBodyBuf = assemblePayload(await this.buildApiBody(url))\n                    _sb_assert(apiBodyBuf, \"Internal Error [L3598]\")\n                    try {\n                        // here's the only spot in the code where we actually open a websocket:\n                        this.#ws.websocket = new WebSocket(url + \"?apiBody=\" + arrayBufferToBase62(apiBodyBuf!))\n                        ChannelApi.addChannelSocket(this)\n                    } catch (e) {\n                        const msg = \"[ChannelSocket] Could not open websocket: \" + e\n                        if (DBG0) console.error(msg)\n                        this.#rejectError!(msg)\n                        return // don't do anything else\n                    }\n                }\n\n                if (DBG0) console.log(SEP, \"++++ readyPromise() - setting up websocket message listener\", SEP);\n\n                const thisWsWebsocket = this.#ws.websocket\n                const initialListener = async (e: MessageEvent<any>) => {\n                    if (!e.data) {\n                        const msg = \"[ChannelSocket] received empty message (should be a 'ready' message)\";\n                        console.error(msg);\n                        this.#rejectError!(msg)\n                    }\n                    let serverReadyMessage: { ready: boolean, messageCount: number, latestTimestamp: string } | null = null\n\n                    if (typeof e.data === 'string') {\n                        serverReadyMessage = jsonParseWrapper(e.data, \"L3909\")\n                        // const json = jsonParseWrapper(e.data, \"L3909\")\n                        // if (json && json.hasOwnProperty('ready')) {\n                        //   if (DBG0) console.log(\"++++ readyPromise() - received ready message, switching to main message processor:\\n\", e.data)\n                        //   if (json.hasOwnProperty('latestTimestamp')) {\n                        //     this.lastTimestampPrefix = json.latestTimestamp\n                        //     if (DBG2) console.log(\"++++ readyPromise() - received latestTimestamp:\", this.lastTimestampPrefix)\n                        //   } else console.warn(\"[ChannelSocket] received 'ready' message without 'latestTimestamp'\")\n                        //   thisWsWebsocket.removeEventListener('message', initialListener);\n                        //   thisWsWebsocket.addEventListener('message', this.#processMessage);\n                        //   this.#setupPing();\n                        //   (this as any)[ChannelSocket.ReadyFlag] = true;\n                        //   resolve(this);\n                        // } else {\n                        //   reject(\"[ChannelSocket] received something other than 'ready' as first message:\\n\" + JSON.stringify(e.data));\n                        // }\n                    } else if (e.data instanceof ArrayBuffer) {\n                        serverReadyMessage = extractPayload(e.data).payload\n                    } else if (e.data instanceof Blob) {\n                        serverReadyMessage = extractPayload(await e.data.arrayBuffer()).payload\n                    } else {\n                        _sb_exception(\"L3987\", \"[ChannelSocket] received something other than string or ArrayBuffer\")\n                    }\n                    if (serverReadyMessage) {\n                        if (serverReadyMessage.ready) {\n                            if (DBG0) console.log(\"++++ readyPromise() - received ready message, switching to main message processor:\\n\", serverReadyMessage)\n                            if (serverReadyMessage.latestTimestamp) {\n                                this.lastTimestampPrefix = serverReadyMessage.latestTimestamp\n                                if (DBG2) console.log(\"++++ readyPromise() - received latestTimestamp:\", this.lastTimestampPrefix)\n                            } else console.warn(\"[ChannelSocket] received 'ready' message without 'latestTimestamp'\")\n                            thisWsWebsocket.removeEventListener('message', initialListener);\n                            thisWsWebsocket.addEventListener('message', this.#processMessage);\n                            this.#setupPing();\n                            (this as any)[ChannelSocket.ReadyFlag] = true;\n                            resolve(this);\n                        } else {\n                            const msg = \"[ChannelSocket] received something other than 'ready' as first message:\\n\" + JSON.stringify(e.data);\n                            if ((this as any)[ChannelSocket.ReadyFlag] === true) console.warn(msg);\n                            else this.#rejectError!(msg);\n                        }\n                    } else {\n                        const msg = \"[ChannelSocket] received empty message, or could not parse it (should be a 'ready' message)\"\n                        if ((this as any)[ChannelSocket.ReadyFlag] === true) console.warn(msg);\n                        else this.#rejectError!(msg);\n                    }\n                };\n\n                this.#ws.websocket.addEventListener('message', initialListener);\n\n                // if (DBG0) console.log(SEP,\"++++ readyPromise() - setting up websocket message listener\", SEP)\n                // this.#ws.websocket.addEventListener('message',\n                //   (e: MessageEvent<any>) => {\n                //     if (e.data && typeof e.data === 'string' && jsonParseWrapper(e.data, \"L3618\")?.hasOwnProperty('ready')) {\n                //       // switch to main message processor\n                //       this.#ws!.websocket!.addEventListener('message', this.#processMessage)\n                //       // we're ready\n                //       if (DBG0) console.log(SEP, \"Received ready\", SEP)\n                //       ; (this as any)[ChannelSocket.ReadyFlag] = true;\n                //       resolve(this)\n                //     } else {\n                //       if (DBG0) console.log(SEP, \"Received non-ready:\\n\", e.data, \"\\n\", SEP)\n                //       reject(\"[ChannelSocket] received something other than 'ready' as first message\")\n                //     }\n                //   }\n                // )\n\n                // let us set a timeout to catch and make sure this thing resoles within a certain time limit\n                let resolveTimeout: number | undefined = setTimeout(() => {\n                    if (!(this as any)[ChannelSocket.ReadyFlag]) {\n                        const msg = \"[ChannelSocket] Socket not resolving after waiting, fatal.\"\n                        console.warn(msg);\n                        this.#rejectError!(msg)\n                    } else {\n                        if (DBG2) console.log(\"[ChannelSocket] resolved correctly\", this)\n                    }\n                }, WEBSOCKET_SETUP_TIMEOUT);\n\n                this.#ws.websocket.addEventListener('open', async () => {\n                    this.#ws!.closed = false\n                    if (resolveTimeout) { clearTimeout(resolveTimeout); resolveTimeout = undefined; }\n                    // need to make sure parent is ready (and has keys)\n                    await this.ready\n                    if (DBG0) console.log(\"++++++++ readyPromise() sending init\")\n                    // auth is done on setup, it's not needed for the 'ready' signal\n                    // this.#ws!.websocket!.send(assemblePayload({ ready: true })!)\n                    this.#ws!.websocket!.send('ready')\n                    if (DBG0) console.log(\"++++++++ readyPromise() ... no immediate errors for init\")\n                });\n\n                this.#ws.websocket.addEventListener('close', (e: CloseEvent) => {\n                    this.#ws!.closed = true\n                    if (this.closingDown) {\n                        if (DBG0) console.log(`[ChannelSocket] Closing  down.`)\n                    } else {\n                        if (e.wasClean) {\n                            if (e.reason.includes(\"does not have an owner\")) {\n                                const msg = `[ChannelSocket] No such channel on this server (${this.channelServer})`\n                                if ((this as any)[ChannelSocket.ReadyFlag] === true)\n                                    throw new SBError(msg + ' plus we are ready? (L4130)')\n                                this.#rejectError!(msg)\n                            } else {\n                                console.log(`[ChannelSocket] Closed (cleanly).\\nReason (if any): '${e.reason}'.`)\n                            }\n                        } else {\n                            console.warn(`[ChannelSocket] Closed (but not cleanly) [L4137]\\nReason (if any): '${e.reason}'. Server: '${this.channelServer}'`)\n                        }\n                        if ((this as any)[ChannelSocket.ReadyFlag] === true) {\n                            this.#handleDisconnect(\"Channel was ready, but reporting being closed [L4140]\")\n                        } else {\n                            const msg = \"[ChannelSocket] Closed before ready (?) [L4142]\"\n                            console.error(msg)\n                            this.#rejectError!(msg)\n                        }\n                    }\n                });\n\n                this.#ws.websocket.addEventListener('error', (e) => {\n                    this.#ws!.closed = true\n                    if (this.closingDown) {\n                        if (DBG0) console.log(`[ChannelSocket] Closing down.`)\n                    } else {\n                        if ((this as any)[ChannelSocket.ReadyFlag] === true) {\n                            // this.#handleDisconnect(\"Error on trying to open socket [L4152]\")\n                            const msg = \"[ChannelSocket] Socket closed [L4152]\\nEvent message (if any): '\" + (e as any).message + \"'\";\n                            console.error(msg)\n                            this.#rejectError!(msg)\n                        } else {\n                            const msg = `[ChannelSocket] Failed to connect, or errored out immediately [L4153].\\nError (if any): '${e}'`\n                            console.error(msg)\n                            this.#rejectError!(msg)\n                        }\n                    }\n                });\n            })\n        ]);\n        if (DBG2) console.log(\"Socket ready factory done, error promise:\", this.#rejectError)\n        return returnPromise\n        // this.#errorPromise.catch((e) => {\n        //   console.log(SEP, \"[ChannelSocket] Error in setup:\", e, SEP)\n        //   this.#handleDisconnect(\"Error in setup [L4162]: \" + e)\n        // })\n    }\n\n    // all messages (that eventually get to an onMessage() handler) pass through here\n    #processMessage = async (e: MessageEvent<any>) => {\n        _sb_assert(!this.errorState, \"[ChannelSocket] in error state (Internal Error L4018)\")\n        const msg = e.data\n        if (DBG2) console.log(SEP, \"[ChannelSocket] Received socket message:\\n\", msg, SEP)\n        var message: ChannelMessage | null = null\n        _sb_assert(msg, \"[ChannelSocket] received empty message\")\n        ChannelApi.heardFromServer(); // do this on every message to track online status\n\n        // string [0-3]* are magical, they imply a 'latest' time stamp prefix from server\n        if (typeof msg === 'string' && Channel.timestampRegex.test(msg)) {\n            if (DBG2) console.log(\"[ChannelSocket] Received 'latestTimestamp' message:\", msg)\n            ChannelApi.heardFromServer()\n            if (msg > this.lastTimestampPrefix) {\n                // if this is *newer* than we were last at, we ping back *our* latest\n                // string; if everything after that is still buffered by the server, it'll\n                // respond with them, otherwise the server will close the websocket\n                if (DBG0) console.log(SEP, \"[ChannelSocket] Received newer timestamp, will request those messages\", SEP)\n                this.#ws!.websocket!.send(this.lastTimestampPrefix)\n            }\n            // we only have one 'ping' outstanding at a time\n            setTimeout(() => {\n                if (this.#ws && !this.#ws.closed && this.#ws.websocket?.readyState === 1) {\n                    if (DBG2) console.log(\"[ChannelSocket] Sending 'ping' (timestamp request) message.\")\n                    try {\n                        this.#ws!.websocket!.send('ping')\n                    } catch (_e) {\n                        if (DBG0) console.warn(\"[ChannelSocket] Failed to send 'ping' message, ignoring\");\n                    }\n                } else if (DBG0) console.log(\"[ChannelSocket] Shutting down ping message timeout\")\n            }, WEBSOCKET_PING_INTERVAL)\n            // these messages are absorbed\n            return;\n        }\n\n        if (typeof msg === 'string') {\n            // could be a simple JSON message, or a low-level server message (eg just a string)\n            const _message: any = jsonOrString(msg)\n            if (!_message) _sb_exception(\"L3287\", \"[ChannelSocket] Cannot parse message: \" + msg)\n            else {\n                // currently, a timestamp is the only 'pure' string that should arrive\n                if (DBG0) console.log(\"[ChannelSocket] Received unrecognized 'string' message, will discard:\\n\", _message)\n                this.#ws!.websocket!.send(assemblePayload({ error: `Cannot parse 'string' message (''${_message})` })!);\n                return;\n            }\n        } else if (msg instanceof ArrayBuffer) {\n            message = extractPayload(msg).payload\n        } else if (msg instanceof Blob) {\n            message = extractPayload(await msg.arrayBuffer()).payload\n        } else {\n            this.#ws!.websocket!.send(assemblePayload({ error: `Received unknown 'type' of message (??)` })!);\n            return;\n        }\n        _sb_assert(message, \"[ChannelSocket] cannot extract message\")\n\n        // we catch server-specific messages here, and then pass the rest to the user\n        if (message!.ready) {\n            if (DBG0) console.log(\"++++++++ #processMessage: received ready message\\n\", message)\n            return\n        }\n        if (message!.error) {\n            // ToDo: some error messages need to propagate to the attempted send operation, such as out of budget\n            console.error(\"++++++++ #processMessage: received error message:\\n\", message!.error)\n            return\n        }\n\n        message = validate_ChannelMessage(message!) // throws if there's an issue\n        if (DBG2) console.log(SEP, \"[ChannelSocket] Received (extracted/validated) socket message:\\n\", message, \"\\n\", SEP)\n\n        if (!message.channelId) message.channelId = this.channelId\n        _sb_assert(message.channelId === this.channelId, \"[ChannelSocket] received message for wrong channel?\")\n\n        if (this.#traceSocket) console.log(\"[ChannelSocket] Received socket message:\", message)\n\n        _sb_assert(message.sts, \"[ChannelSocket] Message missing server timestamp Internal Error (L4145)\")\n        this.lastTimestampPrefix = ChannelSocket.timestampToBase4String(message!.sts!)!\n        if (DBG0) console.log(\"[ChannelSocket] Updated 'latestTimestamp' to:\", this.lastTimestampPrefix)\n\n        // if (!message._id)\n        //   message._id = composeMessageKey(message.channelId!, message.sts!, message.i2)\n\n        // check if this message is one that we've recently sent (track 'ack'), based on contents\n        _sb_assert(message.c && message.c instanceof ArrayBuffer, \"[ChannelSocket] Internal Error (L3675)\")\n        const hash = await crypto.subtle.digest('SHA-256', message.c! as ArrayBuffer)\n        const ack_id = arrayBufferToBase64url(hash)\n\n        // ToDo: track (chain) hashes of previous messages from same sender;\n        // similarly, or perhaps that's superflous, track and verify time stamps\n        // also, bootstrap upon a reconnect what latest message hash was\n\n        if (this.previous) message.p = this.previous\n        this.previous = ack_id\n        if (DBG0) console.log(\"[ChannelSocket] Received message with hash:\", ack_id)\n        const r = this.#ack.get(ack_id)\n        if (r) {\n            if (DBG0 || this.#traceSocket) console.log(`++++++++ #processMessage: found matching ack for id ${ack_id}`)\n            this.#ack.delete(ack_id)\n            r(\"success\") // we first resolve that outstanding send (and then also deliver message)\n        }\n        const t = this.#ackTimer.get(ack_id)\n        if (t) {\n            if (DBG2 || this.#traceSocket) console.log(`++++++++ #processMessage: clearing matching ack timeout for id ${ack_id}`)\n            clearTimeout(t)\n            this.#ackTimer.delete(ack_id)\n        }\n\n        if (DBG2) console.log(\"[ChannelSocket] New message, client and server time stamp: \", message.sts)\n        const m = await this.extractMessage(message)\n\n        if (m) {\n            if (!m._id) throw new SBError(\"[ChannelSocket] Internal Error (L522)\")\n            if (this.#forwardedMessages.has(m._id)) {\n                console.warn(\"[ChannelSocket] **** WARNING: Message already forwarded, will not deliver\")\n            } else {\n                while (this.#forwardedMessages.size > this.#MAX_DUPLICATE_WINDOW) {\n                    // being a bit conservative on state here\n                    const firstValue = this.#forwardedMessages.values().next().value!;\n                    this.#forwardedMessages.delete(firstValue);\n                }                  \n                this.#forwardedMessages.add(m._id)\n                if (DBG0) console.log(\"[ChannelSocket] Repackaged and will deliver 'Message':\", m)\n                // call user-provided message handler. this is the only spot in ChannelSocket.ts that does this\n                this.onMessage(m)\n            }\n        } else {\n            if (DBG0) console.log(\"[ChannelSocket] Message could not be parsed, will not deliver\")\n        }\n    }\n\n    get ready() {\n        _sb_assert(!this.errorState, \"[ChannelSocket] in error state (Internal Error L4104)\")\n        _sb_assert(!this.closingDown, \"[ChannelSocket] We are closed, blocking on'ready' will reject\")\n        return this.channelSocketReady\n    }\n\n    get errorPromise() {\n        if (!this.#errorPromise) throw new SBError(\"[ChannelSocket] errorPromise called before ready\")\n        return this.#errorPromise\n    }\n\n    // get readyFlag(): boolean { return this.#ChannelSocketReadyFlag }\n    get ChannelSocketReadyFlag(): boolean { return (this as any)[ChannelSocket.ReadyFlag] }\n\n    get status() {\n        if (!this.#ws || !this.#ws.websocket) return 'CLOSED'\n        else switch (this.#ws.websocket.readyState) {\n            case 0: return 'CONNECTING'\n            case 1: return 'OPEN'\n            case 2: return 'CLOSING'\n            default: return 'CLOSED'\n        }\n    }\n\n    /** Enables debug output */\n    set enableTrace(b: boolean) {\n        this.#traceSocket = b;\n        if (b) console.log(\"==== ChannelSocket: Tracing enabled ====\")\n    }\n\n    // actually send the message on the socket; returns a description of the outcome\n    #_send(msg: ChannelMessage) {\n        _sb_assert(!this.errorState, \"[ChannelSocket] in error state (Internal Error L4130)\")\n        if (DBG2) console.log(\"[ChannelSocket] #_send() called\")\n        return new Promise(async (resolve, reject) => {\n            if (DBG2) console.log(SEP, \"++++++++ [ChannelSocket.#_send()] called, will return promise to send:\", msg.unencryptedContents, SEP)\n            if (this.#ws!.closed) {\n                if (DBG2) console.error(\"[ChannelSocket] #_send() to a CLOSED socket\")\n                reject('<websocket closed>'); return;\n            }\n            if (msg.stringMessage === true) {\n                try {\n                    // 'string' messages are not tracked with an 'ack'; that\n                    // would need to be done at another location of whatever protocol the\n                    // message corresponds to.\n                    const contents = msg.unencryptedContents\n                    if (DBG2) console.log(\"[ChannelSocket] actually sending string message:\", contents)\n                    this.#ws!.websocket!.send(contents)\n                    resolve(\"success\")\n                } catch (e) {\n                    reject(`<websocket error upon send() of a string message: ${e}>`); return;\n                }\n            } else {\n                // if it's not simple, then it's more complicated\n                msg = await this.finalizeMessage(msg)\n                const messagePayload = assemblePayload(msg)\n                if (!messagePayload) {\n                    reject(\"ChannelSocket.send(): no message payload (Internal Error)\"); return;\n                }\n\n                // we keep track of a hash of things to manage 'ack'\n                const hash = await crypto.subtle.digest('SHA-256', msg.c! as ArrayBuffer)\n                const messageHash = arrayBufferToBase64url(hash)\n                if (DBG2 || this.#traceSocket)\n                    console.log(\"++++++++ ChannelSocket.send(): Which has hash:\", messageHash)\n                this.#ack.set(messageHash, resolve)\n                this.#ackTimer.set(messageHash, setTimeout(async () => {\n                    if (this.#ack.has(messageHash)) {\n                        this.#ack.delete(messageHash)\n                        if (ChannelApi.isShutdown) { reject(\"shutDown\"); return; } // if we're shutting things down, we're done\n                        if (DBG0) console.error(`[ChannelSocket] websocket request timed out (no ack) after ${this.#ws!.timeout}ms (${messageHash})`)\n                        // update: no we don't reset at low levels, turns out to confuse responsibilities\n                        // this.reset() // for timeouts, we try to reset the socket\n                        // await this.ready // wait for it to start up again\n                        // if (DBG0)  console.error(`[ChannelSocket] ... channel socket should be ready again`);\n                        reject(`<websocket request timed out (no ack) after ${this.#ws!.timeout}ms (${messageHash})>`);\n                        return;\n                    } else {\n                        // ChannelSocket resolves on seeing message return\n                        if (DBG0 || this.#traceSocket) console.log(\"++++++++ ChannelSocket.send() completed sending\")\n                        resolve(\"<received ACK, success, message sent and mirrored back>\")\n                    }\n                }, this.#ws!.timeout))\n                if (DBG2) console.log(\"[ChannelSocket] actually sending message:\", messagePayload)\n                try {\n                    // THIS IS WHERE we actually send an SBMessage payload ...\n                    if (DBG2) console.log(\"[ChannelSocket] actually sending message:\", messagePayload)\n                    this.#ws!.websocket!.send(messagePayload!)\n                } catch (e) {\n                    // print out stack at this time\n                    console.error(\"Failed to send on socket:\\n\", e, '\\n', new Error().stack)\n                    reject(`<websocket error upon send() of a message: ${e}>`); return;\n                }\n            }\n        });\n    }\n\n    /**\n      * ChannelSocket.send()\n      *\n      * Returns a promise that resolves to \"success\" when sent,\n      * or an error message if it fails.\n      */\n    async send(contents: any, options?: MessageOptions): Promise<string> {\n        if (DBG2) console.log(\"++++ ChannelSocket.send() called ...\")\n        await this.ready\n        _sb_assert(this.#ws && this.#ws.websocket, \"[ChannelSocket.send()] called before ready\")\n        if (DBG2) console.log(SEP, \"[ChannelSocket] sending, contents:\\n\", JSON.stringify(contents), SEP)\n        if (this.#ws!.closed) {\n            console.info(\"send() triggered reset of #readyPromise() (normal)\")\n            this.channelSocketReady = this.#channelSocketReadyFactory()\n                // this.#ChannelSocketReadyFlag = true\n                ; (this as any)[ChannelSocket.ReadyFlag] = false;\n        }\n        return new Promise(async (resolve, reject) => {\n            if (!this.ChannelSocketReadyFlag) reject(\"ChannelSocket.send() is NOT ready, perhaps it's resetting?\")\n            const readyState = this.#ws!.websocket!.readyState\n            switch (readyState) {\n                case 1: // OPEN\n                    // if (this.#traceSocket)\n                    //   console.log(\"++++++++ ChannelSocket.send() will send message:\", Object.assign({}, sbm.message))\n                    // let messagePayload: ArrayBuffer | string | null = null\n                    // if (options?.sendString === true) {\n                    //   messagePayload = sbm.message as string\n                    // } else {\n                    //   const msg = sbm.message as ChannelMessage\n                    //   messagePayload = assemblePayload(msg)\n                    //   _sb_assert(messagePayload, \"ChannelSocket.send(): failed to assemble message\")\n                    //   // we keep track of a hash of things we've sent so we can track when we see them\n                    //   // todo: 'hash' should probably be an sbm property\n                    //   const hash = await crypto.subtle.digest('SHA-256', msg.c!)\n                    //   const messageHash = arrayBufferToBase64url(hash)\n                    //   if (DBG0 || this.#traceSocket)\n                    //     console.log(\"++++++++ ChannelSocket.send(): Which has hash:\", messageHash)\n                    //   this.#ack.set(messageHash, resolve)\n                    //   this.#ackTimer.set(messageHash, setTimeout(() => {\n                    //     // we could just resolve on message return, but we want to print out error message\n                    //     if (this.#ack.has(messageHash)) {\n                    //       this.#ack.delete(messageHash)\n                    //       if (ChannelApi.isShutdown) { reject(\"shutDown\"); return; } // we don't want to print this out if we're shutting down\n                    //       const msg = `Websocket request timed out (no ack) after ${this.#ws!.timeout}ms (${messageHash})`\n                    //       console.error(msg)\n                    //       reject(msg)\n                    //     } else {\n                    //       // normal behavior\n                    //       if (this.#traceSocket) console.log(\"++++++++ ChannelSocket.send() completed sending\")\n                    //       resolve(\"success\")\n                    //     }\n                    //   }, this.#ws!.timeout))\n                    // }\n\n                    // console.log(\"[ChannelSocket.send()] enqueueing message: \", contents)\n                    // console.log(\"TTL at point of channel socket send() is: \", options?.ttl)\n                    this.sendQueue.enqueue({\n                        msg: this.packageMessage(contents, options),\n                        resolve: resolve,\n                        reject: reject,\n                        _send: this.#_send.bind(this),\n                        retryCount: WEBSOCKET_RETRY_COUNT\n                    })\n\n                    // // THIS IS WHERE we actually send the payload ...\n                    // if (!messagePayload) reject(\"ChannelSocket.send(): no message payload (Internal Error)\")\n                    // else this.#ws!.websocket!.send(messagePayload)\n\n                    break\n                case 0: // CONNECTING\n                case 2: // CLOSING\n                case 3: // CLOSED\n                    const errMsg = `[ChannelSocket.send()] Tried sending but socket not OPEN - it is ${readyState === 0 ? 'CONNECTING' : readyState === 2 ? 'CLOSING' : 'CLOSED'}`\n                    // _sb_exception('ChannelSocket', errMsg)\n                    reject(errMsg)\n                    break\n                default:\n                    _sb_exception('ChannelSocket', `socket in unknown state (${readyState})`)\n            }\n        })\n    }\n\n    /**\n     * This is either called when you're done, or is called internally\n     * during various restart/reconnect scenarios.\n     */\n    async close() {\n        if (DBG0) console.log(\"++++ ChannelSocket.close() called ... closing down stuff ...\")\n        this.closingDown = true;\n        clearInterval(this.#pingInterval);\n        if (this.#ws && this.#ws.websocket) {\n            // this.#ws.websocket.send('close') // will try to rely on protocol instead\n            if (this.#ws.websocket.readyState === 1) {\n                if (DBG0) console.log(SEP, \"[ChannelSocket] Closing websocket, with readystate:\", this.#ws.websocket.readyState, SEP)\n                this.#ws.websocket.close()\n                // debugging Deno? ... wait a moment here\n                await new Promise((resolve) => setTimeout(resolve, 75))\n            }\n            this.#ws.closed = true\n        }\n        // close and drain the sendQueue; any messages in flight will be rejected\n        // todo: strictly speaking, if we're in a retry situation, we can still handle them\n        const queueDrain = super.close()\n\n        // tell SB that we are no longer connected\n        ChannelApi.removeChannelSocket(this)\n\n            // set ready to permanently reject\n            ; (this as any)[ChannelSocket.ReadyFlag] = false;\n\n        // we would like to throw if anybody anywhere tries to await on our 'ready':\n        // this.channelSocketReady = Promise.reject(\"[ChannelSocket] This channel socket has been closed (by client request)\")\n        // but this doesn't work well because of JS limitations in tracking stacks. instead we in effect have a different\n        // state: 'isClosed' can be true, while the ChannelSocket is still 'ready'.\n\n        return queueDrain; // in case caller wants to await\n    }\n\n    /**\n     * Reconnects (resets) a ChannelSocket. This will not block (it's\n     * synchronous), and 'ready' will resolve when the socket is ready again.\n     */\n    reset() {\n        if (DBG0) console.trace(\"++++ ChannelSocket.reset() called ... for ChannelID:\", this.channelId)\n        if (this.#ws && this.#ws.websocket) {\n            if (this.#ws.websocket.readyState === 1) {\n                if (DBG0) console.log(\"[ChannelSocket] Closing websocket, with readystate:\", this.#ws.websocket.readyState)\n                this.#ws.websocket.close()\n            }\n            this.#ws.closed = true;\n            (this as any)[ChannelSocket.ReadyFlag] = false;\n            // we also delete the old entry on the active sockets list\n            ChannelApi.removeChannelSocket(this)\n            // and reset our readiness\n            this.channelSocketReady = this.#channelSocketReadyFactory()\n        }\n    }\n\n\n    // /** @type {JsonWebKey} */ @Memoize @Ready get exportable_owner_pubKey() { return this.keys.ownerKey }\n\n} /* class ChannelSocket */\n", "// (c) 2023-2024 384 (tm)\n\nimport {\n    _sb_assert, ChannelId, SBUserId,\n    SBUserPrivateKey, SBUserPublicKey, SBError,\n    SEP, DBG2, Memoize,\n    sbCrypto,\n} from 'src/common'\n\nconst DBG0 = false;\n\nimport { SBCrypto } from 'src/sbCrypto/SBCrypto'\n\nimport { SBFetch, SBApiFetch, setSBFetch, abortActiveFetches } from 'src/utils/fetch'\n\nimport { ChannelHandle, _check_ChannelHandle } from './ChannelHandle'\nimport { Message } from 'src/channel/Message'\n// import { ObjectHandle } from 'src/storage/ObjectHandle'\nimport { storageCoreKnownShards, fetchPayloadFromHandle } from 'src/storage/core'\nimport { SBStorageToken, validate_SBStorageToken } from 'src/storage/StorageToken'\nimport { Channel } from './Channel'\n\nimport { SBEventTarget } from 'src/utils/SBEventTarget'\nimport { ServerDeepHistory } from 'src/storage/MessageHistory';\n\nimport { StorageApi } from 'src/storage/StorageApi';\nimport { ChannelSocket } from 'src/channel/ChannelSocket';\n\nimport {\n    WEBSOCKET_PING_INTERVAL,\n    NEW_CHANNEL_MINIMUM_BUDGET\n} from './config'\n\n/**\n * Channel and Storage servers return the same structure.\n */\nexport interface SBServerInfo {\n    version: string,\n    channelServer: string,\n    storageServer: string,\n    jslibVersion?: string,\n}\n\nexport type ServerOnlineStatus = 'online' | 'offline' | 'unknown';\n\nconst SB_CHANNEL_API_BODY_SYMBOL = Symbol('SB_CHANNEL_API_BODY_SYMBOL')\n\n\n// ToDo: we should add a channel ID to every call that is the budget\n// source for any api costs (in case the server decides to charge)\n\n/**\n * Pretty much every api call needs a payload that contains the\n * api request, information about 'requestor' (user/visitor),\n * signature of same, time stamp, yada yada.\n * \n * Validator is {@link validate_ChannelApiBody}\n * @public\n */\nexport interface ChannelApiBody {\n    [SB_CHANNEL_API_BODY_SYMBOL]?: boolean,\n    channelId: ChannelId,\n    path: string,\n    userId: SBUserId,\n    userPublicKey: SBUserPublicKey,\n    isOwner?: boolean,\n    timestamp: number,\n    sign: ArrayBuffer\n    apiPayloadBuf?: ArrayBuffer,\n    apiPayload?: any, // if present, extracted from apiPayloadBuf\n}\n\n/**\n * Return self if it matches shape, otherwise throw. Extraneous properties are ignored\n * \n * @public\n */\nexport function validate_ChannelApiBody(body: any): ChannelApiBody {\n    if (!body) throw new SBError(`invalid ChannelApiBody (null or undefined)`)\n    else if (body[SB_CHANNEL_API_BODY_SYMBOL]) return body as ChannelApiBody\n    else if (\n        body.channelId && body.channelId.length === 43\n        && body.path && typeof body.path === 'string' && body.path.length > 0\n        && body.userId && typeof body.userId === 'string' && body.userId.length === 43\n        && body.userPublicKey && body.userPublicKey.length > 0\n        && (!body.isOwner || typeof body.isOwner === 'boolean')\n        && (!body.apiPayloadBuf || body.apiPayloadBuf instanceof ArrayBuffer)\n        && body.timestamp && Number.isInteger(body.timestamp)\n        && body.sign && body.sign instanceof ArrayBuffer\n    ) {\n        return { ...body, [SB_CHANNEL_API_BODY_SYMBOL]: true } as ChannelApiBody\n    } else {\n        if (DBG0) console.error('invalid ChannelApiBody ... trying to ingest:\\n', body)\n        throw new SBError(`invalid ChannelApiBody`)\n    }\n}\n\n// Note: 'ChannelApi' replaces 'Snackabra' object\n\n// todo: perhaps \"ChannelApi\" should be called \"ChannelServer\"?\n\n/**\n  * Main class. It corresponds to a single channel server. Most apps\n  * will only be talking to one channel server, but it is possible\n  * to have multiple instances of ChannelApi, each talking to a\n  * different channel server.\n  * \n  * Channel servers are generally associated with a single storage\n  * storage, one where the channel server is trusted to make storage\n  * allocation decisions.\n  * \n  * Takes a single parameter, the URL to the channel server.\n  * \n  * @example\n  * ```typescript\n  *     const sb = new ChannelApi('http://localhost:3845')\n  * ```\n  * \n  * Websocket server is always the same server (just different protocol),\n  * storage server is provided by '/api/v2/info' endpoint from the\n  * channel server.\n  * \n  * You can give an options parameter with various settings, including\n  * debug levels. For ease of use, you can just give a boolean value\n  * (eg 'true') to turn on basic debugging.\n  * \n  * It might be a bit confusing given it's name, but the \"channel API\"\n  * is provided by Channels. \n  * \n  * The 'sbFetch' option allows you to provide a custom fetch function\n  * for accessing channel and storage servers. For example, to provide\n  * a specific service binding for a web worker.\n  * \n  * ChannelApi also provides accurate online/offline status (if the\n  * channel server supports it). It will emit 'online' and 'offline'\n  * events, and you can check 'ChannelApi.onlineStatus'.\n */\nexport class ChannelApi extends SBEventTarget {\n    public static version = \"3.20241011.0\"\n\n    // max number of messages (with body) that can be requested at once; note that\n    // this is calibrated with the server, which might think differently\n    public static MAX_MESSAGE_REQUEST_SIZE = 128\n\n    // max number of message *keys* that can be requested at once;\n    // this is also the core DeepHistory sharding size\n    public static MAX_MESSAGE_SET_SIZE = ServerDeepHistory.MAX_MESSAGE_SET_SIZE\n\n    // these are known shards that we've seen and know the handle for; this is\n    // global. hashed on decrypted (but not extracted) contents.\n    // public static knownShards: Map<string, ObjectHandle> = new Map();\n    public static knownShards = storageCoreKnownShards\n\n    #channelServer: string\n    #storage: StorageApi\n\n    // globally paces (messaging) operations, and assures unique timestamps\n    public static lastTimeStamp = 0 // todo: x256 (string) format\n\n    // static abortPromises = new Map<symbol, Promise<unknown>>()\n\n    static #activeChannelSockets = new Set<ChannelSocket>()\n    public static isShutdown = false // flipped 'true' when closeAll() is called\n\n    public static lastTimestampPrefix: string = '0'.repeat(26)\n    static #latestPing = Date.now(); // updated by 'ping'\n\n    // public static online = true; // updated by 'ping'\n    public static onlineStatus: ServerOnlineStatus = 'unknown'\n\n    // overwritten by whatever most recent new ChannelApi()\n    // static defaultChannelServer = 'http://localhost:3845'\n    static defaultChannelServer = 'https://c3.384.dev' // ToDo: revisit\n\n    eventTarget = new SBEventTarget()\n\n    static shardBreakpoints: Set<string> = new Set()\n\n    fetchPayload = fetchPayloadFromHandle\n\n    constructor(\n        channelServer: string,\n        options?:\n            {\n                DBG?: boolean,\n                DBG2?: boolean,\n                sbFetch?: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>\n            }\n            | boolean\n    ) {\n        super() // ToDo: for some freaking reason can't do 'extends SBEventTarget'\n        _sb_assert(typeof channelServer === 'string', '[ChannelApi] Takes channel server URL as parameter')\n        if (channelServer) ChannelApi.defaultChannelServer = channelServer\n        if (DBG0) console.warn(`==== CREATING ChannelApi object generation: ${ChannelApi.version} (${ChannelApi.defaultChannelServer}) ====`)\n\n        if (typeof options === 'boolean') options = { DBG: options }\n\n        // sets global setting for what network/fetch operation to use\n        if (options && options.sbFetch) {\n            console.log(\"++++ ChannelApi constructor: setting custom fetch function ++++\" /*, options.sbFetch */)\n            setSBFetch(options.sbFetch)\n        }\n\n        this.#channelServer = channelServer // conceptually, you can have multiple channel servers\n        this.#storage = new StorageApi(channelServer)\n    }\n\n    /** Any operations that require a precise timestamp (such as messages) can use\n        this, to assure both pacing, uniqueness, and monotonically increasing\n        timestamps (on a per-Channel basis)\n        */\n    static async dateNow() {\n        let timestamp = Date.now()\n        if (timestamp <= ChannelApi.lastTimeStamp) {\n            timestamp = ChannelApi.lastTimeStamp + 1\n        }\n        ChannelApi.lastTimeStamp = timestamp\n        return timestamp\n    }\n\n    /**\n     * Call when somethings been heard from any channel server; this is used to\n     * track whether we are online or not.\n     */\n    static heardFromServer() {\n        ChannelApi.#latestPing = Date.now()\n        if (DBG2) console.log(\"[ChannelApi] heardFromServer() at\", ChannelApi.#latestPing)\n        switch (ChannelApi.onlineStatus) {\n            case 'offline':\n                if (DBG0) console.info(`[ChannelApi] [${ChannelApi.#latestPing}] we are now BACK online`)\n                this.emit('online')\n                this.emit('reconnected')\n                ChannelApi.onlineStatus = 'online'\n                break\n            case 'online':\n                // still online, unless socket count is zero\n                if (DBG2) console.info(\"[ChannelApi] heardFromServer() we are still online\")\n                break\n            case 'unknown':\n                if (DBG0) console.info(`[ChannelApi] [${ChannelApi.#latestPing}] we are now ONLINE`)\n                this.emit('online')\n                ChannelApi.onlineStatus = 'online'\n                break\n        }\n        this.checkUnknownNetworkStatus()\n    }\n\n    static checkUnknownNetworkStatus() {\n        if (ChannelApi.#activeChannelSockets.size === 0) {\n            if (ChannelApi.onlineStatus !== 'unknown')\n                this.emit('unknownNetworkStatus')\n            ChannelApi.onlineStatus = 'unknown'\n        }\n    }\n\n    /**\n     * Call when we haven't heard from any channel server for a while, and we\n     * think we should have.\n     */\n    static haveNotHeardFromServer() {\n        const timeNow = Date.now()\n        if (timeNow - ChannelApi.#latestPing > WEBSOCKET_PING_INTERVAL * 1.5) {\n            if (DBG2) console.warn(\"[ChannelApi] 'ping' message seems to have timed out\")\n            if (ChannelApi.onlineStatus === 'online') {\n                if (ChannelApi.#activeChannelSockets.size > 0) {\n                    if (DBG0) console.log(`[ChannelApi] [${timeNow}] OFFLINE`)\n                    ChannelApi.onlineStatus = 'offline'\n                    // this is the only spot in the code where we emit 'offline'\n                    this.emit('offline')\n                } else {\n                    if (DBG0) console.warn(\"[ChannelApi] [${timeNow}] No active channel sockets, online status is now UNKNOWN\")\n                    ChannelApi.onlineStatus = 'unknown'\n                    ChannelApi.onlineStatus = 'offline'\n                    this.emit('unknownNetworkStatus')\n                }\n            }\n        }\n        this.checkUnknownNetworkStatus()\n    }\n\n    static addChannelSocket(socket: ChannelSocket) {\n        if (DBG0) console.log(\"[ChannelApi] adding channel socket:\", socket)\n        ChannelApi.#activeChannelSockets.add(socket)\n    }\n\n    static removeChannelSocket(socket: ChannelSocket) {\n        if (DBG0) console.log(\"[ChannelApi] removing channel socket:\", socket)\n        if (ChannelApi.#activeChannelSockets.has(socket))\n            ChannelApi.#activeChannelSockets.delete(socket)\n        this.checkUnknownNetworkStatus()\n    }\n\n    /**\n     * \"Anonymous\" version of fetching a page, since unless it's locked you do not\n     * need to be authenticated to fetch a page (or even know what channel it's\n     * related to). This will return mime type and payload in 'convenient' format\n     * (eg string, blob, ArrayBuffer, or for JSON is 'any').\n     */\n    async getPage(prefix: string): Promise<{ type: string, payload: any }> {\n        if (DBG0) console.log(`==== ChannelApi.getPage: calling fetch with: ${prefix}`)\n        // return extractPayload(await SBApiFetch(this.#channelServer + '/api/v2/page/' + prefix))\n        const pageResponse = await SBFetch(this.#channelServer + '/api/v2/page/' + prefix)\n        if (pageResponse.ok) {\n            const pageType = pageResponse.headers.get('content-type')\n            if (!pageType) throw new SBError(`[getPage] Failed to fetch page '${prefix}'`)\n            let payLoad: any\n            if (pageType.includes('application/json')) {\n                payLoad = await pageResponse.json();\n            } else if (pageType.includes('text/') || pageType.includes('xml') || pageType.includes('html')) {\n                payLoad = await pageResponse.text();\n            } else if (pageType.includes('multipart/form-data')) {\n                throw new SBError(`[getPage] Multipart form data not supported`);\n            } else if (pageType.match(/(image|audio|video)\\//)) {\n                payLoad = await pageResponse.blob();\n            } else {\n                payLoad = await pageResponse.arrayBuffer();\n            }\n            return { type: pageType, payload: payLoad }\n        } else {\n            throw new SBError(`[getPage] Failed to fetch page '${prefix}'`)\n        }\n    }\n\n    // // deprecated ... used anywhere?\n    // attach(handle: ChannelHandle): Promise<Channel> {\n    //   return new Promise((resolve, reject) => {\n    //     if (handle.channelId) {\n    //       if (!handle.channelServer) {\n    //         handle.channelServer = this.#channelServer\n    //       } else if (handle.channelServer !== this.#channelServer) {\n    //         reject('[attach] ChannelHandle channelId does not match channelServer')\n    //       }\n    //       resolve(new Channel(handle))\n    //     } else {\n    //       reject('ChannelHandle missing channelId')\n    //     }\n    //   })\n\n    // }\n\n    /**\n     * Creates a new channel. Returns a promise to a @link(ChannelHandle} object.\n     * Note that this method does not connect to the channel, it just creates\n     * (authorizes) it and allocates storage budget.\n     *\n     * Note that if you have a full budget channel, you can budd off it (which\n     * will take all the storage). Providing a budget channel here will allows you\n     * to create new channels when a 'guest' on some other channel (for example),\n     * or to create a new channel with a minimal budget.\n     *\n     * ChannelApi.create() returns a handle, whereas Channel.create() returns the\n     * channel itself.\n     */\n    create(budgetChannel: Channel): Promise<ChannelHandle>\n    create(storageToken: SBStorageToken): Promise<ChannelHandle>\n    create(budgetChannelOrToken: Channel | SBStorageToken): Promise<ChannelHandle> {\n        _sb_assert(budgetChannelOrToken !== null, '[create channel] Invalid parameter (null)')\n        return new Promise<ChannelHandle>(async (resolve, reject) => {\n            try {\n                var _storageToken: SBStorageToken | undefined\n                if (budgetChannelOrToken instanceof Channel) {\n                    const budget = budgetChannelOrToken as Channel\n                    await budget.ready // make sure it's ready\n                    if (!budget.channelServer) budget.channelServer = this.#channelServer\n                    _storageToken = await budget.getStorageToken(NEW_CHANNEL_MINIMUM_BUDGET)\n                } else {\n                    // try to read it as a storage token\n                    try {\n                        _storageToken = validate_SBStorageToken(budgetChannelOrToken as SBStorageToken)\n                    } catch (e) {\n                        reject('Invalid parameter to create() - need a token or a budget channel')\n                        return\n                    }\n                }\n                _sb_assert(_storageToken, '[create channel] Failed to get storage token for the provided channel')\n\n                // create a fresh channel (set of keys)\n                const channelKeys = await new Channel().ready\n                channelKeys.channelServer = this.#channelServer\n                // channelKeys.create(_storageToken!)\n                //   .then((handle) => { resolve(handle) })\n                //   .catch((e) => { reject(e) })\n                channelKeys.create(_storageToken!)\n                    .then((c) => { resolve(c.handle) })\n                    .catch((e) => { reject(e) })\n            } catch (e) {\n                const msg = `Creating channel did not succeed: ${e}`; console.error(msg); reject(msg);\n            }\n        })\n    }\n\n    /**\n     * Connects to a channel on this channel server. Returns a @link{Channel}\n     * object unless you provide an onMessage handler, in which case it\n     * returns a @link{ChannelSocket}.\n     */\n    connect(handleOrKey: ChannelHandle | SBUserPrivateKey): Channel\n    connect(handleOrKey: ChannelHandle | SBUserPrivateKey, onMessage: (m: Message | string) => void): ChannelSocket\n    connect(handleOrKey: ChannelHandle | SBUserPrivateKey, onMessage?: (m: Message | string) => void): Channel | ChannelSocket {\n        let handle: ChannelHandle\n        if (typeof handleOrKey === 'string') {\n            handle = {\n                userPrivateKey: handleOrKey as SBUserPrivateKey\n            }\n        } else {\n            handle = handleOrKey as ChannelHandle\n            if (!_check_ChannelHandle(handle))\n                throw new SBError('[ChannelApi.connect] Invalid parameter (not a channel handle)')\n        }\n        _sb_assert(handle !== undefined && handle && handle.userPrivateKey, '[ChannelApi.connect] Invalid parameter (at least need owner private key)')\n        if (handle.channelServer && handle.channelServer !== this.#channelServer)\n            throw new SBError(`[ChannelApi.connect] channel server in handle ('${handle.channelServer}') does not match what SB was set up with ('${this.#channelServer}')`)\n        if (!handle.channelServer) handle.channelServer = this.#channelServer\n        if (DBG0) console.log(\"++++ ChannelApi.connect() ++++\", handle)\n        if (onMessage)\n            return new ChannelSocket(handle, onMessage)\n        else\n            return new Channel(handle)\n    }\n\n    /**\n     * Closes all active operations and connections, including any fetches\n     * and websockets. This closes EVERYTHING (globally).\n     */\n    static async closeAll() {\n        console.log(SEP, \"==== ChannelApi.closeAll() called ====\", SEP)\n        if (ChannelApi.isShutdown) {\n            console.warn(\"closeAll() called, but it was already shutting down\")\n            return; // only one instance of closeAll()\n        }\n        ChannelApi.isShutdown = true;\n        abortActiveFetches()\n\n        console.log(\"[ChannelApi] [closeAll] closing all active channel sockets:\", ChannelApi.#activeChannelSockets)\n        await Promise.all(Array.from(ChannelApi.#activeChannelSockets).map(close));\n\n        // we block a fraction of a second here to give everything time to propagate\n        console.log(\"[ChannelApi] [closeAll] ... waiting for everything to close ...\")\n        await new Promise(resolve => setTimeout(resolve, 75));\n    }\n\n    /**\n     * Gets server information on provided server. Note, this will return 'undefined'\n     * if the server is not reachable (it will not throw).\n     */\n    static async getServerInfo(server: string = ChannelApi.defaultChannelServer): Promise<SBServerInfo | undefined> {\n        try {\n            const r = await SBApiFetch(server + '/api/v2/info');\n            if (DBG0) console.log(SEP, `[getServerInfo] Fetching server info from '${server}' ++++\\n`, r, SEP)\n            if (r && r.maxMessageRequestSize)\n                ChannelApi.MAX_MESSAGE_REQUEST_SIZE = r.maxMessageRequestSize\n            return r\n        } catch (e) {\n            if (DBG0) console.warn(`[getServerInfo] Could not access server '${server}'`)\n            return undefined\n        }\n    }\n\n    /*\n     * Will cause 'debugger' to be called when the specified shard is ever fetched,\n     * facilitating debugging.\n     */\n    static traceShard(id: string) {\n        ChannelApi.shardBreakpoints.add(id)\n    }\n\n    /** Returns the storage API */\n    @Memoize get storage() { return this.#storage; }\n\n    /** Returns matching storage server */\n    @Memoize async getStorageServer(): Promise<string> {\n        return this.storage.getStorageServer()\n    }\n\n    /** Returns the crypto API */\n    get crypto(): SBCrypto { return sbCrypto; }\n\n    /** Returns version */\n    get version(): string { return ChannelApi.version; }\n\n} /* class ChannelApi */\n", "// (c) 2023 384 (tm)\n\nexport const strongpinVersion = \"0.8.0\";\n\n// export const base32mi05 = \"012345ABCDMPQRTVXJrEYWH8GLN7dkfu\" // \"v05.02\"\n// export const base32mi05 = \"0123456789ADMQRTXJrEYWCPBdHLNukf\" // \"v05.03\"\n// export const base32mi05 = \"0123456789ADMRTXQjrEyWCLBdHpNufk\" // \"v05.04\" (strongpinVersion 0.5.6)\n\nexport const base32mi05 = \"0123456789ADMRTxQjrEywcLBdHpNufk\" // \"v05.05\" (strongpinVersion ^0.6.0)\n\n/**\n * v05.05 (strongpinVersion ^0.6.0)\n * \n * In parity-pair order:\n * \n * 0123456789ADMRTx\n * QjrEywcLBdHpNufk\n * \n * Note: in ascii order:\n * \n * 0123456789\n * ABDEHLMNQRT\n * cdfjkpruwxy\n * \n * (Current base32mi 'v05.05')\n * \n * @public\n */\nexport const base32mi = base32mi05;\n\n// const strictBase62Regex = new RegExp(`^[${base62}]{4}$`); // strict, in case we want to do that\nconst base62Regex = new RegExp(`[${base32mi}.concat(' ')]`); // lenient, allows spaces\n\n/** @public */\nexport type StrongPinOptions = { extraEntropy?: string, enforceMix?: boolean, setCount?: number }\n\n/**\n * encodes a 19-bit number into a 4-character string\n * @public\n * */\nexport function encodeStrongPin(num: number): string {\n    const charMap = base32mi;\n    if (num < 0 || num > 0x7ffff)\n        throw new Error('Input number is out of range. Expected a 19-bit integer.');\n    let bitsArr15 = [\n        (num >> 14) & 0x1f,\n        (num >> 9) & 0x1f,\n        (num >> 4) & 0x1f,\n        (num) & 0x0f\n    ];\n    bitsArr15[3] |= (bitsArr15[0] ^ bitsArr15[1] ^ bitsArr15[2]) & 0x10;\n    return bitsArr15.map(val => charMap[val]).join('');\n}\n\n// generates a single 4-character set, does NOT enforce mix\nasync function _generateStrongPin(options?: StrongPinOptions): Promise<string> {\n    const { extraEntropy } = options || {}\n    let num, encoded;\n    const hashArray = extraEntropy\n    ? new Uint32Array(await crypto.subtle.digest('SHA-256', new TextEncoder().encode(extraEntropy)))\n    : new Uint32Array([0]); // set to zero so has no effect\n    const array = new Uint32Array(1);\n    globalThis.crypto.getRandomValues(array);\n    num = (array[0] ^ hashArray[0]) & 0x7FFFF; // xor in entropy, extract 19 bits\n    encoded = encodeStrongPin(num);\n    return encoded;\n}\n\n/**\n * Generates a strongpin with \"setCount\" sets of 4-characters each.\n * (19 bits of entropy per set) in string format.\n * \n * Options:\n *  extraEntropy: string,\n *  enforceMix: boolean,\n *  setCount: number\n * \n * ''enforceMix'' is a boolean that, if true, will ensure that the\n * generated strongpin has at least one of each: number, lowercase,\n * uppercase. With a single set, this will frequently cost one\n * or even two bits of entropy; with two sets, it will occasionally\n * cost one bit; with three sets, it will rarely cost one bit.\n * With four sets (the 'secure' setting), you lose less than\n * 1/100 of one bit of entropy (out of 76).\n * @public\n * \n */\nexport async function generateStrongPinNN(options?: StrongPinOptions): Promise<string> {\n    let { enforceMix, setCount } = options || {}\n    let res, i = 0\n    if (!setCount) setCount = 1\n    if (setCount < 1 || setCount > 40)\n        // we can handle any length but if it's too long, it's probably a mistake\n        throw new Error('setCount must be between 1 and 40 (upper limit is arbitrary).')\n\n    // if \"enforceMix\" is true, then we iterate to ensure that the generated\n    // strongpin has at least one of each: number, lowercase, uppercase\n    do {\n        res = (await Promise.all(Array(setCount).fill(null)\n            .map(() => _generateStrongPin(options))))\n            .join(' ');\n\n        // LCOV_EXCL_START\n        if (++i > 32) throw new Error('Unable to generate a strongpin16 after 32 attempts (should never happen even with singleton sets).'); // LCOV_EXCL_LINE\n        // LCOV_EXCL_STOP\n\n    } while ((enforceMix) && (!(/[0-9]/.test(res) && /[a-z]/.test(res) && /[A-Z]/.test(res))));\n    return res;\n}\n\n/**\n * Generates a strongpin with A SINGLE set of 4-characters.\n * (19 bits of entropy).\n * \n *  Convenience function.\n * @public\n */\nexport async function generateStrongPin(options?: StrongPinOptions): Promise<string> {\n    let options2 = { ...options, setCount: 1 } as StrongPinOptions\n    return generateStrongPinNN(options2)\n}\n\n/**\n * generateStrongPin16()\n * \n * Generates a strongpin with 4 sets of 4-characters each.\n * (19 bits of entropy per set, 76 bits total).\n * \n * Convenience function.\n * @public\n */\nexport async function generateStrongPin16(options?: StrongPinOptions): Promise<string> {\n    let options2 = { ...options, setCount: 4 } as StrongPinOptions\n    return generateStrongPinNN(options2)\n}\n\n\n/**\n * does a \"pre-processing\", if there are substitions to be suggested,\n * it will perform them.  the callee should check if the returned\n * string has changed, in which case you should confirm with the user\n * something like 'did you mean to type this?'.  if the returned\n * string is the same as the input string, then there are no\n * substitutions to be made (unamgibuous).\n * \n * The callee should enforce input matches ''/^[a-zA-Z0-9]*$/''.\n * @public\n */\nexport function processStrongPin(str: string): string {\n    const substitutions: { [key: string]: string } = {\n        // deliberately overly clear mapping\n        \"o\": \"0\", \"O\": \"0\", \"i\": \"1\", \"I\": \"1\",\n        \"l\": \"1\", \"z\": \"2\", \"Z\": \"2\", \"s\": \"5\",\n        \"S\": \"5\", \"b\": \"6\", \"G\": \"6\", \"a\": \"9\",\n        \"g\": \"9\", \"q\": \"9\", \"m\": \"M\", \"t\": \"T\",\n        \"X\": \"x\", \"J\": \"j\", \"e\": \"E\", \"Y\": \"y\",\n        \"W\": \"w\", \"C\": \"c\", \"P\": \"p\", \"n\": \"N\",\n        \"h\": \"N\", \"U\": \"u\", \"v\": \"u\", \"V\": \"u\",\n        \"F\": \"f\", \"K\": \"k\"\n    }\n    let processedStr = '';\n    for (let char of str)\n        processedStr += substitutions[char] || char;\n    return processedStr;\n}\n\n/**\n    will take a (correctly formed) 4-character string and return the\n    original 19-bit number.  if the parity is incorrect, it will\n    return null, meaning, one of the four characters were typed in\n    incorrectly - for example, an \"8\" was entered that should be a \"B\".\n    the callee should check for null and ask the user something like\n    'are you sure about these four characters?'.\n    @public\n */\nexport function decodeStrongPin(encoded: string): number | null {\n    if (!base62Regex.test(encoded))\n        throw new Error(`Input string contains invalid characters (${encoded}) - use 'process()'.`);\n    let bin = Array.from(encoded)\n        .map(c => base32mi.indexOf(c))\n    if (bin.reduce((a, b) => (a ^ b)) & 0x10)\n        return null;\n    return (((bin[0] * 32 + bin[1]) * 32 + bin[2]) * 16 + (bin[3] & 0x0f));\n}\n", "// (c) 2023-2024 384 (tm)\n\nimport { base64ToArrayBuffer, arrayBufferToBase64url } from \"src/utils/b64\";\nimport { base62ToArrayBuffer, arrayBufferToBase62 } from \"src/utils/b62\";\nimport { jwkStruct } from \"./SB384\";\n\nimport {\n    _sb_assert, SBUserId,\n    SBUserPrivateKey, SBUserPublicKey, SBError,\n    assemblePayload,\n    sbCrypto,\n} from 'src/common'\n\nimport { importKey } from 'src/sbCrypto/core'\n\nconst DBG0 = false;\n\nimport { ChannelMessage } from 'src/channel/ChannelMessage'\nimport { ChannelApi } from 'src/channel/ChannelApi'\nimport { _check_ChannelHandle } from 'src/channel/ChannelHandle'\nimport { _check_SBChannelData } from 'src/channel/Channel'\n\nexport enum KeyPrefix {\n    SBPublicKey = \"PNk\",\n    SBPrivateKey = \"Xj3\",\n    SBDehydratedKey = \"XjZ\",\n}\n\nexport enum KeySubPrefix {\n    CompressedEven = \"2\",\n    CompressedOdd = \"3\",\n    Uncompressed = \"4\",\n    Dehydrated = \"x\",\n}\n\n/**\n * for key compression/decompression; extract sign of y-coordinate (0 is even)\n * @internal\n * */\nexport function ySign(y: string | ArrayBuffer): 0 | 1 {\n    if (typeof y === 'string')\n        y = base64ToArrayBuffer(y);\n    const yBytes = new Uint8Array(y);\n    return (yBytes[yBytes.length - 1] & 1) === 1 ? 1 : 0;\n}\n\n/**\n * Modular exponentiation (BigInt version)\n * @internal\n */\nfunction modPow(base: bigint, exponent: bigint, modulus: bigint): bigint {\n    if (modulus === 1n) return 0n;\n    let result = 1n;\n    base = base % modulus;\n    while (exponent > 0n) {\n        if (exponent % 2n === 1n)\n            result = (result * base) % modulus;\n        exponent = exponent >> 1n;\n        base = (base * base) % modulus;\n    }\n    return result;\n}\n\n/**\n * Decompresses a compressed P384 key.\n * signY is 0 or 1 (even or odd).\n * \n * @internal\n */\nfunction decompressP384(xBase64: string, signY: number) {\n    // Consts for secp384r1 curve\n    const prime = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'),\n        b = BigInt('0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef'),\n        pIdent = (prime + 1n) / 4n;\n    const xBytes = new Uint8Array(base64ToArrayBuffer(xBase64));\n    const xHex = '0x' + Array.from(xBytes, byte => byte.toString(16).padStart(2, '0')).join('');\n    var x = BigInt(xHex);\n    var y = modPow(x * x * x - 3n * x + b, pIdent, prime);\n    if (y % 2n !== BigInt(signY))\n        y = prime - y;\n    // we now need to convert 'y' to a base64 string\n    const yHex = y.toString(16).padStart(96, '0');\n    const yBytes = new Uint8Array(yHex.match(/.{1,2}/g)!.map(byte => parseInt(byte, 16)));\n    const yBase64 = arrayBufferToBase64url(yBytes);\n    return { x: xBase64, y: yBase64 };\n}\n\n/**\n * Takes a public or private key string, returns a populated jwkStruct.\n * If a key is dehydrated (missing x), x must be provided (base64, eg jwk.x).\n * Any issues and it will return undefined.\n * @public\n */\nexport function parseSB384string(input: SBUserPublicKey | SBUserPrivateKey): jwkStruct | undefined {\n    try {\n        if (input.length <= 4) return undefined;\n        const prefix = input.slice(0, 4);\n        const data = input.slice(4);\n        switch (prefix.slice(0, 3)) {\n            case KeyPrefix.SBPublicKey: {\n                switch (prefix[3]) {\n                    case KeySubPrefix.Uncompressed: {\n                        const combined = base62ToArrayBuffer(data)\n                        if (combined.byteLength !== (48 * 2)) return undefined;\n                        const yBytes = combined.slice(48, 96);\n                        return {\n                            x: arrayBufferToBase64url(combined.slice(0, 48)),\n                            y: arrayBufferToBase64url(yBytes),\n                            ySign: ySign(yBytes)\n                        };\n                    }\n                    case KeySubPrefix.CompressedEven:\n                    case KeySubPrefix.CompressedOdd: {\n                        const ySign = prefix[3] === KeySubPrefix.CompressedEven ? 0 : 1;\n                        const xBuf = base62ToArrayBuffer(data);\n                        if (xBuf.byteLength !== 48) return undefined;\n                        const { x: xBase64, y: yBase64 } = decompressP384(arrayBufferToBase64url(xBuf), ySign);\n                        return {\n                            x: xBase64,\n                            y: yBase64,\n                            ySign: ySign,\n                        };\n                    }\n                    default: { console.error(\"KeySubPrefix not recognized\"); }\n                }\n            } break;\n            case KeyPrefix.SBPrivateKey: {\n                switch (prefix[3]) {\n                    case KeySubPrefix.Uncompressed: {\n                        const combined = base62ToArrayBuffer(data)\n                        if (combined.byteLength !== (48 * 3)) return undefined;\n                        const yBytes = combined.slice(48, 96);\n                        return {\n                            x: arrayBufferToBase64url(combined.slice(0, 48)),\n                            y: arrayBufferToBase64url(yBytes),\n                            ySign: ySign(yBytes),\n                            d: arrayBufferToBase64url(combined.slice(96, 144))\n                        };\n                    }\n                    case KeySubPrefix.CompressedEven:\n                    case KeySubPrefix.CompressedOdd: {\n                        const ySign = prefix[3] === KeySubPrefix.CompressedEven ? 0 : 1;\n                        const combined = base62ToArrayBuffer(data)\n                        if (combined.byteLength !== (48 * 2)) return undefined;\n                        const xBuf = combined.slice(0, 48);\n                        const { x: xBase64, y: yBase64 } = decompressP384(arrayBufferToBase64url(xBuf), ySign);\n                        return {\n                            x: xBase64,\n                            y: yBase64,\n                            ySign: ySign,\n                            d: arrayBufferToBase64url(combined.slice(48, 96))\n                        };\n                    }\n                    case KeySubPrefix.Dehydrated: {\n                        console.error(\"parseSB384string() - you need to rehydrate first ('hydrateKey()')\");\n                        return undefined;\n                    }\n                    default: { console.error(\"KeySubPrefix not recognized\"); }\n                }\n            } break;\n            default: {\n                console.error(\"KeyPrefix not recognized\");\n            }\n        }\n        // all paths to this point are failures to parse\n        return undefined\n    } catch (e) {\n        console.error(\"parseSB384string() - malformed input, exception: \", e);\n        return undefined;\n    }\n}\n\n// @internal\nexport function xdySignToPrivateKey(x: string, d: string, ySign: 0 | 1): SBUserPrivateKey | undefined {\n    if (!x || x.length !== 64 || !d || d.length !== 64 || ySign === undefined) return undefined;\n    const combined = new Uint8Array(2 * 48);\n    combined.set(base64ToArrayBuffer(x), 0);\n    combined.set(base64ToArrayBuffer(d), 48);\n    return KeyPrefix.SBPrivateKey + (ySign === 0 ? KeySubPrefix.CompressedEven : KeySubPrefix.CompressedOdd) + arrayBufferToBase62(combined)\n}\n\n/**\n * 'hydrates' a key - if needed; if it's already good on hydration, just returns it.\n * Providing pubKey (from other source) is optional so that you can use this function\n * to easily confirm that a key is hydrated, it will return undefined if it's not.\n * @public\n */\nexport function hydrateKey(privKey: SBUserPrivateKey, pubKey?: SBUserPrivateKey): SBUserPrivateKey | undefined {\n    if (privKey.length <= 4) return undefined;\n    const prefix = privKey.slice(0, 4);\n    switch (prefix.slice(0, 3)) {\n        case KeyPrefix.SBPublicKey:\n            return privKey;\n        case KeyPrefix.SBPrivateKey: {\n            switch (prefix[3]) {\n                case KeySubPrefix.Uncompressed:\n                case KeySubPrefix.CompressedEven:\n                case KeySubPrefix.CompressedOdd:\n                    return privKey;\n                case KeySubPrefix.Dehydrated: {\n                    if (!pubKey) {\n                        console.error(\"hydrateKey() - you need to provide pubKey to hydrate\");\n                        return undefined;\n                    }\n                    const privKeyData = privKey.slice(4);\n                    const combined = base62ToArrayBuffer(privKeyData)\n                    const dBytes = combined.slice(0, 48);\n                    const d = arrayBufferToBase64url(dBytes);\n                    const jwk = parseSB384string(pubKey);\n                    if (!jwk || !jwk.x || jwk.ySign === undefined) {\n                        console.error(\"hydrateKey() - failed to parse public key\");\n                        return undefined;\n                    }\n                    return xdySignToPrivateKey(jwk.x!, d, jwk.ySign);\n                }\n                default: { console.error(\"KeySubPrefix not recognized\"); }\n            }\n        } break;\n        default: {\n            console.error(\"KeyPrefix not recognized\");\n        }\n    }\n    return undefined\n}\n\n/**\n * This is eseentially web standard type AesGcmParams, but with properties being\n * optional - they'll be filled in at the \"bottom layer\" if missing (and if\n * needed).\n * \n * @internal\n */\nexport interface EncryptParams {\n    name?: string;\n    iv?: ArrayBuffer;\n    additionalData?: BufferSource;\n    tagLength?: number;\n}\n\nimport {\n    encodeStrongPin, decodeStrongPin,\n    generateStrongPin, generateStrongPin16,\n    processStrongPin\n} from \"./strongpin\";\n\nimport { base32mi } from \"./strongpin\";\n\n/**\n  * Utility class for SB crypto functions. Generally we use an object\n  * instantiation of this (typically ''sbCrypto'') as a global variable.\n  *\n  * 'SBCrypto' provides a class with wrappers for subtle crypto, as well as some\n  * SB-specific utility functions.\n  *\n  * Typically a public jsonwebkey (JWK) will look something like this in json\n  * string format:\n  *\n  *                        \"{\\\"crv\\\":\\\"P-384\\\",\\\"ext\\\":true,\\\"key_ops\\\":[],\\\"kty\\\":\\\"EC\\\",\n  *                        \\\"x\\\":\\\"9s17B4i0Cuf_w9XN_uAq2DFePOr6S3sMFMA95KjLN8akBUWEhPAcuMEMwNUlrrkN\\\",\n  *                        \\\"y\\\":\\\"6dAtcyMbtsO5ufKvlhxRsvjTmkABGlTYG1BrEjTpwrAgtmn6k25GR7akklz9klBr\\\"}\"\n  *\n  * A private key will look something like this:\n  *\n  *                       \"{\\\"crv\\\":\\\"P-384\\\",\n  *                       \\\"d\\\":\\\"KCJHDZ34XgVFsS9-sU09HFzXZhnGCvnDgJ5a8GTSfjuJQaq-1N2acvchPRhknk8B\\\",\n  *                       \\\"ext\\\":true,\\\"key_ops\\\":[\\\"deriveKey\\\"],\\\"kty\\\":\\\"EC\\\",\n  *                       \\\"x\\\":\\\"rdsyBle0DD1hvp2OE2mINyyI87Cyg7FS3tCQUIeVkfPiNOACtFxi6iP8oeYt-Dge\\\",\n  *                       \\\"y\\\":\\\"qW9VP72uf9rgUU117G7AfTkCMncJbT5scIaIRwBXfqET6FYcq20fwSP7R911J2_t\\\"}\"\n  *\n  * These are elliptic curve keys, we use P-384 (secp384r1). Mostly you will\n  * just be using the 'class SB384' object, and all the details are handled.\n  *\n  * The main (EC) RFC is 7518\n  * (https://datatracker.ietf.org/doc/html/rfc7518#section-6.2), supervised by\n  * IESG except for a tiny addition of one parameter (\"ext\") that is supervised\n  * by the W3C Crypto WG (https://w3c.github.io/webcrypto/#ecdsa).\n  *\n  * EC in JWK has a number of parameters, but for us the only required ones are:\n  *\n  *  crv: the curve (P-384 in this case) x: the x coordinate of the public key\n  *  y: the y coordinate of the public key d: the private key (if it's a private\n  *  key) kty: the key type (EC in this case) ext: the 'extractable' flag\n  *  key_ops: (optional) permitted the key operations\n  *\n  * All these components are implied except for x, y, and d. Various ways of\n  * encoding (eg either just 'd', or just 'x', or 'x,y', or 'd,x', or 'd,x,y')\n  * are handled using a prefix system on the keys when represented as a single\n  * (base62) string.\n  *\n  * Starting with 'P' means public, 'X' means private.\n  *\n  *  \"PNk4\": public key; x and y are present, the rest implied\n  *  [KeyPrefix.SBPublicK+ey] \"PNk2\": public key, compressed, y is even \"PNK3\":\n  *  public key, compressed, y is odd\n  *\n  *  \"Xj34\": private key: x, y, d are present, the rest implied\n  *  [KeyPrefix.SBPrivateKey] \"Xj32\": private key, compressed, has x and d, y is\n  *  even \"Xj33\": private key, compressed, has x and d, y is odd\n  *\n  *  \"XjZx\": private key, \"dehydrated\"; only d is present, x needed from other\n  *  source (and y is even)\n  *\n  * The fourth character encoded in enum KeySubPrefix below. Note that we encode\n  * using base62 'externally', but 'x', 'y', and 'd' internally are in base64.\n  *\n  * Keys default to being compressed.\n  *\n  * For the AES key, we don't have an internal format; properties would include:\n  *\n  *  \"k\": the key itself, encoded as base64 \"alg\": \"A256GCM\" \"key_ops\":\n  *  [\"encrypt\", \"decrypt\"] \"kty\": \"oct\"\n  *\n  * Only the \"k\" property is required, the rest are implied, so it's trivial to\n  * track. Whenever on the wire A256GCM would just require base62 encoding (into\n  * 43 characters).\n  *\n  * The above (3-letter) prefixes we've generated randomly to hopefully avoid\n  * collisions with other formats. For 2/3/4 we follow common (wire) formats.\n  * There aren't conventions for what we're calling 'dehydrated' keys (they sort\n  * of appear in crypto currency wallets).\n  *\n  * The above in combination with Channels:\n  *\n  * - private key: always d, x, ySign\n  * - public key: always x, ySign\n  * - channel key: same as public key\n  *\n  * channelId: can be derived from (channel) public key (from x,y)\n  *\n  * when you join a channel, you can join with only the public key of channel,\n  * or channelId; if you join just with channelId, you need channel server (to\n  * fetch public key)\n  *\n  * special format: dehydrated private key: just d (x through some other means)\n  *\n  * @public\n  */\nexport class SBCrypto {\n\n    // cannot be static since we need to access through \"__\"\n    strongpin = {\n        encode: encodeStrongPin,\n        decode: decodeStrongPin,\n        generate: generateStrongPin,\n        generate16: generateStrongPin16,\n        process: processStrongPin,\n        base32mi: base32mi,\n    }\n\n    // re-exporting any core functions\n    public importKey = importKey\n\n    /**\n     * Hashes and splits into two (h1 and h1) signature of data, h1\n     * is used to request (salt, iv) pair and then h2 is used for\n     * encryption (h2, salt, iv).\n     * @public\n     */\n    generateIdKey(buf: ArrayBuffer): Promise<{ idBinary: ArrayBuffer, keyMaterial: ArrayBuffer }> {\n        if (!(buf instanceof ArrayBuffer)) throw new TypeError('Input must be an ArrayBuffer');\n        return new Promise((resolve, reject) => {\n            try {\n                crypto.subtle.digest('SHA-512', buf).then((digest) => {\n                    const _id = digest.slice(0, 32);\n                    const _key = digest.slice(32);\n                    resolve({\n                        idBinary: _id,\n                        keyMaterial: _key\n                    })\n                })\n            } catch (e) {\n                reject(e)\n            }\n        })\n    }\n\n    /**\n     * Generates standard ``ECDH`` keys using ``P-384``.\n     * @public\n     */\n    async generateKeys(): Promise<CryptoKeyPair> {\n        try {\n            return await crypto.subtle.generateKey({ name: 'ECDH', namedCurve: 'P-384' }, true, ['deriveKey']);\n        } catch (e) {\n            throw new SBError('generateKeys() exception (' + e + ')');\n        }\n    }\n\n    /**\n     * Export key; note that if there's an issue, this will return undefined.\n     * That can happen normally if for example the key is restricted (and\n     * not extractable).\n     * @public\n     */\n    async exportKey(format: 'jwk', key: CryptoKey) {\n        return crypto.subtle\n            .exportKey(format, key)\n            .catch(() => {\n                if (DBG0) console.warn(`... exportKey() protested, this just means we treat this as undefined`)\n                return undefined\n            })\n    }\n\n    /**\n     * Encrypt data using a key.\n     * @public\n     */\n    async encrypt(data: BufferSource, key: CryptoKey, params: EncryptParams): Promise<ArrayBuffer> {\n        if (data === null) throw new SBError('no contents')\n        if (!params.iv) throw new SBError('no nonce')\n        if (!params.name) params.name = 'AES-GCM';\n        else _sb_assert(params.name === 'AES-GCM', \"Must be AES-GCM (L412)\")\n        return crypto.subtle.encrypt(params as AesGcmParams, key, data);\n    }\n\n    // async wrap(\n    //   body: any,\n    //   sender: SBUserId,\n    //   encryptionKey: CryptoKey,\n    //   salt: ArrayBuffer,\n    //   signingKey: CryptoKey,\n    //   /* options?: MessageOptions */): Promise<ChannelMessage> {\n    //   _sb_assert(body && sender && encryptionKey && signingKey, \"wrapMessage(): missing required parameter(2)\")\n    //   const payload = assemblePayload(body);\n    //   _sb_assert(payload, \"wrapMessage(): failed to assemble payload\")\n    //   _sb_assert(payload!.byteLength < MAX_SB_BODY_SIZE,\n    //     `wrapMessage(): body must be smaller than ${MAX_SB_BODY_SIZE / 1024} KiB (we got ${payload!.byteLength / 1024} KiB)})`)\n    //   _sb_assert(salt, \"wrapMessage(): missing salt\")\n    //   if (DBG2) console.log(\"will wrap() body, payload:\\n\", SEP, \"\\n\", body, \"\\n\", SEP, payload, \"\\n\", SEP)\n    //   const iv = crypto.getRandomValues(new Uint8Array(12))\n    //   const timestamp = await ChannelApi.dateNow()\n    //   const view = new DataView(new ArrayBuffer(8));\n    //   view.setFloat64(0, timestamp);\n    //   var message: ChannelMessage = {\n    //     f: sender,\n    //     c: await sbCrypto.encrypt(payload!, encryptionKey, { iv: iv, additionalData: view }),\n    //     iv: iv,\n    //     salt: salt,\n    //     s: await sbCrypto.sign(signingKey, payload!),\n    //     ts: timestamp,\n    //     // unencryptedContents: body, // 'original' payload' .. we do NOT include this\n    //   }\n    //   if (DBG2) console.log(\"wrap() message is\\n\", message)\n    //   // if (options) {\n    //   //   if (options.sendTo) message.t = options.sendTo\n    //   //   if (options.ttl) message.ttl = options.ttl\n    //   //   if (options.subChannel) throw new SBError(`wrapMessage(): subChannel not yet supported`)\n    //   // }\n    //   // try {\n    //   //   message = validate_ChannelMessage(message)\n    //   // } catch (e) {\n    //   //   const msg = `wrapMessage(): failed to validate message: ${e}`\n    //   //   console.error(msg)\n    //   //   throw new SBError(msg)\n    //   // }\n    //   return message\n    // }\n\n    /**\n     * Internally this is Deprecated, but we retain a simplified version for now; for example,\n     * some unit tests use this to 'track' higher-level primitives. This used to be\n     * the main approach to boot-strap a ChannelMessage object; this is now divided into\n     * sync and async phases over internal channel queues.\n     * @internal\n     */\n    async wrap(\n        body: any,\n        sender: SBUserId,\n        encryptionKey: CryptoKey,\n        salt: ArrayBuffer,\n        signingKey: CryptoKey\n    ): Promise<ChannelMessage> {\n        const payload = assemblePayload(body);\n        const iv = crypto.getRandomValues(new Uint8Array(12))\n        const timestamp = await ChannelApi.dateNow()\n        const view = new DataView(new ArrayBuffer(8));\n        view.setFloat64(0, timestamp);\n        return ({\n            f: sender,\n            c: await sbCrypto.encrypt(payload!, encryptionKey, { iv: iv, additionalData: view }),\n            iv: iv,\n            salt: salt,\n            s: await sbCrypto.sign(signingKey, payload!),\n            ts: timestamp,\n        })\n    }\n\n\n    // unwrapShard(k: CryptoKey, o: ChannelMessage): Promise<ArrayBuffer> {\n    //   return new Promise(async (resolve, reject) => {\n    //     try {\n    //       const { c: t, iv: iv } = o\n    //       _sb_assert(t, \"[unwrap] No contents in encrypted message (probably an error)\")\n    //       const d = await crypto.subtle.decrypt({ name: 'AES-GCM', iv: iv }, k, t!)\n    //       resolve(d)\n    //     } catch (e) {\n    //       // not an error per se, for example could just be wrong key\n    //       if (DBG0) console.error(`unwrap(): cannot unwrap/decrypt - rejecting: ${e}`)\n    //       if (DBG2) console.log(\"message was \\n\", o)\n    //       reject(e);\n    //     }\n    //   });\n    // }\n\n    /**\n     * Basic signing\n     * @public\n     */\n    sign(signKey: CryptoKey, contents: ArrayBuffer) {\n        // return crypto.subtle.sign('HMAC', secretKey, contents);\n        return crypto.subtle.sign({ name: \"ECDSA\", hash: { name: \"SHA-384\" }, }, signKey, contents)\n    }\n\n    /** Basic verification */\n    verify(verifyKey: CryptoKey, sign: ArrayBuffer, contents: ArrayBuffer) {\n        // return crypto.subtle.verify('HMAC', verifyKey, sign, contents)\n        return crypto.subtle.verify({ name: \"ECDSA\", hash: { name: \"SHA-384\" }, }, verifyKey, sign, contents)\n    }\n\n    /** Standardized 'str2ab()' function, string to array buffer. */\n    str2ab(string: string): Uint8Array {\n        return new TextEncoder().encode(string);\n    }\n\n    /** Standardized 'ab2str()' function, array buffer to string. */\n    ab2str(buffer: Uint8Array): string {\n        return new TextDecoder('utf-8').decode(buffer);\n    }\n\n    /**\n     * Generates a random alphanumeric (eg base62) string of a given length.\n     * The string always starts with a letter.\n     * \n     * @internal\n     */\n    generateRandomString(length: number = 16): string {\n        const letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        const alphanumeric = letters + \"0123456789\";\n        return Array.from({ length }, (_, i) =>\n            i === 0 ? letters.charAt(Math.floor(Math.random() * letters.length)) :\n                alphanumeric.charAt(Math.floor(Math.random() * alphanumeric.length))\n        ).join('');\n    }\n\n    /**\n     * Fills buffer with random data. Wraps the native crypto.getRandomValues() function.\n     * For blocks larger than 4096 bytes the block must be a multiple of 1024 bytes.\n     * Note also that for large blocks, entropy will be (much) worse. (Blocks above\n     * 1024 bytes should not be used for any cryptographic purposes, only for testing.)\n     * \n     * @internal\n     */\n    getRandomValues(buffer: Uint8Array) {\n        if (buffer.byteLength < (4096)) {\n            return crypto.getRandomValues(buffer)\n        } else {\n            // larger blocks should really only be used for testing\n            _sb_assert(!(buffer.byteLength % 1024), 'getRandomValues(): large requested blocks must be multiple of 1024 in size')\n            let i = 0\n            try {\n                for (i = 0; i < buffer.byteLength; i += 1024) {\n                    let t = new Uint8Array(1024)\n                    // this doesn't actually have enough entropy, we should just hash here anyweay\n                    crypto.getRandomValues(t)\n                    // console.log(`offset is ${i}`)\n                    buffer.set(t, i)\n                }\n            } catch (e: any) {\n                console.log(`got an error on index i=${i}`)\n                console.log(e)\n                console.trace()\n            }\n            return buffer\n        }\n    }\n\n    /**\n     * Takes a buffer or a string, returns the shorter hash. Uses SHA-256.\n     * Returns value as base62. Minimum length is 4 and maximum is 42. \n     */\n    async hashDown(value: ArrayBuffer | string, len = 12) {\n        if ((len < 4) || (len > 42)) throw Error(\"[hashDown] Length must be range 12-42.\")\n        const data = value instanceof ArrayBuffer ? value : (new TextEncoder()).encode(value);\n        return arrayBufferToBase62(await window.crypto.subtle.digest(\"SHA-256\", data)).slice(0, len);\n    }\n\n}\n\n", "// (c) 2023 384 (tm)\n\n// some older code create their own instances\nexport { SBCrypto } from './SBCrypto';\n\nimport { SBCrypto } from './SBCrypto';\n\n/**\n * This is the global SBCrypto object, which is instantiated\n * immediately upon loading the library.\n * \n * You should use this and not instantiate your own. We don't\n * use static functions in SBCrypto(), because we want to be\n * able to add features (like global key store) incrementally.\n * \n * @public\n */\nexport const sbCrypto = new SBCrypto();\n", "// (c) 2023 384 (tm)\n\nconst DBG0 = false;\n\n// export declare var DBG2: boolean;\nexport var DBG2 = false;\n\nexport const _SEP_ = '='.repeat(76)\nexport const SEP = '\\n' + _SEP_ + '\\n'\nexport const _SEP = '\\n' + _SEP_\nexport const SEP_ = _SEP_ + '\\n'\n\n// true if value is null or undefined. less confusing than using '==' in code.\nexport function isNil(value: any): value is null | undefined {\n  return value == null; // deliberate use of '==' (do not use '===')\n}\n\n// common SB384 types (to facilitate imports)\n\n/** Generic 256-bit hash identifier (43 x base62) @public */\nexport type SB384Hash = string\n\n/** User ID (name). @public */\nexport type SBUserId = SB384Hash // 256 bit hash (43 x base62)\n\n/**\n * Checks if a string looks like a valid SBUserId. Note that this is a hash,\n * so, in the absence of more information it cannot be 'validated' per se.\n * @public\n */\nexport function isSBUserId(x: any): x is SBUserId {\n  const b62regex = /^[A-Za-z0-9]*$/; // copy from b62.ts\n  const ret = (typeof x === 'string' && x.length === 43 && b62regex.test(x))\n  if (DBG0 && !ret) console.log(`isSBUserId(${x}) => ${ret}`)\n  return ret \n}\n\n/** Channel ID (name). @public */\nexport type ChannelId = SB384Hash // same format, always the owner's hash\n\n/** Public key encoding. @public */\nexport type SBUserPublicKey = string\n\nexport function isSBUserPublicKey(x: any): x is SBUserPublicKey {\n  return (typeof x === 'string' && x.length > 0)\n}\n\n/** Private key encoding. @public */\nexport type SBUserPrivateKey = string\n\n// we re-export a few common things from here\nexport { extractPayload, assemblePayload } from './utils/payloads';\n\nexport { sbCrypto } from './sbCrypto/index'\n\nimport { _sb_assert } from 'src/utils/error';\nexport { SBError, _sb_assert } from 'src/utils/error';\n\nexport { jsonParseWrapper } from 'src/utils/json';\n\nexport { SBApiFetch } from 'src/utils/fetch';\n\nexport function isSet<T>(value: unknown): value is Set<T> {\n  return value instanceof Set;\n}\nexport function isMap<K, V>(value: unknown): value is Map<K, V> {\n  return value instanceof Map;\n}\nexport function isArray<T>(value: unknown): value is Array<T> {\n  return Array.isArray(value);\n}\n\n// Decorator\n// caches resulting value (after any verifications eg ready pattern)\n/** @internal */\nexport function Memoize(target: any, propertyKey: string /* ClassGetterDecoratorContext */, descriptor?: PropertyDescriptor) {\n  if ((descriptor) && (descriptor.get)) {\n    let get = descriptor.get\n    descriptor.get = function () {\n      const prop = `__${target.constructor.name}__${propertyKey}__`\n      if (this.hasOwnProperty(prop)) {\n        const returnValue = this[prop as keyof PropertyDescriptor]\n        return (returnValue)\n      } else {\n        const returnValue = get.call(this)\n        Object.defineProperty(this, prop, { configurable: false, enumerable: false, writable: false, value: returnValue })\n        return returnValue\n      }\n    }\n  }\n}\n\n// Decorator\n// asserts that corresponding object is 'ready'; also asserts non-null getter return value\n/** @internal */\nexport function Ready(target: any, propertyKey: string /* ClassGetterDecoratorContext */, descriptor?: PropertyDescriptor) {\n  if ((descriptor) && (descriptor.get)) {\n    let get = descriptor.get\n    descriptor.get = function () {\n      const obj = target.constructor.name\n      const readyFlagSymbol = target.constructor.ReadyFlag;\n      // todo: consider adding 'errorState' as general blocker\n      // if (DBG0) console.log(`Ready: ${obj}.${propertyKey} constructor:`, target.constructor)\n      _sb_assert(readyFlagSymbol in this, `'readyFlagSymbol' missing yet getter accessed with @Ready pattern (fatal)`);\n      _sb_assert((this as any)[readyFlagSymbol], `'${obj}.${propertyKey}' getter accessed but object not 'ready' (fatal)`);\n      const retValue = get.call(this);\n      _sb_assert(retValue !== null, `'${obj}.${propertyKey}' getter accessed but return value will be NULL (fatal)`);\n      return retValue;\n    }\n  }\n}\n\n\n// // Decorator\n// // asserts any types that are SB classes are valid\n// // we're not quite doing this yet. interfaces would be more important to handle in this manner,\n// // however even with new (upcoming) additional type metadata for decorators, can't yet be done.\n// function VerifyParameters(_target: any, _propertyKey: string /* ClassMethodDecoratorContext */, descriptor?: PropertyDescriptor): any {\n//   if ((descriptor) && (descriptor.value)) {\n//     const operation = descriptor.value\n//     descriptor.value = function (...args: any[]) {\n//       for (let x of args) {\n//         const m = x.constructor.name\n//         if (isSBClass(m)) _sb_assert(SBValidateObject(x, m), `invalid parameter: ${x} (expecting ${m})`)\n//       }\n//       return operation.call(this, ...args)\n//     }\n//   }\n// }\n\n// // Decorator\n// // turns any exception into a reject\n// function ExceptionReject(target: any, _propertyKey: string /* ClassMethodDecoratorContext */, descriptor?: PropertyDescriptor) {\n//   if ((descriptor) && (descriptor.value)) {\n//     const operation = descriptor.value\n//     descriptor.value = function (...args: any[]) {\n//       try {\n//         return operation.call(this, ...args)\n//       } catch (e) {\n//         console.log(`ExceptionReject: ${WrapError(e)}`)\n//         console.log(target)\n//         console.log(_propertyKey)\n//         console.log(descriptor)\n//         return new Promise((_resolve, reject) => reject(`Reject: ${WrapError(e)}`))\n//       }\n//     }\n//   }\n// }\n\n\n\nif (typeof WeakRef === \"undefined\") {\n  class PolyfillWeakRef<T> {\n      private _target: T;\n      constructor(target: T) {\n          this._target = target;\n      }\n      deref(): T | undefined {\n          return this._target;\n      }\n  }\n  Object.defineProperty(PolyfillWeakRef.prototype, Symbol.toStringTag, {\n      value: 'WeakRef',\n      configurable: true,\n  });\n  globalThis.WeakRef = PolyfillWeakRef as any;\n}\n", "// (c) 2023 384 (tm)\n\nimport { ObjectHandle } from '../storage/ObjectHandle';\nimport { base62ToArrayBuffer } from '../utils/b62';\nimport { extractPayload } from '../utils/payloads';\nimport { base64ToBase62 } from '../utils/index';\nimport { StorageApi } from '../storage/StorageApi';\n\n/** @internal */\nfunction deCryptShard(data: ObjectHandle): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        crypto.subtle.importKey(\"raw\", base62ToArrayBuffer(data.key!), \"PBKDF2\", false, ['deriveBits', 'deriveKey'])\n            .then((keyMaterial) => {\n                crypto.subtle.deriveKey({\n                    'name': 'PBKDF2',\n                    'salt': data.salt as ArrayBuffer,\n                    'iterations': 100000,\n                    'hash': 'SHA-256'\n                }, keyMaterial, { 'name': 'AES-GCM', 'length': 256 }, true, ['encrypt', 'decrypt'])\n                    .then((key) => {\n                        crypto.subtle.decrypt({ name: 'AES-GCM', iv: data.iv as Uint8Array }, key, StorageApi.getData(data)!)\n                            .then((padded) => {\n                                let actualSize = new DataView(padded.slice(-4)).getUint32(0)\n                                resolve(padded.slice(0, actualSize));\n                            }).catch(() => { reject('error decrypting shard'); })\n                    }).catch(() => { reject('unable to derive key'); })\n            })\n            .catch(() => { reject('unable to import key') })\n    })\n}\n\n/** @internal */\nexport function loadShard(shard: ObjectHandle, storageServer: string = 'http://localhost:3841') {\n    console.log(\"[loadShard] ++++ Using the following shard to load the library: \", shard);\n    return new Promise<ArrayBuffer>((resolve, reject) => {\n        const codeShardFetch = `${storageServer!}/api/v2/fetchData?id=${shard.id}&verification=${shard.verification}`\n        fetch(codeShardFetch)\n            .then((res) => res.arrayBuffer())\n            .then((payload) => {\n                let data: ObjectHandle = extractPayload(payload).payload\n                console.log('[loadShard] payload: ', payload)\n                console.log('[loadShard] data: ', data)\n                if (shard.version == '1') {\n                    data.key = base64ToBase62(shard.key!)\n                } else if (shard.version == '2' || shard.version == '3') {\n                    data.key = shard.key!\n                } else {\n                    reject(`unknown or missing shard version: ${shard}`)\n                }\n                deCryptShard(data).then((decrypted) => {\n                    resolve(decrypted);\n                }).catch(() => { reject('unable to decrypt'); })\n            })\n            .catch((err) => {\n                if (`${err}`.match('\"ror\":\"cann\"')) reject('shard not found')\n                else reject(`failed to fetch or process shard: ${err}`)\n            })\n    })\n}\n\n/** @internal */\nexport function loadLibraryCode(shard: ObjectHandle) {\n    return new Promise<void>((resolve, reject) => {\n        loadShard(shard)\n            .then((decrypted) => {\n                let jslibText = new TextDecoder(\"utf-8\").decode(decrypted);\n                const script = document.createElement('script');\n                script.textContent = jslibText;\n                document.head.append(script);\n                console.log(\"'globalThis.SB' object (library loaded) should be available in the console.\")\n                resolve()\n            })\n            .catch(() => { reject('unable to fetch shard'); })\n    })\n}\n\n// ToDo: these shards are VERY outdated\n/** @internal */\nexport function bootstrapJsLib() {\n    const jsLib = (\n        (globalThis as any).configuration \n        && (globalThis as any).configuration.jslibShardHandle)\n        ? (globalThis as any).configuration.jslibShardHandle\n        : {\n\n            // '2.0.0 (pre) build 03'\n            version: \"2\",\n            type: \"p\",\n            id: \"6bpz2xOwq9eCG9ZZzF4P0LMoydo89lgJg2TkJFvZvKx\",\n            key: \"GxQ6at56Lv1p8V8AFZqQZur4MEKyiZzEMFpiyPnZYv0\",\n            actualSize: 247612,\n            verification: \"8117233191337661625\",\n            fileName: \"384.iife.js\",\n            shardServer: \"https://shard.3.8.4.land\",\n            lastModified: 1701294057573,\n\n        }\n\n    console.log(\"[boot.loadshard] ++++ Using the following shard to load the library: \", jsLib);\n\n    return loadLibraryCode(jsLib);\n}\n", "// (c) 2023-2024 384 (tm)\n\n// parsing properly into TLD and TLD+1 is a bit tricky, generally sites use\n// libraries (we want to avoid that), or the full list from github at:\n// https://github.com/publicsuffix/list/blob/master/public_suffix_list.dat which\n// is 15K entries.\n\n// below we use a small list of the most common TLDs, and then a list of the\n// most common SLDs for each of those TLDs.  This is not perfect, but should\n// work for most cases. Let us know what we missed.\n\nconst singleTLDs = new Set([\n    'localhost',\n    'io', 'dev', 'app', 'land', 'ac', 'lk', 'cc',\n    'com', 'net', 'org', 'jp', 'de', 'fr', 'br', 'it', 'ru', 'es', 'me', 'gov',\n    'pl', 'ca', 'in', 'nl', 'edu', 'eu', 'ch', 'id', 'at', 'kr', 'cz', 'mx',\n    'be', 'se', 'tr', 'tw', 'al', 'ua', 'ir', 'vn', 'cl', 'sk', 'to', 'no',\n    'fi', 'us', 'pt', 'dk', 'ar', 'hu', 'tk', 'gr', 'il', 'sg', 'ru',\n]);\n\nconst tldsWithSLDs = {\n    'uk': ['co', 'ac', 'gov', 'org', 'net'],\n    'au': ['com', 'net', 'org', 'edu', 'gov'],\n    'nz': ['co', 'org', 'net', 'edu', 'gov', 'ac', 'gen', 'kiwi', 'maori'],\n    'br': ['com', 'net', 'org', 'gov', 'edu', 'mil'],\n    'jp': ['co', 'ac', 'go', 'or', 'ne'],\n    'kr': ['co', 'go', 'ne', 'or', 're'],\n    'ar': ['com', 'net', 'org', 'gov', 'edu', 'mil'],\n    'il': ['co', 'ac', 'org', 'net', 'gov'],\n    'sg': ['com', 'net', 'org', 'gov', 'edu', 'per'],\n};\n\nconst ipv4Regex = /^\\d{1,3}(\\.\\d{1,3}){3}$/;\n\n/** @internal */\nexport function getDomainDetails(hostname: string = globalThis.location?.hostname ?? null) {\n    const errorResult = { baseDomain: null, subdomain: null, port: null };\n\n    if (!hostname) { console.warn(\"[getDomainDetails] cannot read location\"); return errorResult; }\n    const parts = hostname.split('.').reverse();\n    if (parts.length === 0) { console.warn(\"[getDomainDetails] cannot parse location\"); return errorResult; }\n    const topLevel = parts[0];\n    const port = globalThis.location?.port ?? null;\n    if (parts.length === 1) {\n        if (topLevel === 'localhost') {\n            return { baseDomain: hostname, subdomain: null, port: port };\n        } else {\n            // for now, only localhost allowed as singleton (unless it's IPFS, below)\n            console.warn(\"[getDomainDetails] singleton TLD not on allowed list\");\n            return errorResult;\n        }\n    }\n    if (ipv4Regex.test(parts.slice(0, 4).reverse().join('.'))) {\n        // we support ipv4 addresses, but not ipv6\n        const baseDomain = parts.slice(0, 4).reverse().join('.');\n        const subdomain = parts.length > 4 ? parts.slice(4).reverse().join('.') : null;\n        return { baseDomain, subdomain, port: port ?? null };\n    }\n    let baseDomain = null;\n    let subdomain = null;\n    if (topLevel === 'localhost' && parts.length === 3 && parts[1] === 'ipfs') {\n        // this is how Brave represents an IPFS address, eg it'll \n        // look like '<CID>.ipfs.localhost'\n        return { baseDomain: parts[2], subdomain: null, port: port };\n    } else if (topLevel === 'localhost') {\n        baseDomain = parts.slice(0, 1).reverse().join('.');\n        subdomain = parts.slice(1).reverse().join('.') || null;\n    } else if (singleTLDs.has(topLevel)) {\n        // we know length is at least 2\n        baseDomain = parts.slice(0, 2).reverse().join('.');\n        subdomain = parts.slice(2).reverse().join('.') || null;\n    } else {\n        if (parts.length < 3) { return { baseDomain: null, subdomain: null, port: port }; }\n        const secondLevel = parts[1]\n        const slds = tldsWithSLDs[topLevel as keyof typeof tldsWithSLDs];\n        if (slds && slds.includes(secondLevel)) {\n            baseDomain = parts.slice(0, 3).reverse().join('.')\n            subdomain = parts.slice(3).reverse().join('.') || null;\n        } else {\n            return errorResult;\n        }\n    }\n    return { baseDomain, subdomain, port: port };\n}\n", "// (c) 2023-2024 384 (tm)\n\nimport { ObjectHandle } from 'src/storage/ObjectHandle'\n\nimport { loadShard } from \"./loadShard\"\nimport { getDomainDetails } from \"./tld\"\n\nconst SKIP_OBSERVE = false; // for testing, disables '1', default false\nconst SKIP_SCAN = false;    // for testing, disables '2', default false\n\n// ToDo: these might be config options upon creating the loader loader,\n// otherwise we risk committing versions that are too lenient\n// console.log(\"==== BootstrapLoader: countermeasures enabled:\")\nif (SKIP_OBSERVE) console.warn(\"==== BootstrapLoader: 1. MutationObserver disabled (make sure this is not production)\")\nif (SKIP_SCAN) console.warn(\"==== BootstrapLoader: 2. Immediate and repeated scans disabled (make sure this is not production)\")\n\n/** @internal */\nexport class bootstrapLoaderClass {\n    DBG: boolean        // enable for detailed countermeasure logging\n\n    baseDomain: string        // the base domain of where we are being served from\n    subdomain: string | null  // the subdomain of the app (if any)\n    port: string              // the port of the app\n\n    // \"we\" are the loader loader; here is current loader:\n    loaderShard: ObjectHandle;\n\n    reportScans = 0; // don't report for ever\n\n    // we try to make sure that we ourselves aren't blocked\n    securedTimeout = globalThis.setTimeout.bind(globalThis);\n\n    disconnectObserver: () => void;\n\n    tagScan = () => {\n        if (SKIP_SCAN) return;\n        const scriptTags = document.querySelectorAll(\"script\");\n        for (let i = 0; i < scriptTags.length; i++) {\n            if (scriptTags[i].src) {\n                if (scriptTags[i].src.startsWith('blob:')) {\n                    if (this.DBG) console.log(`==== BootstrapLoader (immediate scan): Allowing (blob) script tag: ${scriptTags[i].src}`);\n                } else {\n                    const url = new URL(scriptTags[i].src);\n                    // if any reason for problem parsing url, we strip it\n                    if (!url) {\n                        console.warn(`==== BootstrapLoader (immediate scan): Removing external script tag (failed to parse it). Tried sourcing: ${scriptTags[i].src}`);\n                        scriptTags[i].remove;\n                    } else {\n                        // if it has same base domain, we allow it\n                        const { baseDomain } = getDomainDetails();\n                        if (baseDomain === this.baseDomain) {\n                            if (this.DBG) console.log(`==== BootstrapLoader (immediate scan): Allowing (hosted) script tag: ${scriptTags[i].src}`);\n                        } else {\n                            console.warn(`==== BootstrapLoader (immediate scan): Removing external script tag. Tried sourcing: ${scriptTags[i].src}`);\n                            scriptTags[i].remove;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    timedScan = () => {\n        this.tagScan();\n        queueMicrotask(() => this.tagScan());\n        this.reportScans++;\n        if (this.reportScans < 10) // first second, frequent\n            this.securedTimeout(this.timedScan, 100);\n        else if (this.reportScans < 20) // next 10 seconds, less frequent\n            this.securedTimeout(this.timedScan, 1000);\n        else if (this.DBG)\n            console.log('==== BootstrapLoader (scan): Stopping regular scans for external script tags.')\n    }\n\n    removeExternalScripts = () => {\n        this.securedTimeout(this.timedScan, 0); // first check soon\n\n        if (SKIP_OBSERVE) return () => { };\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.type === 'childList') {\n                    mutation.addedNodes.forEach((node) => {\n                        if (node.nodeName === 'SCRIPT' && node instanceof HTMLScriptElement) {\n                            if (node.src) {\n                                console.warn(`==== BootstrapLoader (MutationObserver): Removing external script tag. Tried sourcing: ${node.src}`);\n                                // we need to destroy the node to have a chance of stopping it from being executed\n                                // modifying it (eg modifying \"src\") will not necessarily work\n                                node.remove();\n                                // leave breadcrumbs, and play interference\n                                const newScript = document.createElement('script');\n                                newScript.setAttribute(\"sb384counterMeasure\", \"blocked\");\n                                // this next line supposedly has error\n                                // TS2488: Type 'NamedNodeMap' must have a '[Symbol.iterator]()' method that returns an iterator.\n                                // but ... i don't think so?  overriding for now.  ToDo.\n                                // @ts-ignore\n                                for (const attr of node.attributes) {\n                                    if (attr.name !== 'src') {\n                                        newScript.setAttribute(attr.name, attr.value);\n                                    }\n                                }\n                                mutation.target.appendChild(newScript);\n                            } else if (this.DBG) {\n                                console.log(`==== BootstrapLoader (MutationObserver): Allowing script tag: ${node.innerHTML.slice(0, 300)}...`);\n                            }\n                        }\n                    });\n                }\n            });\n        });\n\n        // Start observing the body for changes\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n        });\n\n        // Return a function to disconnect the observer\n        return () => observer.disconnect();\n    }\n\n    // the third and last line of defense is \"monkey patched scorched earth\":\n    // we know the code in this loader loader employs no timers or event \n    // listeners, so we block anything like that. this does not catch\n    // everything, there are obscure corners like performance monitors\n    // and web sockets that we don't look for (yet).\n    scorchedEarth = () => {\n        if (this.DBG) console.log(\"==== BootstrapLoader: SCORCHED EARTH\")\n        class LogAttemptMutationObserver implements MutationObserver {\n            observe(_target: Node, _options?: MutationObserverInit): void {\n                logAttempt(\"MutationObserver\");\n            }\n            disconnect(): void { }\n            takeRecords(): MutationRecord[] {\n                return [];\n            }\n        }\n        const originals = {\n            addEventListener: globalThis.addEventListener.bind(globalThis),\n            setTimeout: globalThis.setTimeout.bind(globalThis),\n            setInterval: globalThis.setInterval.bind(globalThis),\n            MutationObserver: globalThis.MutationObserver,\n            dispatchEvent: globalThis.dispatchEvent.bind(globalThis)\n        };\n        const logAttempt = (methodName: string) => {\n            console.warn(`==== BootstrapLoader: Attempted to use \"${methodName}\" during scorched earth period (blocked).`);\n            return -1;\n        };\n        globalThis.addEventListener = () => logAttempt('addEventListener');\n        (globalThis.setTimeout as any) = () => logAttempt('setTimeout');\n        (globalThis.setInterval as any) = () => logAttempt('setInterval');\n        globalThis.MutationObserver = LogAttemptMutationObserver;\n        globalThis.dispatchEvent = function (event: Event) {\n            logAttempt('dispatchEvent');\n            console.log(event);\n            return true; // faking it\n        };\n        // restoring is done as close as possible to activating the loader\n        let restoreWebApi = () => {\n            // setting things back in place.  an alternative design is\n            // to have a \"hand off\" to the loader itself\n            this.tagScan(); // last chance, heh\n            globalThis.addEventListener = originals.addEventListener;\n            globalThis.setTimeout = originals.setTimeout;\n            globalThis.setInterval = originals.setInterval;\n            globalThis.dispatchEvent = originals.dispatchEvent;\n            globalThis.MutationObserver = originals.MutationObserver;\n            if (this.DBG) console.log('==== BootstrapLoader: Original methods restored');\n        }\n        if (this.DBG) console.log(\"==== BootstrapLoader: LOADING the loader\")\n        loadShard(this.loaderShard)\n            .then((decrypted) => {\n                if (this.DBG) console.log(\"==== [END] BootstrapLoader: LOADING the loader\")\n                restoreWebApi();\n                this.disconnectObserver();\n                queueMicrotask(() => this.tagScan());\n                document.open()\n                document.write(new TextDecoder(\"utf-8\").decode(decrypted))\n                document.close()\n                console.log(\"==== [END] BootstrapLoader: done, handing over to loader\")\n            })\n            .catch(() => { document.body.style.visibility = \"visible\"; });\n    }\n\n    constructor(loaderShard: ObjectHandle, debug: boolean = false) {\n        this.DBG = debug;\n        this.loaderShard = loaderShard;\n\n        const { baseDomain, subdomain, port } = getDomainDetails();\n        if (!baseDomain) {\n            throw new Error(\"unable to determine base domain\")\n        }\n        if (this.DBG) {\n            console.log(\"==== BootstrapLoader: domain details:\")\n            console.log({ baseDomain, subdomain, port })\n        }\n        this.baseDomain = baseDomain;\n        this.subdomain = subdomain;\n        this.port = port;\n\n        // hide visuals as fast as we can\n        document.body.style.visibility = \"hidden\";\n        console.log(\"==== [BEGIN] BootstrapLoader: starting\")\n\n        // the rest of this script section are manipulation countermeasures\n        // the loader loader has zero external dependencies, so anything\n        // that shows up as an internal script tag is suspect (and stripped)\n\n        // there are three independent measures:\n        // 1. mutation observer\n        // 2. immediate and repeated scans\n        // 3. disabling much of web API (\"scorched earth\")\n        // when testing you can disable 1 and/or 2:\n\n        if (this.DBG) console.log(\"==== BootstrapLoader: 3. Debug logging enabled\")\n\n        // by the way, as far as we *currently* are aware, the order\n        // that these measures kick in appear to be 1,2,3. that's why\n        // we don't have a disable debug method for 3. \n\n        // these measures leverage that we have a carefully designed handoff\n        // between the loader-loader and the loader, and we know exactly what\n        // web API or resources that are needed, so we can disable everything\n        // else.\n\n        // // UPDATE: perhaps, but, for now the focus is on launching to a\n        // subdomain // before we get into any of that, we need to make sure\n        // that // that a change to hash value will trigger a reload; otherwise\n        // // the browser may treat a new 'app' as an old one and not // reload,\n        // which will cause this loader-loader to not recur \n\n        // function createHashChangeHandler() {\n        //     let lastHash: string = globalThis.location.hash;\n        //     function hashChangeHandler() {\n        //         if (globalThis.location.hash !== lastHash) {\n        //             lastHash = globalThis.location.hash;\n        //             globalThis.removeEventListener('hashchange', hashChangeHandler); // avoid stacking\n        //             globalThis.location.assign(globalThis.location.href);\n        //         }\n        //     }\n        //     return hashChangeHandler;\n        // }\n        // globalThis.addEventListener('hashchange', createHashChangeHandler());\n\n        if (this.DBG) console.log(\"==== BootstrapLoader: starting countermeasures\")\n        this.tagScan();\n        queueMicrotask(() => this.tagScan());\n        this.disconnectObserver = this.removeExternalScripts();\n        this.scorchedEarth();\n        if (this.DBG) console.log(\"==== ALL DONE ... \")\n    }\n}\n", "// (c) 2023 384 (tm)\n\nimport { ObjectHandle } from 'src/storage/ObjectHandle';\nimport { SBFileSystem } from 'src/file/SBFileSystem';\nimport { Retry } from 'src/utils/timeout';\n\n// import { SBFile } from 'src/file/SBFile';\n// import { SWDB } from 'src/service-worker/db';\n// import { fetchPayload } from '../storage/core'\n\nconst DBG0 = false;\nconst DBG2 = false;\n\nconst sb384CacheName = 'sb384cache';\n\n// make sure this is the same as in the service worker\n// const urlDB = new SWDB('__shard_map', 'urlToSBFile');\n\n// const currentOrigin: string = self.origin;\n\nconst navigatorObject = ('serviceWorker' in navigator) ? navigator : null;\n// if (DBG2) console.log(\"[SBServiceWorker] navigatorObject: \", navigatorObject);\n\n// let serviceWorkerFunctional = false;\n// (globalThis as any).serviceWorkerFunctional = serviceWorkerFunctional;\n\nlet serverPrefix: string = \"<unknown>\"\nif (globalThis.location) {\n    serverPrefix = globalThis.location.protocol + \"//\" + globalThis.location.host\n    if (DBG2) console.log(\"[SBServiceWorker] serverPrefix: \", serverPrefix);\n}\n\n// here is how we might prime it:\n\n// // note that the actual data is in globalBufferMap.get(uniqueShardId)\n// for (const key of this.finalFileList.keys()) {\n//     let entry = this.finalFileList.get(key);\n//     if (entry.type !== \"directory\") {\n//         if (DBG2) console.log(`... kicking off cacheResource for ${key} (${entry.path + entry.name})`)\n//         cacheResource(entry.path + entry.name, entry.uniqueShardId, entry.type, this.globalBufferMap);\n//     }\n// }\n\n// console.log(navigator.serviceWorker);\n\n/** @internal */\nexport class SBServiceWorker {\n    // sb384cachePromise: Promise<Cache | undefined>;\n    #sb384cache: Cache | undefined;\n    #sbfs: SBFileSystem;\n    // serviceWorkerReadyPromise: Promise<void>;\n    ready: Promise<boolean>;\n\n    constructor(sbfs: SBFileSystem, messageHandler: (event: MessageEvent) => void) {\n        this.#sbfs = sbfs;\n        if (DBG0) console.warn(`[SBServiceWorker] [constructor] ++++ setting up file helper service worker (${serverPrefix}) `)\n        if (DBG2) console.log(\"[SBServiceWorker] [constructor ++++ SBFS:\", this.#sbfs);\n        this.ready = new Promise(async (resolve, _reject) => {\n            try {\n                this.#sb384cache = await caches.open(sb384CacheName)\n                resolve(await this.setupServiceWorker(messageHandler))\n            } catch (e) {\n                console.error(\"[SBServiceWorker] [constructor] Error setting up service worker: \" + e)\n                resolve(false);\n            }\n        });\n    }\n\n    @Retry(2)\n    async postMessage(message: any) {\n        if (await this.ready === false) {\n            const msg = \"[SBServiceWorker] 'ready' is false (?) ... cannot post any messages\"\n            console.error(msg)\n            throw new Error(msg);\n        }\n        if (!navigatorObject) {\n            const msg = \"[SBServiceWorker] 'ready' is null or false (?) or no navigatorObject ... cannot post any messages\"\n            console.error(msg)\n            throw new Error(msg);\n        }\n        if ((navigatorObject.serviceWorker) && (navigatorObject.serviceWorker.controller)) {\n            navigatorObject.serviceWorker.controller.postMessage(message);\n        } else {\n            const msg = '[SBServiceWorker] ' + (navigatorObject.serviceWorker ? 'No service worker. ' : '') + (navigatorObject.serviceWorker.controller ? 'No controller. ' : '') + 'Cannot post message to service worker.';\n            console.error(msg, '\\n', \"Message that will be dropped:\\n\", message)\n            throw new Error(msg);\n        }\n    }\n\n    async setupServiceWorker(messageHandler: (event: MessageEvent) => void): Promise<boolean> {\n        if (!navigatorObject) {\n            console.error(\"[SBServiceWorker] ERROR: navigator.serviceWorker is not available\")\n            return Promise.reject(\"[SBServiceWorker] ERROR: navigator.serviceWorker is not available\");\n        }\n        try {\n            const setOfRegistrations = await navigatorObject.serviceWorker.getRegistrations()\n            if (setOfRegistrations.length > 1) {\n                console.error(\"[devLoader] ERROR: we should never have MANY service workers registered\")\n                for (let registration of setOfRegistrations) {\n                    console.log(\"[devLoader] ++++ unregistering service worker: \", registration)\n                    await registration.unregister();\n                }\n                if (DBG0) console.log('[SBServiceWorker] ++++ ... finished unregistering, registering a fresh one');\n                await navigatorObject.serviceWorker.register('service-worker.js');\n            } else if (setOfRegistrations.length === 1) {\n                if (DBG0) console.log(\"[devLoader] ++++ we already have a service worker registered\")\n            } else {\n                if (DBG0) console.log('[SBServiceWorker] ++++ Did not have a service worker, registering one');\n                await navigatorObject.serviceWorker.register('service-worker.js');\n            }\n\n            if (DBG0) console.log('[SBServiceWorker] ++++ waiting for service worker to be ready then setting up message handler');\n            await navigatorObject.serviceWorker.ready;\n            navigatorObject.serviceWorker.addEventListener('message', messageHandler);\n\n\n            if (!navigatorObject.serviceWorker.controller) {\n                if (sessionStorage.getItem('swReloaded')) {\n                    // Flag is present, so we've already reloaded once\n                    console.warn(\"[SBServiceWorker] Already reloaded once, avoid looping.\");\n                    sessionStorage.removeItem('swReloaded');  // Optionally clear the flag here or after successful control\n                    return false;\n                } else {\n                    // Set the flag and reload\n                    console.warn(\"[SBServiceWorker] No controller after registration, setting flag and reloading page.\");\n                    sessionStorage.setItem('swReloaded', 'true');\n                    window.location.reload();\n                    return false; // we should never get here\n                }\n            } else {\n                // Clear the flag if everything is okay\n                sessionStorage.removeItem('swReloaded');\n                console.log(\"[SBServiceWorker] Service worker is ready and controlling the page.\");\n                navigatorObject.serviceWorker.controller.postMessage({ type: 'INIT' });\n                return true;\n            }\n\n            // // verify we have controller, otherwise we probably need to reload\n            // if (!navigatorObject.serviceWorker.controller) {\n            //     console.warn(\"[SBServiceWorker] No controller after registration, reloading page.\");\n            //     globalThis.location.reload(); // ToDo: use session storage to avoid this looping\n            //     return false; // we should never get here\n            // } else {\n            //     console.log(\"[SBServiceWorker] ++++ service worker is ready .. sending init message to it\")\n            //     navigatorObject.serviceWorker.controller.postMessage({ type: 'INIT' });\n            //     return true;\n            // }\n        } catch (e) {\n            console.error(\"[SBServiceWorker] Error registering service worker: \" + e);\n            return false;\n        }\n    }\n\n    // older approach, now we send handle info\n    async cacheResourceFromArrayBuffer(fileName: string, mimeType: string, arrayBuffer: ArrayBuffer): Promise<void> {\n        if (!arrayBuffer || !(arrayBuffer instanceof ArrayBuffer)) {\n            const msg = `[SBServiceWorker] Got empty or no data or not an array buffer for cacheResource()`\n            console.error(msg)\n            return Promise.reject(msg);\n        }\n        await this.ready;\n        if ((!this.ready) || (!this.#sb384cache)) {\n            const msg = \"[SBServiceWorker] 'ready' or 'sb384cache' is null ... cannot cache any resources\"\n            console.error(msg)\n            return Promise.reject(msg);\n        }\n        if (fileName === \"/index.html\") {\n            if (DBG0) console.log(\"[SBServiceWorker] **** automatically adding '/' for '/index.html'\")\n            await this.cacheResourceFromArrayBuffer(\"/\", mimeType, arrayBuffer);\n        }\n        \n        if (DBG0) console.log(`[SBServiceWorker] Got data for ${fileName} cacheResourceFromArrayBuffer()`, arrayBuffer);\n\n        // create Response to the cache using the file name as the key\n        const response = new Response(arrayBuffer, { status: 200, headers: { 'Content-Type': mimeType } });\n        await this.#sb384cache!.put(fileName, response);\n\n        // Verify that the response is now in the cache - ToDo: can probably optimize and not block\n        const cachedResponse = await this.#sb384cache!.match(fileName);\n        if (cachedResponse) {\n            if (DBG2) console.log('Response successfully cached:', cachedResponse);\n        } else {\n            console.error(`**** Response was not cached **** '${fileName}'`, response);\n        }\n    }\n\n    // older api, we now send meta data and handles\n    async cacheResourceFromHandle(fileName: string, mimeType: string, handle: ObjectHandle): Promise<void> {\n        if (DBG0) console.log(`[SBServiceWorker] Caching resource '${fileName}' mimeType '${mimeType}' from handle:`, handle);\n        handle = await this.#sbfs.SB.storage.fetchData(handle) as ObjectHandle; // todo: why can this return void?\n        if (!handle || !handle.payload) throw new Error(`[SBServiceWorker] Error fetching data for handle ${handle}`);\n        if (DBG0) console.log(`[SBServiceWorker] Caching resource for '${fileName}' from handle, got finalized handle:\\n`, handle);\n        return this.cacheResourceFromArrayBuffer(fileName, mimeType, handle.payload)\n    }\n\n    // async cacheResourceFromDB(f: SBFile) {\n    //     await this.ready;\n    //     const key = currentOrigin + f.path + f.name;\n    //     if (DBG0) console.log(`[SBServiceWorker] Caching resource '${key}' through DB`);\n    //     await urlDB.put(key, f);\n    //     if (f.fullPath === \"/index.html\") {\n    //         if (DBG0) console.log(`[SBServiceWorker] **** automatically adding '/' for '/index.html'`);\n    //         await urlDB.put(currentOrigin + \"/\", f);\n\n    //     }\n    //     if (DBG0) console.log(`[SBServiceWorker] ... done putting resource '${key}' into DB (and possibly '/')`);\n    // }\n\n}\n\n\n\n        // this.#sbfs.server.storage.fetchData(handle)\n        //     .then(async (arrayBuffer) => {\n        //         // Create a Response object with the ArrayBuffer and MIME type\n        //         const response = new Response(arrayBuffer, {\n        //             status: 200, // this part seems to be browser/OS dependent\n        //             headers: { 'Content-Type': mimeType },\n        //         });\n        //         // Add the Response to the cache using the file name as the key\n        //         await this.#sb384cache!.put(fileName, response);\n        //         // Verify that the response is now in the cache\n        //         const cachedResponse = await this.#sb384cache!.match(fileName);\n        //         if (cachedResponse) {\n        //             if (DBG2) console.log('Response successfully cached:', cachedResponse);\n        //         } else {\n        //             console.error(`**** Response was not cached **** '${fileName}'`, response);\n        //         }\n        //     })\n        //     .catch((err) => {\n        //         console.error(`[SBServiceWorker] Error fetching data for handle ${handle}: ${err}`)\n        //     });\n\n        \n    // // older approach, when being tested from inside multi file handler (where a globalbuffer map was available)\n    // async cacheResource(fileName: string, uniqueShardId: string, mimeType: string, bufferMap: Map<any, any>): Promise<void> {\n    //     if (!serviceWorkerFunctional) {\n    //         console.error(\"service worker is not operational\")\n    //         return Promise.resolve();\n    //     }\n    //     if (fileName === \"/service- worker.js\" /* fileName.endsWith(\"service-worker. js\") */) {\n    //         console.log(\"**** special override: self-virtualizing service worker (/service-worker. js)\")\n    //         return Promise.resolve();\n    //     }\n    //     if (fileName === \"/index.html\") {\n    //         console.log(\"**** special override: index.html can also be accessed as '/'\")\n    //         await this.cacheResource(\"/\", uniqueShardId, mimeType, bufferMap);\n    //     }\n    //     if (DBG0) console.log(`Caching resource '${fileName}' with uniqueShardId '${uniqueShardId}' and mimeType '${mimeType}'`);\n    //     const cache = (await this.sb384cachePromise);\n    //     let arrayBuffer = bufferMap.get(uniqueShardId);\n\n    //     // Create a Response object with the ArrayBuffer and MIME type\n    //     const response = new Response(arrayBuffer, {\n    //         status: 200, // this part seems to be browser/OS dependent\n    //         headers: { 'Content-Type': mimeType },\n    //     });\n    //     // Add the Response to the cache using the file name as the key\n    //     await cache!.put(fileName, response);\n    // }", "// (c) 2023 384 (tm)\n\nimport { loadShard, bootstrapJsLib } from './loadShard';\nimport { bootstrapLoaderClass } from './loaderLoader';\nimport { getDomainDetails } from './tld';\nimport { SBServiceWorker } from './serviceWorker';\n\n/**\n * Bootstrapping functions for the 384 library.\n * @internal\n */\nexport const boot = {\n    loadShard: loadShard,\n    bootstrapJsLib: bootstrapJsLib,\n    boostrapLoaderClass: bootstrapLoaderClass,\n    getDomainDetails: getDomainDetails,\n    serviceWorker: SBServiceWorker\n};\n", "// (c) 2023 384 (tm)\n\nconst DBG2 = false;\n\nconst SUGGESTED_PHRASE_LENGTH = 3;\nconst PBKDF2_10M_ITERATIONS = 10 * 1000 * 1000;\n\n/** @public */\nexport type StrongphraseParams = { extraEntropy?: string; words?: number };\n\n/** @public */\nexport const strongphraseVersion = \"3.20240317.0\";\n\n/**\n * generatePassPhrase()\n * \n * Generates a passphrase from a list of 16K words. Results in 14 bits of reasonably\n * strong entropy per word. 3 (the default) should be fine for most purposes.\n * \n * Parameters can be passed as a string (optional extra entropy), number (number of pass phrase words),\n * or if you want to specify both, as an object with the following properties:\n * \n * @example\n * ```typescript\n *   {\n *     extraEntropy: \"some extra entropy\",\n *     words: 3\n *   }\n * ```\n * \n * Number of words defaults to '3', and extraEntropy defaults to none (duh),\n * so you can also just call it without any parameters. It will return the phrase with\n * the words separated by spaces.\n * \n * Note that the word list only contains lower case letters and words. Also please \n * note there may still be a few undesirable words in the list, please notify us\n * if you find any. \n * \n * Generally, for a user interface, you should generally not allow the user\n * to hit \"regenerate\", instead we would suggest that you generate a set of phrases,\n * and they can pick one. That way you are more likely to constrain the loss of\n * entropy (which would be ln2() of number of choices). A good number is probably 4,\n * which with a choice of 3 words will total 40 bits of entropy, a general good amount.\n * \n * The 'some extra entropy' can either be another external source (eg random.org),\n * or some biometric data (eg mouse movements, keystrokes, etc), or simply offering\n * the user to type in a bunch of \"random\" characters on their keyboard. Regardless,\n * this code does not assume any particular quality of that additional entropy, it\n * can be terrible and it won't matter (much).\n * \n * For VERY strong phrases, we would suggest five (5) words, and allow the user to\n * chose among 8 phrases. \n * \n * @public\n * \n */\nexport async function generatePassPhrase(params?: string | number | StrongphraseParams): Promise<string> {\n    let extraEntropy: string | undefined;\n    let words: number | undefined;\n\n    const RND_BUFFER_SIZE = 32; // 256 bits\n    const MAX_WORDS = 16; // 256 bits divided by 16\n    const WORD_LIST_SIZE_LN2 = 14; // 2^14 = 16384\n    const WORD_LIST_SIZE = 2 ** WORD_LIST_SIZE_LN2;\n\n    if (typeof params === 'string') {\n        extraEntropy = params;\n    } else if (typeof params === 'number') {\n        words = params;\n    } else if (params) {\n        extraEntropy = params.extraEntropy;\n        words = params.words;\n    }\n\n    if (!words || words < 1) words = SUGGESTED_PHRASE_LENGTH;\n    if (words > MAX_WORDS) throw new Error(`Too many words requested, max is ${MAX_WORDS}.`);\n\n    // sanity check make sure our word array is the expected size\n    if (words16K_v03.length !== WORD_LIST_SIZE) throw new Error(\"Word list is not the expected size (16x1024).\")\n\n    // Generate 256 random bits from crypto\n    const randomValues = globalThis.crypto.getRandomValues(new Uint8Array(RND_BUFFER_SIZE));\n\n    let entropySource = randomValues;\n\n    // If extraEntropy is provided, hash it and append to the randomValues, and then hash the result\n    if (extraEntropy) {\n        const encoder = new TextEncoder();\n        const extraEntropyHash = await globalThis.crypto.subtle.digest('SHA-256', encoder.encode(extraEntropy));\n\n        const combinedEntropySource = new Uint8Array([...randomValues, ...new Uint8Array(extraEntropyHash)]);\n        entropySource = new Uint8Array(await globalThis.crypto.subtle.digest('SHA-256', combinedEntropySource));\n    }\n\n    // Create a Uint16 view of the entropy source\n    const indices = new Uint16Array(entropySource.buffer);\n\n    // Map the indices to words and join them into a passphrase\n    const passphrase = Array.from(indices, i => words16K_v03[i & (WORD_LIST_SIZE - 1)]).slice(0, words).join(' ');\n\n    return passphrase;\n};\n\n// export function generatePassPhrase(extraEntropy?: string, words = SUGGESTED_PHRASE_LENGTH) {\n//     // sanity check make sure our word array is the expected size\n//     if (words16K_v03.length !== WORD_LIST_SIZE) throw new Error(\"Word list is not the expected size (16x1024).\")\n\n//     // Create an array to hold random indices\n//     const randomIndices = new Uint16Array(words);\n\n//     // Fill the array with random 14-bit numbers\n//     globalThis.crypto.getRandomValues(randomIndices);\n\n//     // Map the indices to words and join them into a passphrase\n//     return Array.from(randomIndices, i => words16K_v03[i & (WORD_LIST_SIZE - 1)]).join(' ');\n// };\n\n/**\n * generateStrongKey()\n * \n * Uses PBKDF2 (10M iterations, SHA-256) to generate a strong key from a passphrase.\n * Returns an object with the following properties:\n * \n * @example\n * ```typescript\n * {\n *  phrase: \"passphrase\",  // whatever passphrase was used\n *  key: CryptoKey,\n *  salt: Uint8Array(16),\n *  iterations: 10000000\n * }\n * ```\n * \n * @see https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey\n * \n * Roughly speaking, 10M is considered very strong. 1M is considered strong. 100K is considered\n * reasonable. 10K is considered weak. 1K is considered very weak. Currently this cannot\n * be overriden by the caller, since modern clients should handle this fine. If you need\n * a quicker generator, we suggest you create a new function that is clearly named as\n * such (eg 'generateQuickAndDirtyWeakKey()').\n * \n * @public\n * \n */\nexport async function generateStrongKey(passphrase?: string) {\n    // Generate a random salt\n    const salt = globalThis.crypto.getRandomValues(new Uint8Array(16));\n    if (!passphrase) passphrase = await generatePassPhrase(SUGGESTED_PHRASE_LENGTH);\n    return await _generateKey(passphrase, salt, PBKDF2_10M_ITERATIONS);\n}\n\n/**\n * recreateStrongKey()\n * \n * Takes precise parameters (typically from a previous call to generateStrongKey())\n * and recreates the strong key.  You should not use this to create a new key\n * unless you are sure you know what you are doing ... use generateStrongKey() instead.\n * @public\n */\nexport async function recreateStrongKey(passphrase: string, salt: Uint8Array, iterations: number) {\n    // todo: some sanity checking of parameters\n    return await _generateKey(passphrase, salt, iterations);\n}\n\nasync function _generateKey(passphrase: string, salt: Uint8Array, iterations: number) {\n    const encoder = new TextEncoder();\n    const passphraseKey = encoder.encode(passphrase);\n\n    // Import the passphrase into a CryptoKey\n    const baseKey = await globalThis.crypto.subtle.importKey(\n        'raw',\n        passphraseKey,\n        { name: 'PBKDF2' },\n        false,\n        ['deriveBits', 'deriveKey']\n    );\n\n    // Derive a strong key\n    const strongKey = await globalThis.crypto.subtle.deriveKey(\n        {\n            name: 'PBKDF2',\n            salt: salt,\n            iterations: iterations,\n            hash: 'SHA-256'\n        },\n        baseKey,\n        // You can define the specifics of your derived key\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n    );\n\n    const returnKey = {\n        phrase: passphrase,\n        key: strongKey,\n        salt: salt,\n        iterations: iterations,\n    }\n\n    if (DBG2) {\n        console.log(\"Strong key generated: \");\n        console.log(returnKey);\n    }\n    return returnKey;\n}\n\n\n/**\n *  1024 rows of 16 words, or 16K words.  14 bits per word.  3 words should be fine.  \n *  This is 'v03' of word list projects developed at the Magnusson Institute, (c) MI 2021, used with permission (also available under MIT license)\n * See documentation and attendant commentary at https://github.com/Magnusson-Institute/passphrase.us\n * @public\n */\nconst words16K_v03 = [\n    \"that\", \"this\", \"have\", \"they\", \"what\", \"from\", \"there\", \"about\", \"know\", \"just\", \"said\", \"like\", \"will\", \"when\", \"more\", \"people\",\n    \"right\", \"time\", \"could\", \"into\", \"going\", \"other\", \"then\", \"because\", \"yeah\", \"these\", \"want\", \"good\", \"also\", \"over\", \"only\", \"come\",\n    \"very\", \"even\", \"first\", \"where\", \"most\", \"make\", \"down\", \"much\", \"those\", \"many\", \"okay\", \"take\", \"before\", \"need\", \"such\", \"little\",\n    \"work\", \"still\", \"never\", \"last\", \"year\", \"world\", \"life\", \"around\", \"tell\", \"mean\", \"between\", \"state\", \"thing\", \"both\", \"same\", \"long\",\n    \"another\", \"great\", \"three\", \"again\", \"each\", \"school\", \"home\", \"love\", \"help\", \"away\", \"thought\", \"doing\", \"find\", \"sure\", \"give\", \"used\",\n    \"always\", \"better\", \"since\", \"next\", \"today\", \"night\", \"thank\", \"place\", \"during\", \"kind\", \"maybe\", \"best\", \"anything\", \"found\", \"must\", \"family\",\n    \"point\", \"left\", \"sorry\", \"talk\", \"percent\", \"nothing\", \"head\", \"under\", \"city\", \"feel\", \"keep\", \"public\", \"high\", \"country\", \"social\", \"enough\",\n    \"call\", \"room\", \"believe\", \"mother\", \"until\", \"face\", \"once\", \"hand\", \"please\", \"case\", \"system\", \"million\", \"group\", \"father\", \"course\", \"number\",\n    \"game\", \"real\", \"someone\", \"woman\", \"health\", \"getting\", \"small\", \"water\", \"news\", \"name\", \"second\", \"change\", \"business\", \"power\", \"door\", \"story\",\n    \"often\", \"data\", \"team\", \"company\", \"question\", \"book\", \"among\", \"problem\", \"later\", \"hard\", \"already\", \"wait\", \"making\", \"person\", \"together\", \"young\",\n    \"side\", \"morning\", \"play\", \"example\", \"program\", \"able\", \"become\", \"open\", \"almost\", \"behind\", \"table\", \"live\", \"start\", \"else\", \"human\", \"john\",\n    \"early\", \"five\", \"whole\", \"history\", \"across\", \"remember\", \"idea\", \"mind\", \"process\", \"wrong\", \"season\", \"rather\", \"police\", \"control\", \"although\", \"general\",\n    \"girl\", \"everyone\", \"body\", \"leave\", \"party\", \"line\", \"large\", \"pretty\", \"child\", \"light\", \"office\", \"music\", \"nice\", \"move\", \"level\", \"fine\",\n    \"order\", \"food\", \"front\", \"stay\", \"matter\", \"either\", \"moment\", \"toward\", \"future\", \"local\", \"area\", \"sense\", \"issue\", \"hope\", \"anyone\", \"possible\",\n    \"baby\", \"voice\", \"taking\", \"turn\", \"reason\", \"close\", \"half\", \"deal\", \"student\", \"friend\", \"inside\", \"major\", \"federal\", \"service\", \"gone\", \"street\",\n    \"myself\", \"market\", \"hair\", \"sort\", \"guess\", \"bring\", \"post\", \"gave\", \"provide\", \"figure\", \"security\", \"heart\", \"outside\", \"cause\", \"tonight\", \"bush\",\n    \"wife\", \"hold\", \"model\", \"south\", \"north\", \"report\", \"phone\", \"thus\", \"above\", \"ready\", \"soon\", \"media\", \"special\", \"watch\", \"couple\", \"tried\",\n    \"available\", \"current\", \"evidence\", \"energy\", \"goes\", \"view\", \"happy\", \"science\", \"stuff\", \"field\", \"alone\", \"space\", \"easy\", \"middle\", \"photo\", \"town\",\n    \"hello\", \"month\", \"result\", \"vote\", \"park\", \"answer\", \"present\", \"common\", \"certain\", \"road\", \"west\", \"interest\", \"upon\", \"herself\", \"similar\", \"practice\",\n    \"cost\", \"nature\", \"force\", \"test\", \"sound\", \"short\", \"include\", \"series\", \"brought\", \"congress\", \"language\", \"strong\", \"risk\", \"near\", \"check\", \"agree\",\n    \"list\", \"physical\", \"nation\", \"share\", \"project\", \"video\", \"culture\", \"film\", \"action\", \"private\", \"position\", \"blood\", \"learn\", \"miss\", \"total\", \"floor\",\n    \"economy\", \"industry\", \"earth\", \"record\", \"stand\", \"green\", \"truth\", \"movie\", \"brother\", \"wall\", \"rate\", \"fall\", \"board\", \"increase\", \"husband\", \"forward\",\n    \"ahead\", \"kept\", \"defense\", \"return\", \"price\", \"note\", \"window\", \"effects\", \"response\", \"walk\", \"summer\", \"focus\", \"blue\", \"paper\", \"average\", \"east\",\n    \"type\", \"beyond\", \"quality\", \"daughter\", \"step\", \"design\", \"coach\", \"blog\", \"tomorrow\", \"final\", \"hour\", \"staff\", \"drive\", \"ability\", \"race\", \"simple\",\n    \"section\", \"access\", \"entire\", \"cold\", \"various\", \"century\", \"subject\", \"mouth\", \"chief\", \"begin\", \"page\", \"speak\", \"author\", \"brown\", \"consider\", \"minute\",\n    \"choice\", \"review\", \"write\", \"cool\", \"doctor\", \"anyway\", \"senator\", \"offer\", \"excuse\", \"seven\", \"legal\", \"amount\", \"main\", \"sleep\", \"giving\", \"huge\",\n    \"theory\", \"impact\", \"success\", \"worth\", \"friday\", \"perfect\", \"hurt\", \"onto\", \"range\", \"stopped\", \"online\", \"crazy\", \"sitting\", \"welcome\", \"trade\", \"wish\",\n    \"picture\", \"size\", \"below\", \"eight\", \"sister\", \"shut\", \"sign\", \"piece\", \"june\", \"term\", \"member\", \"allow\", \"follow\", \"cover\", \"image\", \"worry\",\n    \"save\", \"judge\", \"march\", \"source\", \"hospital\", \"trust\", \"effort\", \"heat\", \"original\", \"saturday\", \"kitchen\", \"expect\", \"pass\", \"spend\", \"union\", \"july\",\n    \"forget\", \"smile\", \"safe\", \"build\", \"hate\", \"glass\", \"message\", \"popular\", \"river\", \"account\", \"anybody\", \"skin\", \"debate\", \"honey\", \"trouble\", \"dinner\",\n    \"send\", \"address\", \"daily\", \"ball\", \"credit\", \"region\", \"caught\", \"goal\", \"afraid\", \"october\", \"army\", \"budget\", \"club\", \"text\", \"search\", \"anymore\",\n    \"visit\", \"senior\", \"unless\", \"peace\", \"primary\", \"female\", \"version\", \"civil\", \"leader\", \"sample\", \"drink\", \"scene\", \"funny\", \"april\", \"income\", \"fish\",\n    \"chair\", \"shown\", \"material\", \"favorite\", \"monday\", \"brain\", \"network\", \"explain\", \"property\", \"nuclear\", \"degree\", \"song\", \"tuesday\", \"freedom\", \"marriage\", \"basic\",\n    \"wonder\", \"stage\", \"lady\", \"scale\", \"develop\", \"base\", \"rich\", \"spring\", \"fresh\", \"coffee\", \"clean\", \"september\", \"opinion\", \"bottom\", \"stock\", \"hundred\",\n    \"title\", \"choose\", \"radio\", \"claim\", \"survey\", \"rule\", \"negative\", \"rose\", \"capital\", \"normal\", \"island\", \"easily\", \"letter\", \"dream\", \"surface\", \"wide\",\n    \"trial\", \"purpose\", \"suggest\", \"sell\", \"direct\", \"protect\", \"weekend\", \"yesterday\", \"pull\", \"measure\", \"mass\", \"thursday\", \"remain\", \"seat\", \"appear\", \"labor\",\n    \"amazing\", \"camera\", \"museum\", \"method\", \"tree\", \"alive\", \"trip\", \"patient\", \"plus\", \"shoulder\", \"grow\", \"secret\", \"firm\", \"style\", \"avoid\", \"strategy\",\n    \"edge\", \"gold\", \"heavy\", \"quick\", \"charge\", \"neither\", \"travel\", \"enjoy\", \"produce\", \"captain\", \"gender\", \"hotel\", \"task\", \"round\", \"sweet\", \"track\",\n    \"apple\", \"afternoon\", \"require\", \"truly\", \"correct\", \"hill\", \"actual\", \"ship\", \"catch\", \"annual\", \"screen\", \"moral\", \"vice\", \"lake\", \"benefit\", \"drop\",\n    \"glad\", \"quiet\", \"beach\", \"filled\", \"empty\", \"memory\", \"ride\", \"card\", \"january\", \"tiny\", \"release\", \"google\", \"reform\", \"warm\", \"dance\", \"garden\",\n    \"reduce\", \"speed\", \"rise\", \"grew\", \"neck\", \"improve\", \"slow\", \"raise\", \"prison\", \"winter\", \"extra\", \"battle\", \"august\", \"receive\", \"salt\", \"spot\",\n    \"ended\", \"foot\", \"worst\", \"library\", \"spirit\", \"code\", \"mountain\", \"distance\", \"exercise\", \"regular\", \"broken\", \"join\", \"throw\", \"machine\", \"carry\", \"stone\",\n    \"chest\", \"desk\", \"aware\", \"demand\", \"camp\", \"wear\", \"identify\", \"crowd\", \"magazine\", \"artist\", \"target\", \"paying\", \"novel\", \"decide\", \"gotten\", \"notice\",\n    \"link\", \"smart\", \"cook\", \"path\", \"advice\", \"surprise\", \"cash\", \"email\", \"twice\", \"guard\", \"snow\", \"solution\", \"spread\", \"unique\", \"bright\", \"faculty\",\n    \"train\", \"urban\", \"dress\", \"uncle\", \"lucky\", \"eating\", \"truck\", \"dude\", \"evil\", \"planet\", \"weather\", \"square\", \"decade\", \"wild\", \"damage\", \"supreme\",\n    \"prevent\", \"mention\", \"host\", \"animal\", \"teach\", \"obvious\", \"master\", \"december\", \"push\", \"balance\", \"useful\", \"file\", \"agent\", \"exist\", \"initial\", \"soft\",\n    \"finish\", \"victory\", \"rain\", \"tired\", \"birth\", \"youth\", \"nose\", \"wine\", \"digital\", \"moon\", \"shop\", \"suit\", \"option\", \"sugar\", \"valley\", \"border\",\n    \"exchange\", \"lunch\", \"core\", \"clip\", \"jury\", \"domestic\", \"lying\", \"forest\", \"unit\", \"equal\", \"boat\", \"plenty\", \"yellow\", \"apart\", \"owner\", \"democracy\",\n    \"stick\", \"wake\", \"double\", \"tall\", \"visual\", \"traffic\", \"coast\", \"proud\", \"soul\", \"busy\", \"weird\", \"famous\", \"mistake\", \"wood\", \"village\", \"cross\",\n    \"guide\", \"self\", \"flight\", \"quarter\", \"aside\", \"ring\", \"chicken\", \"voting\", \"till\", \"shirt\", \"ladies\", \"waste\", \"horse\", \"theater\", \"laugh\", \"universe\",\n    \"ensure\", \"gain\", \"smoke\", \"barely\", \"plastic\", \"sport\", \"pair\", \"february\", \"sight\", \"taste\", \"remove\", \"stuck\", \"reference\", \"match\", \"gift\", \"supply\",\n    \"farm\", \"blame\", \"boss\", \"pattern\", \"super\", \"fuel\", \"object\", \"wedding\", \"fault\", \"carefully\", \"silver\", \"indicate\", \"mama\", \"reaction\", \"seek\", \"feature\",\n    \"metal\", \"enter\", \"twenty\", \"user\", \"ought\", \"usual\", \"describe\", \"buddy\", \"parent\", \"argue\", \"beauty\", \"magic\", \"click\", \"twitter\", \"device\", \"shift\",\n    \"bunch\", \"golf\", \"assume\", \"finger\", \"achieve\", \"drew\", \"draw\", \"bridge\", \"calm\", \"silent\", \"ancient\", \"kiss\", \"tool\", \"flat\", \"drove\", \"typical\",\n    \"occur\", \"quote\", \"rising\", \"display\", \"print\", \"meat\", \"orange\", \"admit\", \"rural\", \"accident\", \"pepper\", \"pool\", \"length\", \"grace\", \"solar\", \"vehicle\",\n    \"giant\", \"fashion\", \"crew\", \"estate\", \"treat\", \"tape\", \"amendment\", \"jump\", \"faster\", \"struggle\", \"suspect\", \"cream\", \"reflect\", \"rice\", \"rare\", \"jimmy\",\n    \"afford\", \"cheese\", \"album\", \"topic\", \"milk\", \"hurry\", \"cognitive\", \"ocean\", \"grant\", \"aunt\", \"mirror\", \"solid\", \"limit\", \"copy\", \"episode\", \"outcome\",\n    \"chapter\", \"bird\", \"acts\", \"transfer\", \"affected\", \"facing\", \"numerous\", \"airport\", \"promote\", \"loud\", \"awesome\", \"flying\", \"attitude\", \"darkness\", \"vast\", \"conduct\",\n    \"upper\", \"frame\", \"danger\", \"strike\", \"pink\", \"upset\", \"stadium\", \"panel\", \"brand\", \"relief\", \"emphasis\", \"category\", \"injury\", \"diet\", \"jersey\", \"gulf\",\n    \"dust\", \"client\", \"joke\", \"escape\", \"wealth\", \"coat\", \"alright\", \"grass\", \"santa\", \"brief\", \"mobile\", \"circle\", \"encourage\", \"alcohol\", \"feed\", \"noise\",\n    \"wave\", \"stairs\", \"advance\", \"engine\", \"plate\", \"document\", \"purchase\", \"sudden\", \"zone\", \"crying\", \"draft\", \"resource\", \"unable\", \"quit\", \"engage\", \"anger\",\n    \"tone\", \"festival\", \"element\", \"latter\", \"motion\", \"gore\", \"decline\", \"chosen\", \"deeply\", \"pregnant\", \"talent\", \"hidden\", \"express\", \"armed\", \"stomach\", \"spokesman\",\n    \"session\", \"winner\", \"landscape\", \"sauce\", \"narrow\", \"duty\", \"error\", \"bike\", \"capable\", \"fruit\", \"grab\", \"actor\", \"rush\", \"lesson\", \"bread\", \"sing\",\n    \"journey\", \"avenue\", \"butter\", \"steel\", \"kick\", \"route\", \"volume\", \"turkey\", \"minimum\", \"cycle\", \"electric\", \"yard\", \"detail\", \"gaze\", \"holiday\", \"trend\",\n    \"theme\", \"cheap\", \"mixture\", \"roof\", \"junior\", \"cute\", \"relax\", \"asleep\", \"witness\", \"iron\", \"jacket\", \"prepare\", \"carbon\", \"skill\", \"mixed\", \"sand\",\n    \"sentence\", \"shadow\", \"fifth\", \"manage\", \"dean\", \"disagree\", \"unusual\", \"hero\", \"hungry\", \"replace\", \"anxiety\", \"height\", \"prefer\", \"zero\", \"creek\", \"smooth\",\n    \"proof\", \"iphone\", \"innocent\", \"mail\", \"juice\", \"item\", \"split\", \"aspect\", \"crucial\", \"cable\", \"arrest\", \"attend\", \"aids\", \"recall\", \"swear\", \"fiction\",\n    \"ticket\", \"pacific\", \"update\", \"index\", \"shock\", \"desert\", \"profit\", \"nurse\", \"thirty\", \"math\", \"minor\", \"substance\", \"dirt\", \"loan\", \"monitor\", \"entry\",\n    \"cloud\", \"hence\", \"savings\", \"ending\", \"awful\", \"angle\", \"reveal\", \"boots\", \"comfort\", \"ongoing\", \"gate\", \"fiscal\", \"sheriff\", \"ordinary\", \"stir\", \"deliver\",\n    \"bone\", \"solve\", \"fiber\", \"license\", \"olympic\", \"portion\", \"cried\", \"random\", \"navy\", \"cake\", \"select\", \"shame\", \"lift\", \"ignore\", \"exact\", \"garlic\",\n    \"pilot\", \"marine\", \"ultimate\", \"shaking\", \"veteran\", \"gallery\", \"sake\", \"wheel\", \"define\", \"citizen\", \"hunt\", \"inner\", \"maximum\", \"liberty\", \"lock\", \"fool\",\n    \"swing\", \"unknown\", \"rough\", \"switch\", \"foster\", \"upstairs\", \"royal\", \"illness\", \"logic\", \"wisdom\", \"column\", \"corn\", \"repeat\", \"prayer\", \"plot\", \"sheet\",\n    \"riding\", \"clock\", \"efficient\", \"drama\", \"stable\", \"suffer\", \"ceiling\", \"pride\", \"mystery\", \"obtain\", \"brilliant\", \"knee\", \"couch\", \"oven\", \"curious\", \"deputy\",\n    \"earn\", \"belt\", \"expand\", \"palm\", \"frozen\", \"analyst\", \"dating\", \"champion\", \"phrase\", \"slept\", \"menu\", \"sequence\", \"dynamic\", \"cousin\", \"knock\", \"essay\",\n    \"gear\", \"discover\", \"elite\", \"rescue\", \"load\", \"silly\", \"ugly\", \"flash\", \"wash\", \"scope\", \"deck\", \"olive\", \"kingdom\", \"dawn\", \"muscle\", \"domain\",\n    \"priority\", \"divorce\", \"twelve\", \"evaluate\", \"soldier\", \"dining\", \"depth\", \"ethics\", \"involve\", \"vital\", \"rapid\", \"motor\", \"tower\", \"virus\", \"burden\", \"hire\",\n    \"deer\", \"flag\", \"tank\", \"rely\", \"chase\", \"combine\", \"trick\", \"prize\", \"fame\", \"wing\", \"baking\", \"monster\", \"lawsuit\", \"wolf\", \"retail\", \"salad\",\n    \"remind\", \"connect\", \"pitch\", \"atlantic\", \"alien\", \"payment\", \"wire\", \"colonial\", \"layer\", \"forum\", \"concert\", \"whoever\", \"wise\", \"fence\", \"enhance\", \"recipe\",\n    \"tissue\", \"bench\", \"dish\", \"dole\", \"soccer\", \"badly\", \"wound\", \"pause\", \"darling\", \"uniform\", \"glance\", \"settle\", \"chef\", \"empirical\", \"brush\", \"broadcast\",\n    \"ghost\", \"chronic\", \"pentagon\", \"valid\", \"fantasy\", \"garage\", \"lemon\", \"frequent\", \"disorder\", \"mutual\", \"rent\", \"humor\", \"climb\", \"liquid\", \"auto\", \"arrive\",\n    \"affair\", \"seed\", \"diabetes\", \"convince\", \"powder\", \"fitness\", \"penalty\", \"label\", \"heritage\", \"candy\", \"deny\", \"stole\", \"yield\", \"collect\", \"fortune\", \"pope\",\n    \"extend\", \"jeans\", \"mortality\", \"tail\", \"duke\", \"stem\", \"decrease\", \"implement\", \"virtual\", \"inquiry\", \"jazz\", \"soup\", \"delay\", \"assist\", \"awake\", \"abstract\",\n    \"pizza\", \"galaxy\", \"predict\", \"sixth\", \"boost\", \"midnight\", \"burst\", \"gospel\", \"cabin\", \"android\", \"shell\", \"craft\", \"gradually\", \"poem\", \"spatial\", \"racing\",\n    \"ipad\", \"opera\", \"onion\", \"actress\", \"cotton\", \"slip\", \"lyrics\", \"utility\", \"rookie\", \"depend\", \"ideology\", \"eliminate\", \"bacteria\", \"inch\", \"gather\", \"coping\",\n    \"input\", \"tobacco\", \"exit\", \"judicial\", \"refuse\", \"horror\", \"sacred\", \"robin\", \"differ\", \"scheme\", \"anchor\", \"lawn\", \"slide\", \"backed\", \"arena\", \"invest\",\n    \"trash\", \"failing\", \"output\", \"wage\", \"clay\", \"dried\", \"exhibit\", \"genius\", \"acid\", \"beef\", \"bullet\", \"flavor\", \"enable\", \"eager\", \"abroad\", \"biology\",\n    \"clinic\", \"panic\", \"mask\", \"aging\", \"script\", \"embrace\", \"permit\", \"sword\", \"elevator\", \"lily\", \"grip\", \"nominee\", \"lonely\", \"tennis\", \"slight\", \"eligible\",\n    \"gentle\", \"ranch\", \"globe\", \"tube\", \"glory\", \"chip\", \"banking\", \"insane\", \"blade\", \"essence\", \"venture\", \"spin\", \"boring\", \"outdoor\", \"density\", \"fancy\",\n    \"timing\", \"carol\", \"brave\", \"rally\", \"cliff\", \"repair\", \"fabric\", \"saint\", \"flower\", \"tackle\", \"habit\", \"amid\", \"endless\", \"symbol\", \"spell\", \"spare\",\n    \"immune\", \"alert\", \"ridge\", \"rope\", \"garbage\", \"harbor\", \"guilt\", \"piano\", \"guitar\", \"myth\", \"alpha\", \"shed\", \"genuine\", \"observe\", \"excess\", \"alarm\",\n    \"segment\", \"faint\", \"ritual\", \"gravity\", \"width\", \"blanket\", \"manual\", \"drank\", \"oxygen\", \"bitter\", \"pound\", \"oxford\", \"mouse\", \"cruise\", \"attract\", \"chaos\",\n    \"tent\", \"rail\", \"crystal\", \"duration\", \"chemicals\", \"luxury\", \"cure\", \"trigger\", \"comic\", \"wrap\", \"praise\", \"ranked\", \"upcoming\", \"mandate\", \"breeze\", \"emerge\",\n    \"purse\", \"punch\", \"twin\", \"cave\", \"swept\", \"salmon\", \"canyon\", \"feminist\", \"gesture\", \"cloth\", \"reward\", \"phoenix\", \"monetary\", \"castle\", \"swung\", \"rifle\",\n    \"regret\", \"silk\", \"swim\", \"rage\", \"hockey\", \"precise\", \"outer\", \"buffalo\", \"submit\", \"grocery\", \"divide\", \"emotion\", \"invite\", \"skirt\", \"census\", \"tiger\",\n    \"wrist\", \"grill\", \"spray\", \"miracle\", \"patch\", \"resist\", \"tunnel\", \"brick\", \"tactics\", \"poet\", \"confirm\", \"palace\", \"shoe\", \"crop\", \"custom\", \"glow\",\n    \"caring\", \"bath\", \"thumb\", \"rival\", \"sadly\", \"pipe\", \"grief\", \"hood\", \"neutral\", \"liability\", \"pension\", \"genre\", \"install\", \"margin\", \"barn\", \"legend\",\n    \"clause\", \"outlook\", \"stimulus\", \"bless\", \"awkward\", \"harsh\", \"carpet\", \"dragon\", \"jealous\", \"lens\", \"folk\", \"alike\", \"diamond\", \"romance\", \"patrol\", \"adjust\",\n    \"mercy\", \"tribe\", \"curve\", \"parade\", \"tightly\", \"cluster\", \"cattle\", \"critic\", \"skull\", \"nerve\", \"whisper\", \"fluid\", \"alley\", \"trap\", \"casual\", \"rocket\",\n    \"rubber\", \"snake\", \"usage\", \"duck\", \"toss\", \"useless\", \"gorgeous\", \"pork\", \"basket\", \"detect\", \"vertical\", \"scare\", \"hint\", \"blast\", \"clever\", \"pastor\",\n    \"bubble\", \"twist\", \"athlete\", \"rhythm\", \"snap\", \"penny\", \"premium\", \"syndrome\", \"eaten\", \"delta\", \"tomato\", \"dutch\", \"tshirt\", \"slice\", \"unfair\", \"pole\",\n    \"dose\", \"fork\", \"dignity\", \"elegant\", \"grain\", \"lazy\", \"medal\", \"skiing\", \"geography\", \"harvest\", \"ruined\", \"orbit\", \"arise\", \"canvas\", \"blend\", \"inform\",\n    \"aged\", \"urge\", \"leaf\", \"negotiate\", \"eternal\", \"cage\", \"upgrade\", \"damp\", \"aluminum\", \"tragic\", \"alter\", \"barrel\", \"acquire\", \"liar\", \"bonus\", \"verdict\",\n    \"envelope\", \"ecosystem\", \"blinked\", \"viable\", \"chat\", \"disk\", \"spoon\", \"pulse\", \"filter\", \"molecular\", \"laptop\", \"laundry\", \"fever\", \"toast\", \"stunned\", \"shallow\",\n    \"boil\", \"pardon\", \"potato\", \"elaborate\", \"monkey\", \"ambitious\", \"roster\", \"atop\", \"hatred\", \"elbow\", \"varying\", \"municipal\", \"fossil\", \"ashamed\", \"ecology\", \"lecture\",\n    \"salvation\", \"flip\", \"fled\", \"filing\", \"oppose\", \"quantum\", \"wagon\", \"robot\", \"nail\", \"loop\", \"upward\", \"lion\", \"lamp\", \"doll\", \"rude\", \"cart\",\n    \"impose\", \"infant\", \"merry\", \"pond\", \"noble\", \"hammer\", \"purely\", \"cruel\", \"retention\", \"shrimp\", \"soap\", \"vocal\", \"bulk\", \"reluctant\", \"vessel\", \"borrow\",\n    \"waving\", \"sunny\", \"clerk\", \"retreat\", \"curled\", \"matrix\", \"junk\", \"rack\", \"uncertain\", \"notable\", \"absent\", \"fraction\", \"drill\", \"wheat\", \"asset\", \"helmet\",\n    \"ninth\", \"cherry\", \"tray\", \"sunset\", \"stack\", \"stove\", \"spouse\", \"buzz\", \"autism\", \"shine\", \"surge\", \"theft\", \"poison\", \"squeeze\", \"bacon\", \"soda\",\n    \"abruptly\", \"sustain\", \"grid\", \"jungle\", \"tide\", \"loyal\", \"nest\", \"denial\", \"approve\", \"aisle\", \"ginger\", \"glimpse\", \"diagram\", \"gaming\", \"hybrid\", \"amber\",\n    \"lung\", \"eagle\", \"cape\", \"shield\", \"semester\", \"epic\", \"exotic\", \"educate\", \"ruby\", \"ladder\", \"scout\", \"curse\", \"parish\", \"plaza\", \"radar\", \"emperor\",\n    \"thee\", \"fatal\", \"casino\", \"outfit\", \"crisp\", \"warfare\", \"fabulous\", \"rabbit\", \"employ\", \"curtain\", \"robust\", \"imperial\", \"unhappy\", \"vague\", \"absurd\", \"ankle\",\n    \"astronomy\", \"enforce\", \"intact\", \"warrior\", \"gambling\", \"flame\", \"debris\", \"pledge\", \"retire\", \"petition\", \"taxi\", \"announce\", \"trim\", \"wipe\", \"bucket\", \"hydrogen\",\n    \"trembling\", \"behave\", \"apology\", \"scan\", \"grove\", \"crush\", \"puzzle\", \"auction\", \"cope\", \"abandon\", \"fold\", \"hollow\", \"adapt\", \"waking\", \"satisfy\", \"tourist\",\n    \"vacuum\", \"yoga\", \"sculpture\", \"sphere\", \"illusion\", \"cargo\", \"juvenile\", \"dock\", \"canal\", \"vintage\", \"bean\", \"arrange\", \"silicon\", \"copper\", \"ambulance\", \"harmful\",\n    \"bust\", \"brass\", \"blah\", \"arctic\", \"pending\", \"autumn\", \"icon\", \"caution\", \"slim\", \"epidemic\", \"fragile\", \"mankind\", \"calcium\", \"merit\", \"pencil\", \"dilemma\",\n    \"moisture\", \"steak\", \"elder\", \"swift\", \"despair\", \"whale\", \"lance\", \"tweet\", \"aide\", \"humble\", \"thunder\", \"bicycle\", \"payroll\", \"algorithm\", \"marathon\", \"bargain\",\n    \"unlimited\", \"twilight\", \"inspire\", \"dioxide\", \"wool\", \"tuition\", \"herbs\", \"rebel\", \"subway\", \"halt\", \"upright\", \"organ\", \"sadness\", \"pill\", \"plug\", \"marble\",\n    \"coke\", \"sierra\", \"buyer\", \"mansion\", \"audit\", \"echo\", \"triumph\", \"bronze\", \"hawk\", \"onset\", \"pouring\", \"boxing\", \"clarify\", \"robe\", \"rebuild\", \"timothy\",\n    \"widow\", \"fatigue\", \"diary\", \"cosmic\", \"coin\", \"sank\", \"expose\", \"setup\", \"outrage\", \"fade\", \"synthesis\", \"edit\", \"spike\", \"dairy\", \"upside\", \"gown\",\n    \"sponsor\", \"float\", \"maid\", \"baked\", \"arrow\", \"seldom\", \"crane\", \"catalog\", \"sneak\", \"neatly\", \"lounge\", \"elephant\", \"drift\", \"grinning\", \"bachelor\", \"dusk\",\n    \"empathy\", \"pumpkin\", \"guts\", \"urging\", \"goat\", \"cancel\", \"antique\", \"cinema\", \"donate\", \"petty\", \"trophy\", \"punk\", \"neglect\", \"tooth\", \"roast\", \"outbreak\",\n    \"peanut\", \"whip\", \"plausible\", \"drained\", \"veto\", \"monument\", \"yogurt\", \"armor\", \"kidney\", \"hull\", \"drum\", \"asthma\", \"balcony\", \"obscure\", \"slot\", \"daylight\",\n    \"slender\", \"shaft\", \"shaping\", \"parsley\", \"unaware\", \"donor\", \"awhile\", \"aviation\", \"timber\", \"dismiss\", \"utter\", \"pioneer\", \"tattoo\", \"velocity\", \"limb\", \"immense\",\n    \"absorb\", \"naive\", \"misery\", \"peculiar\", \"dodge\", \"clown\", \"arbitrary\", \"parole\", \"majesty\", \"runner\", \"evolve\", \"glue\", \"frost\", \"ozone\", \"lining\", \"syrup\",\n    \"gossip\", \"melt\", \"sage\", \"cane\", \"rigid\", \"impulse\", \"erosion\", \"ferry\", \"maple\", \"picnic\", \"void\", \"dash\", \"glove\", \"burger\", \"crawl\", \"skies\",\n    \"vivid\", \"trio\", \"cinnamon\", \"oval\", \"velvet\", \"banana\", \"axis\", \"indoor\", \"fury\", \"enduring\", \"barbecue\", \"glare\", \"prone\", \"eats\", \"wikipedia\", \"slate\",\n    \"cement\", \"blouse\", \"salon\", \"lure\", \"snack\", \"knelt\", \"puppy\", \"caucus\", \"feast\", \"gratitude\", \"dial\", \"turtle\", \"mold\", \"wizard\", \"lend\", \"visa\",\n    \"yahoo\", \"proximity\", \"bartender\", \"bolt\", \"viral\", \"slam\", \"thigh\", \"stamp\", \"drone\", \"cathedral\", \"venue\", \"sketch\", \"garnish\", \"coherent\", \"stool\", \"foil\",\n    \"gazing\", \"delete\", \"bounce\", \"aggregate\", \"lunar\", \"dubbed\", \"chop\", \"zombie\", \"thrive\", \"sanctuary\", \"dislike\", \"nephew\", \"modify\", \"eclipse\", \"polar\", \"badge\",\n    \"foam\", \"arose\", \"monopoly\", \"panama\", \"amused\", \"banner\", \"shone\", \"fading\", \"petroleum\", \"runway\", \"fidelity\", \"verify\", \"maturity\", \"unwilling\", \"ashes\", \"spider\",\n    \"rumor\", \"navigate\", \"blunt\", \"preacher\", \"gleaming\", \"attach\", \"refined\", \"bunny\", \"cedar\", \"tapping\", \"ample\", \"nickname\", \"daisy\", \"vista\", \"coral\", \"ribbon\",\n    \"reunion\", \"jeep\", \"tipped\", \"outward\", \"exile\", \"chunk\", \"resemble\", \"envy\", \"umbrella\", \"unrelated\", \"cough\", \"flock\", \"vacant\", \"parlor\", \"masculine\", \"uranium\",\n    \"obstacle\", \"ditch\", \"stubborn\", \"poker\", \"naming\", \"coconut\", \"unstable\", \"exclude\", \"affiliate\", \"module\", \"reps\", \"semantic\", \"crept\", \"chewing\", \"bats\", \"cannon\",\n    \"psychic\", \"hazard\", \"unwanted\", \"ethanol\", \"ragged\", \"prolonged\", \"sturdy\", \"ivory\", \"trinity\", \"factual\", \"ipod\", \"dime\", \"bundle\", \"riot\", \"apostle\", \"diner\",\n    \"culinary\", \"lucrative\", \"emission\", \"turf\", \"nebula\", \"ramp\", \"juror\", \"demise\", \"shrug\", \"unsure\", \"ninja\", \"turmoil\", \"rotten\", \"stellar\", \"imminent\", \"cozy\",\n    \"disbelief\", \"vowed\", \"scrap\", \"rehab\", \"vigorous\", \"tile\", \"uneasy\", \"dentist\", \"endorse\", \"dove\", \"symptom\", \"fringe\", \"amnesty\", \"scoop\", \"cilantro\", \"xbox\",\n    \"altitude\", \"batch\", \"vest\", \"volatile\", \"liking\", \"itunes\", \"apron\", \"raven\", \"shove\", \"fetch\", \"napkin\", \"heap\", \"nanny\", \"jelly\", \"dwarf\", \"suburb\",\n    \"quilt\", \"scam\", \"clash\", \"regain\", \"cache\", \"humming\", \"abnormal\", \"frantic\", \"dizzy\", \"nineteen\", \"exemption\", \"popcorn\", \"cloak\", \"bulb\", \"unison\", \"herald\",\n    \"laurel\", \"paycheck\", \"elusive\", \"celery\", \"cabbage\", \"thickness\", \"kinship\", \"stereo\", \"vegan\", \"onstage\", \"dictator\", \"angrily\", \"anyhow\", \"dipped\", \"reckless\", \"seminar\",\n    \"darn\", \"niece\", \"frown\", \"trilogy\", \"daunting\", \"hesitate\", \"salsa\", \"trivial\", \"boxer\", \"swell\", \"ounce\", \"surround\", \"pony\", \"unseen\", \"rogue\", \"saga\",\n    \"pyramid\", \"marvelous\", \"tying\", \"wrath\", \"voyage\", \"rover\", \"gigantic\", \"scotch\", \"sesame\", \"friction\", \"hypocrisy\", \"baggage\", \"diminish\", \"curator\", \"affluent\", \"coma\",\n    \"stew\", \"rinse\", \"zoning\", \"ebay\", \"upscale\", \"exhaust\", \"vendor\", \"jaws\", \"woven\", \"violin\", \"oops\", \"daytime\", \"citation\", \"glucose\", \"drown\", \"geometry\",\n    \"agony\", \"rebound\", \"alto\", \"carnival\", \"obedience\", \"hush\", \"pulmonary\", \"cavalry\", \"purity\", \"unhealthy\", \"refrain\", \"awoke\", \"anatomy\", \"unpopular\", \"estrogen\", \"java\",\n    \"lumber\", \"lavender\", \"poking\", \"perennial\", \"clutch\", \"uninsured\", \"neon\", \"skeleton\", \"shack\", \"parmesan\", \"dumping\", \"chevy\", \"splendid\", \"reproduce\", \"avid\", \"geek\",\n    \"pueblo\", \"dice\", \"scroll\", \"sedan\", \"tilt\", \"sway\", \"mule\", \"hamlet\", \"grape\", \"jasmine\", \"tavern\", \"raging\", \"deed\", \"upheld\", \"cube\", \"disregard\",\n    \"cone\", \"nutrient\", \"oppressed\", \"suing\", \"crimson\", \"humility\", \"choking\", \"walnut\", \"rash\", \"foyer\", \"oyster\", \"swan\", \"perpetual\", \"query\", \"font\", \"zoom\",\n    \"slogan\", \"frenzy\", \"yeast\", \"vascular\", \"derby\", \"harness\", \"upload\", \"pajamas\", \"trunks\", \"phantom\", \"carving\", \"drastic\", \"staple\", \"uneven\", \"flap\", \"unchanged\",\n    \"anthem\", \"mushroom\", \"gluten\", \"exquisite\", \"drizzle\", \"asparagus\", \"irregular\", \"bleak\", \"proactive\", \"sloppy\", \"cortex\", \"spur\", \"womb\", \"exodus\", \"lent\", \"obsolete\",\n    \"grazing\", \"almighty\", \"lantern\", \"salute\", \"atom\", \"hefty\", \"bony\", \"polo\", \"floral\", \"glacier\", \"raft\", \"deploy\", \"guru\", \"enroll\", \"kosher\", \"mutation\",\n    \"sibling\", \"revolt\", \"ouch\", \"brewing\", \"alibi\", \"amino\", \"blazing\", \"falcon\", \"hacking\", \"flint\", \"baton\", \"depict\", \"gamma\", \"aspirin\", \"nylon\", \"pediatric\",\n    \"broom\", \"acre\", \"sabbath\", \"glamorous\", \"turbine\", \"extinct\", \"unsafe\", \"quake\", \"bamboo\", \"bolster\", \"groom\", \"flick\", \"mantra\", \"hastily\", \"graffiti\", \"pavilion\",\n    \"rust\", \"mundane\", \"bluff\", \"uphill\", \"sediment\", \"enzyme\", \"sermon\", \"coronary\", \"blizzard\", \"uncover\", \"bash\", \"ebook\", \"avalanche\", \"slapping\", \"cadillac\", \"perjury\",\n    \"unpaid\", \"dazzling\", \"cavity\", \"freight\", \"capsule\", \"disgrace\", \"crib\", \"unfold\", \"empower\", \"blush\", \"clone\", \"motto\", \"sizable\", \"uphold\", \"plywood\", \"tidy\",\n    \"tidal\", \"cider\", \"disdain\", \"bonding\", \"dominion\", \"gothic\", \"envision\", \"nerd\", \"splashed\", \"ominous\", \"manor\", \"unlawful\", \"dotted\", \"subgroup\", \"taps\", \"outing\",\n    \"mosaic\", \"eccentric\", \"nurture\", \"cupped\", \"sitcom\", \"mashed\", \"immortal\", \"demeanor\", \"abide\", \"sushi\", \"rethink\", \"sinister\", \"stench\", \"brethren\", \"unnatural\", \"multiply\",\n    \"pagan\", \"cylinder\", \"karma\", \"bogus\", \"unequal\", \"halves\", \"rumble\", \"claw\", \"paced\", \"monastery\", \"expire\", \"outgoing\", \"garment\", \"stumble\", \"await\", \"deacon\",\n    \"morbidity\", \"mummy\", \"ceramics\", \"citrus\", \"untouched\", \"evoke\", \"stout\", \"pesticide\", \"duplicate\", \"frying\", \"cradle\", \"lavish\", \"siren\", \"crescent\", \"frail\", \"dagger\",\n    \"mute\", \"vineyard\", \"pupil\", \"pulp\", \"corporal\", \"latitude\", \"voltage\", \"abdominal\", \"junction\", \"rearview\", \"diaper\", \"moaning\", \"skype\", \"stash\", \"paddle\", \"putt\",\n    \"fetal\", \"eggplant\", \"diploma\", \"pouch\", \"evacuate\", \"haunt\", \"slab\", \"deity\", \"thud\", \"slacks\", \"upbeat\", \"varsity\", \"lizard\", \"skipping\", \"mating\", \"dart\",\n    \"kitten\", \"elastic\", \"debtor\", \"catfish\", \"vanish\", \"kudos\", \"immature\", \"smashing\", \"luminous\", \"maverick\", \"hamburger\", \"sarcasm\", \"shudder\", \"poppy\", \"goofy\", \"murky\",\n    \"dwelling\", \"usable\", \"taco\", \"diocese\", \"slit\", \"mahogany\", \"sublime\", \"ascertain\", \"licking\", \"wiring\", \"nicotine\", \"brittle\", \"aroma\", \"swarm\", \"subtly\", \"unnoticed\",\n    \"enlarged\", \"brunch\", \"sniff\", \"duct\", \"rhyme\", \"skyline\", \"snoring\", \"smuggling\", \"mango\", \"sludge\", \"onboard\", \"cascade\", \"botanical\", \"vantage\", \"safari\", \"fascism\",\n    \"hurdle\", \"grunt\", \"cucumber\", \"armchair\", \"avatar\", \"wrought\", \"skewed\", \"unethical\", \"chlorine\", \"casket\", \"usher\", \"angular\", \"mural\", \"sulfur\", \"prenatal\", \"enrich\",\n    \"latch\", \"tainted\", \"parcel\", \"hash\", \"tutor\", \"hulk\", \"apache\", \"stiffness\", \"colt\", \"untrue\", \"plural\", \"bobbing\", \"algebra\", \"tanned\", \"clad\", \"capped\",\n    \"slashed\", \"wifi\", \"setback\", \"kettle\", \"ludicrous\", \"grit\", \"calorie\", \"tumble\", \"ultra\", \"entail\", \"pang\", \"obnoxious\", \"goggles\", \"mulch\", \"delusion\", \"giggle\",\n    \"sagging\", \"unspoken\", \"utmost\", \"caliber\", \"sprung\", \"morse\", \"cricket\", \"slain\", \"jolt\", \"embody\", \"dugout\", \"payday\", \"sabotage\", \"thorn\", \"ignition\", \"defy\",\n    \"shabby\", \"crook\", \"culprit\", \"dimly\", \"skeptic\", \"antarctic\", \"omega\", \"subdued\", \"swirl\", \"reopen\", \"palpable\", \"rewrite\", \"cactus\", \"bloated\", \"craving\", \"guise\",\n    \"panther\", \"wrench\", \"jogging\", \"ripple\", \"getaway\", \"jolly\", \"finch\", \"reclaim\", \"shuffle\", \"dolphin\", \"fanning\", \"uptown\", \"voucher\", \"rosy\", \"rift\", \"ebony\",\n    \"rigor\", \"espionage\", \"brim\", \"nutmeg\", \"caravan\", \"coauthor\", \"gloss\", \"omission\", \"hurled\", \"giddy\", \"manned\", \"payer\", \"whiff\", \"helium\", \"bribe\", \"manifesto\",\n    \"uncanny\", \"geology\", \"janitor\", \"ridden\", \"hazy\", \"envoy\", \"jockey\", \"comrade\", \"cheddar\", \"imitate\", \"robbing\", \"afloat\", \"elves\", \"anew\", \"oasis\", \"prowess\",\n    \"agile\", \"augmented\", \"onward\", \"kung\", \"blatantly\", \"flanked\", \"erratic\", \"cubicle\", \"muzzle\", \"seismic\", \"groin\", \"sullen\", \"hassle\", \"utopia\", \"shawl\", \"eloquent\",\n    \"freckles\", \"trolling\", \"serpent\", \"siding\", \"glitter\", \"grueling\", \"wand\", \"dwindling\", \"kite\", \"diligence\", \"rake\", \"polymer\", \"annex\", \"feeble\", \"banish\", \"icing\",\n    \"reuse\", \"denote\", \"emit\", \"payback\", \"curfew\", \"parrot\", \"blitz\", \"relocate\", \"mower\", \"cassette\", \"cork\", \"slug\", \"stitch\", \"uptake\", \"linoleum\", \"unbiased\",\n    \"sinner\", \"huddle\", \"plutonium\", \"enclosure\", \"wiry\", \"acorn\", \"flyer\", \"chubby\", \"smirk\", \"reputable\", \"myspace\", \"edgy\", \"plow\", \"lucid\", \"espresso\", \"roaming\",\n    \"dosage\", \"dill\", \"swipe\", \"rectangle\", \"yarn\", \"saline\", \"lagoon\", \"balsamic\", \"barley\", \"sled\", \"rejoice\", \"coliseum\", \"gutter\", \"pancake\", \"clatter\", \"frivolous\",\n    \"wavy\", \"enchanted\", \"clamp\", \"borough\", \"remnant\", \"duffel\", \"whomever\", \"gulp\", \"lagged\", \"opium\", \"subprime\", \"idly\", \"bulge\", \"onslaught\", \"tummy\", \"frayed\",\n    \"cadmium\", \"morphine\", \"plethora\", \"ferocious\", \"tweak\", \"rink\", \"rambling\", \"satchel\", \"desolate\", \"pecan\", \"unmarked\", \"arson\", \"esquire\", \"faucet\", \"aptly\", \"coil\",\n    \"perish\", \"yummy\", \"clump\", \"flirt\", \"chute\", \"frighten\", \"crouch\", \"buggy\", \"python\", \"aloft\", \"brute\", \"murmuring\", \"pebble\", \"quail\", \"badass\", \"rupture\",\n    \"manpower\", \"quadrant\", \"jingle\", \"savor\", \"sliver\", \"manly\", \"rebirth\", \"fervor\", \"unruly\", \"expulsion\", \"flop\", \"ravine\", \"fiddle\", \"ditto\", \"engraved\", \"jargon\",\n    \"seizing\", \"muck\", \"manhood\", \"entourage\", \"shrank\", \"panda\", \"nectar\", \"recreate\", \"paternal\", \"spied\", \"veal\", \"acutely\", \"karate\", \"lego\", \"mammal\", \"ploy\",\n    \"atypical\", \"shredder\", \"purge\", \"marlin\", \"exalted\", \"deem\", \"waltz\", \"enamel\", \"dedicate\", \"unwelcome\", \"hangover\", \"cofounder\", \"celtic\", \"aptitude\", \"daycare\", \"deafening\",\n    \"creole\", \"rabid\", \"kinetic\", \"emblem\", \"whoops\", \"mayday\", \"lash\", \"duchess\", \"unlucky\", \"cadet\", \"upfront\", \"deprive\", \"acclaim\", \"nutty\", \"ammonia\", \"conjure\",\n    \"rarity\", \"fondly\", \"jumbo\", \"lanky\", \"joyous\", \"extortion\", \"douche\", \"juggling\", \"simmering\", \"lark\", \"huff\", \"mumbling\", \"enigmatic\", \"rundown\", \"visor\", \"eradicate\",\n    \"paprika\", \"debit\", \"paparazzi\", \"uplifting\", \"canine\", \"tucking\", \"duly\", \"fang\", \"edging\", \"uproar\", \"epiphany\", \"afar\", \"deftly\", \"hunk\", \"maroon\", \"bleep\",\n    \"pungent\", \"embark\", \"staunch\", \"cupcake\", \"pamphlet\", \"cobalt\", \"whimsical\", \"audacity\", \"wreath\", \"evade\", \"wrinkle\", \"dimmed\", \"grimace\", \"cringe\", \"nutshell\", \"wilt\",\n    \"neuron\", \"unsolved\", \"fanatic\", \"macaroni\", \"tinker\", \"gauze\", \"rickety\", \"pesky\", \"wasp\", \"pessimism\", \"slang\", \"veggie\", \"unworthy\", \"phosphate\", \"unquote\", \"ricotta\",\n    \"snagged\", \"elongated\", \"grudge\", \"sprout\", \"fleshy\", \"synopsis\", \"thaw\", \"derail\", \"drab\", \"calamity\", \"skid\", \"sanitary\", \"lazily\", \"xerox\", \"lair\", \"snout\",\n    \"onscreen\", \"yiddish\", \"evasion\", \"smog\", \"porous\", \"shrouded\", \"bagel\", \"sheath\", \"unicorn\", \"secluded\", \"itinerary\", \"coexist\", \"stalemate\", \"astute\", \"sift\", \"pluck\",\n    \"suction\", \"yanking\", \"bruising\", \"esteemed\", \"rebate\", \"dingy\", \"widget\", \"oncoming\", \"exuberant\", \"wobbly\", \"prelude\", \"bonfire\", \"tingling\", \"nape\", \"clover\", \"chug\",\n    \"dyslexia\", \"prozac\", \"mutt\", \"quiver\", \"scuba\", \"jinx\", \"easel\", \"serotonin\", \"endanger\", \"jarring\", \"wharf\", \"waffle\", \"ajar\", \"twig\", \"mace\", \"pelvis\",\n    \"banter\", \"pruning\", \"nimble\", \"anemia\", \"limelight\", \"seduce\", \"ligament\", \"anaerobic\", \"wolverine\", \"cryptic\", \"lurch\", \"kerosene\", \"boasting\", \"panorama\", \"babbling\", \"umpire\",\n    \"creme\", \"fanfare\", \"posh\", \"jukebox\", \"enquirer\", \"limping\", \"unbroken\", \"iodine\", \"deflation\", \"risotto\", \"hazing\", \"idiocy\", \"goliath\", \"unbeaten\", \"zebra\", \"rants\",\n    \"omit\", \"tarmac\", \"dork\", \"dormitory\", \"skimmed\", \"feisty\", \"stoic\", \"arming\", \"crux\", \"oxidation\", \"mournful\", \"swoop\", \"saffron\", \"fender\", \"cola\", \"pried\",\n    \"gimmick\", \"maggot\", \"grumbling\", \"deduct\", \"fedora\", \"sassy\", \"swagger\", \"agnostic\", \"obituary\", \"slum\", \"gong\", \"rind\", \"nemesis\", \"nifty\", \"erupt\", \"gullible\",\n    \"awry\", \"mowing\", \"snitch\", \"woof\", \"sizzling\", \"wince\", \"yelp\", \"broiler\", \"irritable\", \"retorted\", \"alias\", \"bovine\", \"shimmer\", \"scowling\", \"earring\", \"bonnet\",\n    \"molasses\", \"sneeze\", \"ruse\", \"zeppelin\", \"canteen\", \"ether\", \"unskilled\", \"reiterate\", \"spew\", \"hamper\", \"doable\", \"scorpion\", \"almanac\", \"daybreak\", \"legislate\", \"skyward\",\n    \"swivel\", \"earshot\", \"outage\", \"tiring\", \"tulip\", \"jokingly\", \"aloof\", \"donut\", \"wistful\", \"churn\", \"dares\", \"turret\", \"cleft\", \"blot\", \"tantrum\", \"outnumber\",\n    \"epilepsy\", \"baritone\", \"italics\", \"atrium\", \"askew\", \"dandy\", \"hatchet\", \"wannabe\", \"fable\", \"reshape\", \"opal\", \"linguini\", \"viper\", \"uptight\", \"wispy\", \"hypnotic\",\n    \"sash\", \"dorsal\", \"sultry\", \"blob\", \"shun\", \"glaucoma\", \"greyhound\", \"luster\", \"raking\", \"unnerving\", \"unscathed\", \"unmoving\", \"evaporate\", \"quack\", \"flaring\", \"lukewarm\",\n    \"fraternal\", \"smudge\", \"bogged\", \"dilute\", \"banjo\", \"splurge\", \"gauntlet\", \"lilac\", \"awning\", \"nautical\", \"baffling\", \"varnish\", \"kleenex\", \"bonanza\", \"upturned\", \"amigo\",\n    \"scapegoat\", \"snarl\", \"anyplace\", \"otter\", \"lapel\", \"panhandle\", \"whiny\", \"kangaroo\", \"unwrapped\", \"renounce\", \"alkaline\", \"aqua\", \"siberian\", \"omen\", \"etching\", \"bluish\",\n    \"rigging\", \"flier\", \"celibacy\", \"kilometer\", \"saxophone\", \"undress\", \"alfalfa\", \"peddling\", \"dainty\", \"smitten\", \"blip\", \"elated\", \"unplanned\", \"paltry\", \"dribble\", \"geriatric\",\n    \"unholy\", \"unproven\", \"hermit\", \"litmus\", \"synergy\", \"schilling\", \"silt\", \"mutiny\", \"mardi\", \"wimp\", \"drool\", \"peroxide\", \"tint\", \"payable\", \"reggae\", \"unending\",\n    \"clang\", \"floss\", \"atrocious\", \"detonate\", \"malt\", \"rimmed\", \"sizing\", \"hamster\", \"chirping\", \"tabby\", \"roulette\", \"humvee\", \"destitute\", \"unfunded\", \"crock\", \"lard\",\n    \"catwalk\", \"shush\", \"swab\", \"gaffe\", \"scolding\", \"ladle\", \"trifle\", \"unkind\", \"deport\", \"lapping\", \"jigsaw\", \"surname\", \"snuff\", \"fructose\", \"resale\", \"leggings\",\n    \"feline\", \"zealous\", \"jalapeno\", \"cuddle\", \"amiss\", \"kimono\", \"napping\", \"cusp\", \"chump\", \"thong\", \"amiable\", \"isotope\", \"rascal\", \"reptile\", \"clunky\", \"unopened\",\n    \"caddie\", \"unkempt\", \"quirk\", \"wick\", \"romp\", \"surcharge\", \"zodiac\", \"raider\", \"shank\", \"aghast\", \"glazing\", \"kennel\", \"perky\", \"slush\", \"gusto\", \"camcorder\",\n    \"stipend\", \"knapsack\", \"gurgling\", \"reimburse\", \"flaky\", \"preheated\", \"blissful\", \"yonder\", \"roving\", \"reaffirm\", \"amulet\", \"aloha\", \"movable\", \"chowder\", \"untapped\", \"cinch\",\n    \"nugget\", \"groggy\", \"detract\", \"vibes\", \"gills\", \"ablaze\", \"musket\", \"cupid\", \"tycoon\", \"deuce\", \"umbilical\", \"tubular\", \"pout\", \"jittery\", \"truffle\", \"knoll\",\n    \"femur\", \"flaxseed\", \"haphazard\", \"folic\", \"defuse\", \"livable\", \"trespass\", \"ointment\", \"magma\", \"nibble\", \"appointee\", \"frisbee\", \"afoot\", \"pelt\", \"dissuade\", \"deodorant\",\n    \"sphinx\", \"euphemism\", \"affront\", \"pelican\", \"sauna\", \"rudder\", \"vengeful\", \"reappear\", \"chihuahua\", \"reheat\", \"gondola\", \"rewind\", \"flounder\", \"labrador\", \"licorice\", \"abrasive\",\n    \"mossy\", \"smock\", \"abreast\", \"hemlock\", \"tibia\", \"polka\", \"gibberish\", \"drudge\", \"ooze\", \"lurk\", \"volley\", \"outhouse\", \"magenta\", \"velcro\", \"sycamore\", \"irate\",\n    \"crayon\", \"poplar\", \"wafer\", \"cobbler\", \"darwinism\", \"phobia\", \"tiara\", \"barometer\", \"rename\", \"baguette\", \"enslave\", \"wham\", \"rotunda\", \"unshaven\", \"tarot\", \"grub\",\n    \"porridge\", \"galore\", \"docile\", \"lullaby\", \"fidgeting\", \"slaw\", \"coerce\", \"gooey\", \"snugly\", \"skyrocket\", \"lint\", \"guacamole\", \"stupor\", \"frustrate\", \"snooze\", \"unafraid\",\n    \"boxy\", \"thyself\", \"balmy\", \"hertz\", \"aloe\", \"endpoint\", \"geiger\", \"ibuprofen\", \"gory\", \"daydream\", \"kiwi\", \"taunt\", \"judo\", \"exorcism\", \"esophagus\", \"mulberry\",\n    \"joystick\", \"unraveled\", \"froth\", \"undated\", \"snippet\", \"valuables\", \"ruckus\", \"crevice\", \"zipping\", \"dowry\", \"lubricant\", \"prewar\", \"ungodly\", \"petal\", \"scion\", \"raffle\",\n    \"elude\", \"croak\", \"runt\", \"unjustly\", \"eskimo\", \"gush\", \"maimed\", \"clique\", \"unsigned\", \"goon\", \"elixir\", \"silo\", \"kiln\", \"plop\", \"talon\", \"oxymoron\",\n    \"kelp\", \"dexterity\", \"pellet\", \"anvil\", \"corset\", \"scavenger\", \"twirl\", \"jugular\", \"popsicle\", \"purr\", \"fretted\", \"gopher\", \"crudely\", \"oblong\", \"scoff\", \"conical\",\n    \"serrated\", \"tutu\", \"gangly\", \"snide\", \"ritalin\", \"stoke\", \"zips\", \"tartar\", \"duress\", \"doze\", \"dutiful\", \"earpiece\", \"dimness\", \"peso\", \"thrash\", \"jailhouse\",\n    \"opacity\", \"subatomic\", \"imbecile\", \"venomous\", \"obtuse\", \"dimple\", \"smother\", \"viscous\", \"paging\", \"quintet\", \"mocha\", \"clench\", \"gummy\", \"chivalry\", \"dilation\", \"disengage\",\n    \"suave\", \"icky\", \"urchin\", \"talisman\", \"upswing\", \"blighted\", \"tidbit\", \"doodle\", \"savanna\", \"bunt\", \"jubilant\", \"zoology\", \"debunk\", \"jester\", \"vanquish\", \"estimator\",\n    \"baboon\", \"letdown\", \"rasping\", \"hula\", \"devalue\", \"mauve\", \"eject\", \"rerun\", \"rephrase\", \"porcupine\", \"reexamine\", \"ember\", \"rummage\", \"woozy\", \"cytoplasm\", \"facsimile\",\n    \"tabasco\", \"jovial\", \"ferment\", \"wooing\", \"pogo\", \"padlock\", \"gosling\", \"swerve\", \"gleeful\", \"jaunt\", \"unadorned\", \"bungee\", \"undivided\", \"armrest\", \"marmalade\", \"gizmo\",\n    \"lisp\", \"slinky\", \"plexiglas\", \"sinuous\", \"vixen\", \"hypertext\", \"krypton\", \"aqueduct\", \"kerchief\", \"mobster\", \"joyfully\", \"emcee\", \"aeration\", \"whacking\", \"armadillo\", \"reentry\",\n    \"boozy\", \"excavate\", \"ripening\", \"onshore\", \"bobcat\", \"unelected\", \"yapping\", \"pawing\", \"poncho\", \"siamese\", \"albatross\", \"antsy\", \"chitchat\", \"seltzer\", \"muppet\", \"gloating\",\n    \"hazelnut\", \"pliable\", \"onyx\", \"lather\", \"capricorn\", \"uncut\", \"aorta\", \"nastiness\", \"gander\", \"eggnog\", \"excretion\", \"exonerate\", \"cesspool\", \"purveyor\", \"mayflower\", \"busboy\",\n    \"mulled\", \"figment\", \"girdle\", \"lethargic\", \"encrypt\", \"evict\", \"ergonomic\", \"undying\", \"culminate\", \"wriggle\", \"blemish\", \"walrus\", \"tidings\", \"germinate\", \"trowel\", \"suds\",\n    \"ageless\", \"tarnish\", \"dejected\", \"twerp\", \"antler\", \"unguarded\", \"coleslaw\", \"synapse\", \"mongrel\", \"thwarting\", \"aground\", \"scuttle\", \"halogen\", \"ovary\", \"borax\", \"gnarly\",\n    \"snub\", \"nacho\", \"gout\", \"papyrus\", \"iguana\", \"grope\", \"nullify\", \"kilt\", \"vindicate\", \"galvanize\", \"alabaster\", \"panning\", \"wasabi\", \"rework\", \"trombone\", \"tinsel\",\n    \"treble\", \"prancing\", \"exes\", \"hanky\", \"blimp\", \"knickers\", \"thieving\", \"defraud\", \"briar\", \"trident\", \"upwind\", \"slouching\", \"koala\", \"tamper\", \"nuptials\", \"engulf\",\n    \"garter\", \"barman\", \"glisten\", \"frugality\", \"earmark\", \"blubber\", \"ahoy\", \"latrine\", \"puma\", \"sepia\", \"unimpeded\", \"drapery\", \"vivacious\", \"gawk\", \"banshee\", \"nutcase\",\n    \"gruffly\", \"ribcage\", \"rekindle\", \"cesarean\", \"unrivaled\", \"jawline\", \"vaseline\", \"quench\", \"tusk\", \"snazzy\", \"sappy\", \"pedometer\", \"unbounded\", \"tapioca\", \"bobsled\", \"cabana\",\n    \"tubby\", \"sapling\", \"gecko\", \"flaccid\", \"unbuckled\", \"lumping\", \"humpback\", \"haiku\", \"jurist\", \"lasso\", \"urologist\", \"sputter\", \"tinfoil\", \"gutless\", \"encircle\", \"boxcar\",\n    \"impish\", \"kooky\", \"frolic\", \"sasquatch\", \"geranium\", \"flyover\", \"schnapps\", \"cackle\", \"unaltered\", \"prude\", \"falsify\", \"matador\", \"octagon\", \"unpeeled\", \"armful\", \"reroute\",\n    \"unfilled\", \"zesty\", \"payphone\", \"pucker\", \"unzip\", \"litigate\", \"eggshell\", \"hunchback\", \"duvet\", \"powwow\", \"spry\", \"barstool\", \"flail\", \"linseed\", \"legume\", \"mumps\",\n    \"slurp\", \"marshy\", \"dubiously\", \"siesta\", \"unedited\", \"dastardly\", \"ogle\", \"aflame\", \"wrangle\", \"osmosis\", \"dupe\", \"reissue\", \"vagabond\", \"carmaker\", \"flogging\", \"roping\",\n    \"ardently\", \"gnat\", \"oink\", \"sardine\", \"scurvy\", \"sulk\", \"pumice\", \"ellipse\", \"tiptoeing\", \"jiffy\", \"spiffy\", \"spud\", \"tassel\", \"petunia\", \"ashy\", \"tamer\",\n    \"spilt\", \"legwork\", \"getup\", \"poach\", \"uncivil\", \"anaconda\", \"exfoliate\", \"pauper\", \"ramrod\", \"useable\", \"doozy\", \"cahoots\", \"oboe\", \"leotard\", \"boogeyman\", \"yippee\",\n    \"bonsai\", \"chafe\", \"munchkin\", \"varmint\", \"ragweed\", \"sulphate\", \"earful\", \"unfeeling\", \"tamale\", \"hyphen\", \"scuff\", \"egotism\", \"outtakes\", \"abacus\", \"tarantula\", \"smelting\",\n    \"elope\", \"urethane\", \"dayroom\", \"igloo\", \"gristle\", \"caboose\", \"opossum\", \"barcode\", \"amniotic\", \"datebook\", \"clavicle\", \"bazooka\", \"unturned\", \"dweeb\", \"scone\", \"tiling\",\n    \"untying\", \"ritzy\", \"amicably\", \"onlooker\", \"legroom\", \"chomp\", \"spyglass\", \"unroll\", \"levitate\", \"thimble\", \"poser\", \"badness\", \"demystify\", \"pummel\", \"cabdriver\", \"henna\",\n    \"gerbil\", \"senorita\", \"udder\", \"zookeeper\", \"laxative\", \"gigolo\", \"gating\", \"kebab\", \"joyride\", \"eardrum\", \"swaddling\", \"zigzagged\", \"ravage\", \"cussed\", \"talcum\", \"sinless\",\n    \"trodden\", \"absinthe\", \"camisole\", \"duller\", \"daffodil\", \"pectin\", \"ream\", \"reorder\", \"tadpole\", \"omnivore\", \"disinfect\", \"rimless\", \"utensil\", \"stowing\", \"catlike\", \"bodacious\",\n    \"skedaddle\", \"nuzzle\", \"acetone\", \"egging\", \"cubbyhole\", \"lapdog\", \"boondocks\", \"malformed\", \"busload\", \"penknife\", \"shucking\", \"egomaniac\", \"cobweb\", \"anagram\", \"smolder\", \"unexpired\",\n    \"taekwondo\", \"fritter\", \"enrage\", \"runaround\", \"abridge\", \"exhume\", \"reattach\", \"scabby\", \"botch\", \"gargle\", \"lushly\", \"enunciate\", \"plod\", \"doily\", \"hexagon\", \"punisher\",\n    \"tyke\", \"armband\", \"calzone\", \"unashamed\", \"tinderbox\", \"rehydrate\", \"obtrusive\", \"bauble\", \"sixfold\", \"crabbing\", \"moocher\", \"clobber\", \"unbaked\", \"rehire\", \"sudoku\", \"moodiness\",\n    \"dicing\", \"reemerge\", \"gumball\", \"pulverize\", \"hatless\", \"endnote\", \"yodel\", \"cymbal\", \"bagpipe\", \"splotchy\", \"nanometer\", \"mollusk\", \"harpist\", \"mooing\", \"jaywalker\", \"astound\",\n    \"ocelot\", \"hubcap\", \"frill\", \"gonad\", \"rubdown\", \"tigress\", \"denatured\", \"pegboard\", \"dehydrate\", \"gizzard\", \"waggle\", \"kinfolk\", \"unmixed\", \"ensnare\", \"buccaneer\", \"amaretto\",\n    \"felttip\", \"jujitsu\", \"amuck\", \"bunion\", \"skydiver\", \"coeditor\", \"amperage\", \"deface\", \"riptide\", \"hatbox\", \"trekker\", \"jaybird\", \"swizzle\", \"drench\", \"jawed\", \"ditzy\",\n    \"illicitly\", \"preoccupy\", \"vagrancy\", \"carwash\", \"earache\", \"subfloor\", \"armless\", \"ransack\", \"curdle\", \"cozily\", \"unaudited\", \"unblock\", \"catsup\", \"unframed\", \"wielder\", \"dallying\",\n    \"catnap\", \"cosponsor\", \"boxlike\", \"aflutter\", \"wackiness\", \"unviable\", \"husked\", \"babied\", \"eclair\", \"guzzler\", \"giblet\", \"kabob\", \"unhinge\", \"upchuck\", \"coagulant\", \"bagful\",\n    \"batboy\", \"flypaper\", \"gumdrop\", \"disfigure\", \"entwine\", \"oozy\", \"unarmored\", \"cufflink\", \"slobbery\", \"reoccupy\", \"twiddle\", \"ungraded\", \"viselike\", \"carless\", \"stegosaur\", \"coyness\",\n    \"uncross\", \"earwig\", \"ripcord\", \"blabber\", \"retype\", \"unaired\", \"aneurism\", \"antonym\", \"unsnap\", \"eggbeater\", \"untwist\", \"cosigner\", \"racoon\", \"veneering\", \"bobtail\", \"gyration\",\n    \"reanalyze\", \"reabsorb\", \"recharger\", \"unpicked\", \"unsworn\", \"mocker\", \"fernlike\", \"pyromania\", \"opulently\", \"outmost\", \"penpal\", \"flyable\", \"prorate\", \"eatable\", \"skittle\", \"armhole\",\n    \"unvalued\", \"haggler\", \"vexingly\", \"unglue\", \"defog\", \"ecard\", \"dawdler\", \"delouse\", \"disjoin\", \"engorge\", \"finless\", \"lividly\", \"nutlike\", \"reawake\", \"tinwork\", \"unvocal\",\n    \"zipfile\", \"anointer\", \"atonable\", \"cogwheel\", \"undusted\", \"unflawed\", \"unsliced\", \"unsmooth\", \"unthawed\", \"copartner\", \"hemstitch\", \"jeeringly\", \"joylessly\", \"luridness\", \"penholder\", \"subheader\",\n    \"their\", \"would\", \"think\", \"which\", \"after\", \"years\", \"really\", \"should\", \"through\", \"something\", \"being\", \"president\", \"students\", \"while\", \"things\", \"every\",\n    \"house\", \"might\", \"against\", \"children\", \"states\", \"women\", \"money\", \"without\", \"different\", \"though\", \"study\", \"however\", \"actually\", \"research\", \"white\", \"called\",\n    \"looked\", \"national\", \"education\", \"important\", \"times\", \"asked\", \"wanted\", \"united\", \"trying\", \"political\", \"looking\", \"least\", \"having\", \"coming\", \"saying\", \"talking\",\n    \"using\", \"support\", \"within\", \"including\", \"whether\", \"others\", \"community\", \"probably\", \"several\", \"working\", \"makes\", \"happened\", \"heard\", \"along\", \"himself\", \"thanks\",\n    \"center\", \"turned\", \"america\", \"hands\", \"given\", \"started\", \"court\", \"means\", \"according\", \"friends\", \"months\", \"minutes\", \"teachers\", \"former\", \"based\", \"studies\",\n    \"words\", \"seems\", \"comes\", \"results\", \"college\", \"economic\", \"members\", \"looks\", \"parents\", \"likely\", \"instead\", \"policy\", \"groups\", \"problems\", \"hours\", \"began\",\n    \"needs\", \"county\", \"sometimes\", \"military\", \"issues\", \"living\", \"learning\", \"listen\", \"thinking\", \"seemed\", \"perhaps\", \"clear\", \"known\", \"taken\", \"analysis\", \"questions\",\n    \"finally\", \"reading\", \"quite\", \"yourself\", \"clinton\", \"happen\", \"class\", \"exactly\", \"higher\", \"simply\", \"society\", \"everybody\", \"wants\", \"recent\", \"following\", \"companies\",\n    \"programs\", \"officials\", \"campaign\", \"services\", \"personal\", \"director\", \"rights\", \"lives\", \"schools\", \"games\", \"running\", \"article\", \"needed\", \"became\", \"break\", \"building\",\n    \"whatever\", \"itself\", \"knowledge\", \"americans\", \"romney\", \"weeks\", \"third\", \"further\", \"effect\", \"trump\", \"david\", \"reported\", \"whose\", \"longer\", \"points\", \"somebody\",\n    \"worked\", \"single\", \"terms\", \"works\", \"certainly\", \"teacher\", \"takes\", \"chance\", \"value\", \"nearly\", \"ground\", \"press\", \"behavior\", \"continue\", \"areas\", \"changes\",\n    \"attention\", \"countries\", \"cases\", \"knows\", \"comments\", \"stood\", \"players\", \"medical\", \"situation\", \"writing\", \"difficult\", \"approach\", \"george\", \"election\", \"create\", \"levels\",\n    \"books\", \"patients\", \"natural\", \"involved\", \"decision\", \"shows\", \"recently\", \"potential\", \"financial\", \"playing\", \"billion\", \"specific\", \"beautiful\", \"feeling\", \"moved\", \"posted\",\n    \"training\", \"spent\", \"michael\", \"wrote\", \"treatment\", \"teaching\", \"growth\", \"systems\", \"texas\", \"shall\", \"cultural\", \"supposed\", \"skills\", \"usually\", \"foreign\", \"quickly\",\n    \"waiting\", \"earlier\", \"china\", \"democrats\", \"included\", \"related\", \"lower\", \"therefore\", \"despite\", \"workers\", \"provided\", \"district\", \"serious\", \"walked\", \"played\", \"addition\",\n    \"resources\", \"greater\", \"central\", \"miles\", \"decided\", \"meeting\", \"watching\", \"global\", \"positive\", \"factors\", \"career\", \"moving\", \"content\", \"written\", \"expected\", \"created\",\n    \"nobody\", \"religious\", \"sunday\", \"beginning\", \"telling\", \"stories\", \"families\", \"pulled\", \"leaders\", \"changed\", \"increased\", \"clearly\", \"computer\", \"costs\", \"justice\", \"received\",\n    \"events\", \"senate\", \"committee\", \"activity\", \"seeing\", \"necessary\", \"required\", \"added\", \"chicago\", \"suddenly\", \"values\", \"numbers\", \"growing\", \"movement\", \"standing\", \"learned\",\n    \"plans\", \"atlanta\", \"comment\", \"november\", \"developed\", \"calls\", \"james\", \"opened\", \"happens\", \"married\", \"indeed\", \"academic\", \"ideas\", \"effective\", \"politics\", \"event\",\n    \"internet\", \"except\", \"standard\", \"journal\", \"store\", \"forces\", \"passed\", \"majority\", \"efforts\", \"talked\", \"allowed\", \"player\", \"english\", \"league\", \"robert\", \"obviously\",\n    \"sounds\", \"rules\", \"critical\", \"older\", \"rates\", \"character\", \"products\", \"meant\", \"status\", \"reality\", \"species\", \"helped\", \"showed\", \"modern\", \"places\", \"complete\",\n    \"built\", \"reports\", \"starting\", \"followed\", \"straight\", \"loved\", \"reasons\", \"reached\", \"insurance\", \"pressure\", \"limited\", \"executive\", \"compared\", \"influence\", \"leaving\", \"spending\",\n    \"lived\", \"weight\", \"respect\", \"described\", \"agency\", \"western\", \"statement\", \"asking\", \"benefits\", \"previous\", \"governor\", \"francisco\", \"context\", \"worse\", \"generally\", \"smith\",\n    \"watched\", \"continued\", \"designed\", \"dollars\", \"sales\", \"standards\", \"sports\", \"lines\", \"holding\", \"secretary\", \"attorney\", \"closed\", \"published\", \"reach\", \"turns\", \"florida\",\n    \"teams\", \"product\", \"parts\", \"imagine\", \"gives\", \"speech\", \"europe\", \"council\", \"calling\", \"professor\", \"thousands\", \"measures\", \"named\", \"voters\", \"raised\", \"provides\",\n    \"safety\", \"officer\", \"interview\", \"structure\", \"touch\", \"evening\", \"overall\", \"directly\", \"colorado\", \"slowly\", \"items\", \"larger\", \"basis\", \"employees\", \"models\", \"football\",\n    \"denver\", \"serve\", \"complex\", \"voiceover\", \"fingers\", \"scores\", \"windows\", \"tough\", \"findings\", \"practices\", \"multiple\", \"includes\", \"taxes\", \"biggest\", \"challenge\", \"leading\",\n    \"houston\", \"georgia\", \"basically\", \"breath\", \"manager\", \"images\", \"official\", \"walking\", \"meaning\", \"prices\", \"methods\", \"policies\", \"trees\", \"smiled\", \"argument\", \"nodded\",\n    \"contact\", \"highly\", \"happening\", \"steps\", \"johnson\", \"willing\", \"features\", \"classroom\", \"station\", \"putting\", \"editor\", \"powerful\", \"french\", \"speaking\", \"sources\", \"realize\",\n    \"function\", \"identity\", \"doubt\", \"british\", \"nations\", \"spoke\", \"finding\", \"concerned\", \"types\", \"wonderful\", \"offered\", \"plant\", \"wearing\", \"southern\", \"currently\", \"stars\",\n    \"shook\", \"authority\", \"records\", \"corner\", \"appears\", \"drugs\", \"decisions\", \"forms\", \"mostly\", \"wednesday\", \"candidate\", \"peter\", \"returned\", \"noted\", \"christmas\", \"presented\",\n    \"decades\", \"hearing\", \"folks\", \"somewhere\", \"concern\", \"presence\", \"religion\", \"factor\", \"determine\", \"materials\", \"appeared\", \"planning\", \"yards\", \"totally\", \"sidebar\", \"relations\",\n    \"variables\", \"climate\", \"crisis\", \"cells\", \"bought\", \"served\", \"becomes\", \"otherwise\", \"homes\", \"notes\", \"agreement\", \"interests\", \"goals\", \"richard\", \"latest\", \"suggests\",\n    \"leaves\", \"plants\", \"promise\", \"claims\", \"liked\", \"thomas\", \"block\", \"audience\", \"apartment\", \"offers\", \"weapons\", \"clothes\", \"fighting\", \"thinks\", \"citizens\", \"angeles\",\n    \"picked\", \"residents\", \"actions\", \"chris\", \"variety\", \"released\", \"larry\", \"direction\", \"software\", \"regarding\", \"website\", \"realized\", \"officers\", \"native\", \"mission\", \"mental\",\n    \"concerns\", \"institute\", \"largest\", \"forced\", \"finished\", \"active\", \"daddy\", \"driving\", \"details\", \"seriously\", \"names\", \"animals\", \"missing\", \"mentioned\", \"sites\", \"projects\",\n    \"keeping\", \"closer\", \"concept\", \"produced\", \"yours\", \"users\", \"baseball\", \"instance\", \"attempt\", \"feels\", \"fully\", \"setting\", \"troops\", \"opening\", \"covered\", \"mexico\",\n    \"customers\", \"subjects\", \"parties\", \"turning\", \"prior\", \"beside\", \"conflict\", \"continues\", \"agreed\", \"towards\", \"responses\", \"condition\", \"dropped\", \"cities\", \"suggested\", \"vision\",\n    \"jones\", \"facebook\", \"progress\", \"healthy\", \"frank\", \"joining\", \"indian\", \"millions\", \"believed\", \"creating\", \"pictures\", \"accept\", \"hundreds\", \"tells\", \"requires\", \"surprised\",\n    \"knowing\", \"funds\", \"virginia\", \"strange\", \"dangerous\", \"william\", \"caused\", \"threat\", \"broke\", \"russia\", \"chairman\", \"conducted\", \"steve\", \"announced\", \"providing\", \"easier\",\n    \"somehow\", \"mayor\", \"observed\", \"arrived\", \"tests\", \"slightly\", \"thoughts\", \"helping\", \"charles\", \"becoming\", \"handle\", \"grand\", \"readers\", \"indicated\", \"laughed\", \"contract\",\n    \"silence\", \"division\", \"stress\", \"lights\", \"sides\", \"plays\", \"doctors\", \"smaller\", \"pieces\", \"williams\", \"starts\", \"elements\", \"experts\", \"classes\", \"london\", \"minister\",\n    \"changing\", \"worried\", \"writer\", \"walls\", \"showing\", \"scott\", \"separate\", \"focused\", \"extent\", \"movies\", \"views\", \"strength\", \"facts\", \"mmhmm\", \"shape\", \"jackson\",\n    \"donald\", \"seconds\", \"defined\", \"placed\", \"proposed\", \"adults\", \"grade\", \"possibly\", \"japan\", \"score\", \"patterns\", \"noticed\", \"attacks\", \"fourth\", \"stared\", \"contrast\",\n    \"losing\", \"younger\", \"martin\", \"advantage\", \"charges\", \"streets\", \"shared\", \"taught\", \"count\", \"internal\", \"winning\", \"allows\", \"partner\", \"corporate\", \"beneath\", \"behaviors\",\n    \"scared\", \"terrible\", \"listening\", \"smell\", \"processes\", \"prepared\", \"options\", \"regional\", \"tools\", \"thousand\", \"authors\", \"missed\", \"honor\", \"signed\", \"lawyer\", \"harry\",\n    \"anywhere\", \"outcomes\", \"familiar\", \"forever\", \"emotional\", \"plane\", \"kinds\", \"greatest\", \"carolina\", \"soldiers\", \"helps\", \"carried\", \"testing\", \"ourselves\", \"explained\", \"pointed\",\n    \"affect\", \"largely\", \"stepped\", \"driver\", \"prove\", \"pushed\", \"housing\", \"heads\", \"applied\", \"apply\", \"serving\", \"marketing\", \"perceived\", \"painting\", \"relative\", \"essential\",\n    \"boston\", \"markets\", \"artists\", \"extremely\", \"joined\", \"shoes\", \"examples\", \"banks\", \"stands\", \"coverage\", \"medicine\", \"equipment\", \"thick\", \"russian\", \"figures\", \"canada\",\n    \"favor\", \"storm\", \"shoulders\", \"teeth\", \"funding\", \"letters\", \"expensive\", \"northern\", \"signs\", \"pages\", \"photos\", \"victims\", \"fellow\", \"clinical\", \"existing\", \"faces\",\n    \"votes\", \"wondered\", \"aspects\", \"feelings\", \"recognize\", \"entirely\", \"begins\", \"charlie\", \"maintain\", \"selling\", \"relevant\", \"highest\", \"careful\", \"eastern\", \"inches\", \"matters\",\n    \"england\", \"typically\", \"capacity\", \"narrative\", \"pounds\", \"agencies\", \"managed\", \"henry\", \"germany\", \"tradition\", \"emergency\", \"prime\", \"location\", \"represent\", \"doors\", \"longterm\",\n    \"waited\", \"remained\", \"honest\", \"operation\", \"supported\", \"buying\", \"selected\", \"tears\", \"supra\", \"bedroom\", \"objects\", \"stated\", \"believes\", \"bodies\", \"massive\", \"humans\",\n    \"elected\", \"revealed\", \"occurred\", \"houses\", \"michigan\", \"attitudes\", \"persons\", \"guilty\", \"creative\", \"stores\", \"besides\", \"moreover\", \"articles\", \"discuss\", \"respond\", \"educators\",\n    \"excellent\", \"kidding\", \"posts\", \"explains\", \"hoping\", \"unlike\", \"bringing\", \"moments\", \"newspaper\", \"france\", \"reduced\", \"technical\", \"staring\", \"pocket\", \"tight\", \"davis\",\n    \"exposure\", \"completed\", \"grown\", \"manner\", \"adding\", \"owners\", \"committed\", \"opposite\", \"talks\", \"reader\", \"keeps\", \"assistant\", \"belief\", \"suppose\", \"performed\", \"discussed\",\n    \"birthday\", \"remaining\", \"meanwhile\", \"leaned\", \"planned\", \"hardly\", \"brothers\", \"charged\", \"forth\", \"treated\", \"intended\", \"answers\", \"analyses\", \"singing\", \"investors\", \"iraqi\",\n    \"reporting\", \"voted\", \"consumer\", \"anonymous\", \"consumers\", \"leads\", \"revenue\", \"india\", \"golden\", \"drinking\", \"likes\", \"causes\", \"existence\", \"thats\", \"kennedy\", \"stayed\",\n    \"merely\", \"fields\", \"passing\", \"arizona\", \"elections\", \"bathroom\", \"hollywood\", \"accepted\", \"hillary\", \"nearby\", \"creation\", \"clients\", \"choices\", \"expressed\", \"throat\", \"songs\",\n    \"louis\", \"fired\", \"dozen\", \"combined\", \"estimated\", \"lawyers\", \"dealing\", \"somewhat\", \"classic\", \"moves\", \"positions\", \"courses\", \"seeking\", \"sarah\", \"framework\", \"cards\",\n    \"primarily\", \"documents\", \"reporter\", \"trail\", \"dressed\", \"laughing\", \"beliefs\", \"falling\", \"saved\", \"victim\", \"medium\", \"proper\", \"acting\", \"courts\", \"critics\", \"regime\",\n    \"woods\", \"kevin\", \"saddam\", \"increases\", \"fewer\", \"pleasure\", \"request\", \"holds\", \"gentlemen\", \"detroit\", \"entered\", \"removed\", \"sharing\", \"whereas\", \"surgery\", \"glanced\",\n    \"degrees\", \"bottle\", \"musical\", \"writers\", \"headed\", \"accounts\", \"offering\", \"buildings\", \"advanced\", \"obtained\", \"downtown\", \"paint\", \"donaldson\", \"argued\", \"miller\", \"devices\",\n    \"democrat\", \"dreams\", \"powers\", \"studio\", \"korea\", \"selection\", \"wondering\", \"breaking\", \"hanging\", \"parking\", \"sleeping\", \"broad\", \"brian\", \"regard\", \"allowing\", \"answered\",\n    \"perform\", \"excited\", \"brings\", \"spiritual\", \"walks\", \"principle\", \"notion\", \"literally\", \"measured\", \"examined\", \"reagan\", \"birds\", \"agents\", \"operating\", \"sector\", \"flowers\",\n    \"wilson\", \"criteria\", \"dying\", \"films\", \"knees\", \"hopes\", \"diversity\", \"cooking\", \"threw\", \"opposed\", \"phase\", \"samples\", \"purposes\", \"andor\", \"carrying\", \"papers\",\n    \"sharp\", \"offense\", \"improved\", \"paris\", \"loves\", \"variable\", \"examine\", \"foods\", \"colleges\", \"perfectly\", \"practical\", \"centers\", \"jordan\", \"accused\", \"polls\", \"located\",\n    \"formal\", \"figured\", \"bills\", \"limits\", \"external\", \"expert\", \"affairs\", \"sought\", \"billy\", \"similarly\", \"award\", \"barbara\", \"finds\", \"touched\", \"rooms\", \"widely\",\n    \"lifted\", \"awareness\", \"symptoms\", \"colors\", \"graduate\", \"offensive\", \"jerry\", \"struck\", \"maam\", \"ordered\", \"agenda\", \"shopping\", \"susan\", \"fairly\", \"whenever\", \"relation\",\n    \"units\", \"partners\", \"guest\", \"concepts\", \"promised\", \"studied\", \"secondary\", \"collected\", \"arrested\", \"queen\", \"estimates\", \"appeal\", \"campus\", \"breakfast\", \"closely\", \"organized\",\n    \"narrator\", \"roles\", \"survive\", \"daniel\", \"roberts\", \"extreme\", \"whispered\", \"austin\", \"falls\", \"links\", \"constant\", \"chose\", \"strongly\", \"suffering\", \"seasons\", \"nervous\",\n    \"defensive\", \"cutting\", \"childhood\", \"drawn\", \"tickets\", \"rolled\", \"follows\", \"replied\", \"firms\", \"retired\", \"extended\", \"illinois\", \"schedule\", \"detective\", \"smiling\", \"tested\",\n    \"surely\", \"protein\", \"command\", \"severe\", \"kelly\", \"establish\", \"violent\", \"procedure\", \"spanish\", \"criticism\", \"demands\", \"formula\", \"filed\", \"customer\", \"raising\", \"writes\",\n    \"dollar\", \"formed\", \"immediate\", \"pants\", \"meetings\", \"earned\", \"package\", \"athletes\", \"shots\", \"therapy\", \"claimed\", \"attempts\", \"heaven\", \"scholars\", \"sounded\", \"drawing\",\n    \"pulling\", \"evolution\", \"microsoft\", \"diverse\", \"letting\", \"refused\", \"engaged\", \"goods\", \"recovery\", \"warning\", \"pushing\", \"taylor\", \"locked\", \"chemical\", \"reduction\", \"andrew\",\n    \"pulls\", \"coaches\", \"reporters\", \"loose\", \"principal\", \"academy\", \"boyfriend\", \"elsewhere\", \"forgot\", \"recorded\", \"farmers\", \"neighbors\", \"hired\", \"joseph\", \"scored\", \"arguments\",\n    \"absence\", \"mountains\", \"howard\", \"fishing\", \"regions\", \"islamic\", \"settings\", \"connected\", \"begun\", \"facility\", \"barack\", \"sending\", \"tasks\", \"proposal\", \"judgment\", \"faced\",\n    \"hussein\", \"males\", \"contains\", \"equally\", \"laughter\", \"videotape\", \"networks\", \"lessons\", \"literary\", \"risks\", \"miami\", \"functions\", \"counter\", \"grabbed\", \"accurate\", \"carter\",\n    \"valuable\", \"adopted\", \"fixed\", \"owned\", \"lovely\", \"exists\", \"orders\", \"objective\", \"ideal\", \"rarely\", \"elizabeth\", \"opens\", \"chopped\", \"visitors\", \"platform\", \"memories\",\n    \"staying\", \"enjoyed\", \"approved\", \"serves\", \"settled\", \"incident\", \"texts\", \"solutions\", \"speaker\", \"shares\", \"voices\", \"resulting\", \"explore\", \"quietly\", \"edition\", \"mothers\",\n    \"returns\", \"linked\", \"depends\", \"pressed\", \"issued\", \"chain\", \"secure\", \"computers\", \"literacy\", \"launch\", \"highway\", \"virtually\", \"assess\", \"enormous\", \"medicare\", \"universal\",\n    \"directed\", \"frequency\", \"convinced\", \"fallen\", \"danny\", \"females\", \"discourse\", \"genetic\", \"employee\", \"nights\", \"trained\", \"historic\", \"opinions\", \"helpful\", \"viewed\", \"scheduled\",\n    \"anderson\", \"minds\", \"feedback\", \"stocks\", \"disaster\", \"dramatic\", \"component\", \"personnel\", \"reviews\", \"visible\", \"deficit\", \"involving\", \"strategic\", \"channel\", \"commander\", \"receiving\",\n    \"informed\", \"waves\", \"syria\", \"calories\", \"referred\", \"telephone\", \"wooden\", \"nancy\", \"glasses\", \"stops\", \"depending\", \"inspired\", \"guests\", \"bears\", \"destroyed\", \"versus\",\n    \"addressed\", \"defend\", \"suffered\", \"prince\", \"stronger\", \"vietnam\", \"calif\", \"harris\", \"exposed\", \"initially\", \"roger\", \"clark\", \"hills\", \"dallas\", \"repeated\", \"detailed\",\n    \"indicates\", \"bobby\", \"signal\", \"hopefully\", \"britain\", \"bones\", \"checked\", \"technique\", \"republic\", \"roughly\", \"hoped\", \"burning\", \"dependent\", \"seats\", \"cleveland\", \"marry\",\n    \"employed\", \"crossed\", \"contain\", \"files\", \"omitted\", \"deserve\", \"invited\", \"gently\", \"rolling\", \"jason\", \"messages\", \"honestly\", \"simon\", \"loans\", \"cultures\", \"socalled\",\n    \"vehicles\", \"breathing\", \"minnesota\", \"lewis\", \"listed\", \"apparent\", \"passage\", \"survival\", \"seattle\", \"forgotten\", \"baltimore\", \"wanting\", \"describes\", \"driven\", \"hunting\", \"concrete\",\n    \"sawyer\", \"replaced\", \"compare\", \"tries\", \"assets\", \"expansion\", \"involves\", \"reserve\", \"allen\", \"handed\", \"joins\", \"managers\", \"smiles\", \"properly\", \"kansas\", \"declined\",\n    \"simpson\", \"smoking\", \"fought\", \"organic\", \"finance\", \"proved\", \"launched\", \"italian\", \"discovery\", \"plain\", \"button\", \"heavily\", \"islam\", \"confirmed\", \"horrible\", \"divided\",\n    \"resulted\", \"laughs\", \"sandy\", \"bureau\", \"worker\", \"imagined\", \"shrugged\", \"patrick\", \"maryland\", \"storage\", \"delivered\", \"responded\", \"porch\", \"passion\", \"achieved\", \"normally\",\n    \"paused\", \"teaspoon\", \"slipped\", \"nowhere\", \"privacy\", \"screaming\", \"controls\", \"coalition\", \"sciences\", \"warming\", \"dancing\", \"permanent\", \"gathered\", \"intense\", \"household\", \"springs\",\n    \"sensitive\", \"heading\", \"bruce\", \"sighed\", \"scenes\", \"approval\", \"movements\", \"hurricane\", \"exciting\", \"granted\", \"flickr\", \"frankly\", \"chances\", \"lincoln\", \"painted\", \"emerged\",\n    \"precisely\", \"stretch\", \"veterans\", \"cited\", \"assumed\", \"ratio\", \"wrapped\", \"extensive\", \"closing\", \"passes\", \"tommy\", \"unlikely\", \"leather\", \"brinkley\", \"testimony\", \"declared\",\n    \"occurs\", \"machines\", \"returning\", \"egypt\", \"sisters\", \"amounts\", \"indians\", \"naturally\", \"chocolate\", \"denied\", \"visited\", \"columbia\", \"flesh\", \"parks\", \"rachel\", \"trends\",\n    \"paintings\", \"judges\", \"deals\", \"regularly\", \"harvard\", \"supports\", \"topics\", \"jumped\", \"economics\", \"distinct\", \"attended\", \"rocks\", \"injuries\", \"marked\", \"horses\", \"spoken\",\n    \"sessions\", \"distant\", \"delivery\", \"trading\", \"concluded\", \"pakistan\", \"stephen\", \"recommend\", \"reducing\", \"bother\", \"confused\", \"dialogue\", \"theories\", \"anthony\", \"studying\", \"muslims\",\n    \"blocks\", \"reaching\", \"hitting\", \"genes\", \"shake\", \"oregon\", \"profile\", \"infection\", \"combat\", \"dozens\", \"mainly\", \"validity\", \"deeper\", \"losses\", \"waters\", \"rapidly\",\n    \"friendly\", \"listened\", \"fifteen\", \"interior\", \"recalls\", \"fifty\", \"reminded\", \"roads\", \"picking\", \"publicly\", \"absolute\", \"forgive\", \"throwing\", \"sweat\", \"analysts\", \"territory\",\n    \"saudi\", \"presents\", \"admitted\", \"burned\", \"hospitals\", \"shouted\", \"moore\", \"actors\", \"angel\", \"generated\", \"rating\", \"moderate\", \"gifted\", \"dominant\", \"exception\", \"saving\",\n    \"tracks\", \"caller\", \"stability\", \"peers\", \"ratings\", \"assembly\", \"nursing\", \"forehead\", \"deaths\", \"shadows\", \"giants\", \"assigned\", \"pointing\", \"empire\", \"johnny\", \"eddie\",\n    \"offices\", \"clouds\", \"chronicle\", \"memorial\", \"thrown\", \"walter\", \"formation\", \"amazon\", \"mommy\", \"hated\", \"roots\", \"founded\", \"dedicated\", \"mistakes\", \"steady\", \"comedy\",\n    \"counsel\", \"emerging\", \"capitol\", \"contained\", \"stations\", \"instant\", \"reflected\", \"associate\", \"cameras\", \"clothing\", \"traveling\", \"stream\", \"confident\", \"branch\", \"periods\", \"estimate\",\n    \"walker\", \"injured\", \"weekly\", \"threats\", \"grades\", \"speaks\", \"inaudible\", \"terry\", \"hiding\", \"newly\", \"ruling\", \"bonds\", \"orleans\", \"diego\", \"districts\", \"drivers\",\n    \"diane\", \"improving\", \"fantastic\", \"wildlife\", \"metro\", \"humanity\", \"protected\", \"routine\", \"shower\", \"oakland\", \"everyday\", \"covering\", \"linda\", \"abandoned\", \"thread\", \"payments\",\n    \"poetry\", \"churches\", \"summary\", \"causing\", \"breathe\", \"physics\", \"gained\", \"vacation\", \"seeds\", \"creates\", \"mount\", \"annie\", \"australia\", \"compete\", \"pleased\", \"videos\",\n    \"covers\", \"capture\", \"worldwide\", \"producer\", \"tables\", \"origin\", \"oklahoma\", \"awards\", \"profits\", \"ignored\", \"furniture\", \"bound\", \"lifetime\", \"ethical\", \"athletic\", \"generate\",\n    \"climbed\", \"sighs\", \"operate\", \"wisconsin\", \"searching\", \"edward\", \"inflation\", \"alice\", \"barry\", \"bucks\", \"acres\", \"supplies\", \"sanctions\", \"variance\", \"attacked\", \"attached\",\n    \"prominent\", \"mortgage\", \"doctrine\", \"reaches\", \"manhattan\", \"italy\", \"cheek\", \"pollution\", \"centuries\", \"jennifer\", \"copyright\", \"broader\", \"breaks\", \"shortly\", \"sections\", \"protest\",\n    \"decent\", \"kerry\", \"entrance\", \"locations\", \"producing\", \"marks\", \"contrary\", \"gains\", \"earnings\", \"commonly\", \"opponents\", \"scenario\", \"predicted\", \"emissions\", \"loading\", \"wings\",\n    \"goodbye\", \"chairs\", \"reply\", \"superior\", \"baker\", \"founder\", \"packed\", \"ministry\", \"remote\", \"alleged\", \"alliance\", \"theatre\", \"baghdad\", \"softly\", \"allies\", \"phones\",\n    \"visiting\", \"boxes\", \"neighbor\", \"telescope\", \"spots\", \"societies\", \"focusing\", \"collapse\", \"adequate\", \"attempted\", \"helen\", \"temple\", \"steal\", \"diagnosis\", \"announcer\", \"doorway\",\n    \"refer\", \"rejected\", \"accuracy\", \"voter\", \"roman\", \"desperate\", \"emotions\", \"consensus\", \"convicted\", \"singer\", \"disney\", \"guidance\", \"argues\", \"contracts\", \"expanded\", \"warned\",\n    \"recession\", \"hallway\", \"loving\", \"hearts\", \"themes\", \"aircraft\", \"factory\", \"karen\", \"lately\", \"stolen\", \"thompson\", \"resident\", \"laura\", \"engineers\", \"derived\", \"kicked\",\n    \"stages\", \"vegas\", \"recording\", \"taiwan\", \"races\", \"grounds\", \"captured\", \"drives\", \"intent\", \"insisted\", \"trials\", \"proven\", \"waved\", \"commerce\", \"beans\", \"alabama\",\n    \"landing\", \"belong\", \"creature\", \"employers\", \"expecting\", \"targets\", \"divine\", \"happiness\", \"muscles\", \"wished\", \"errors\", \"romantic\", \"missouri\", \"resort\", \"monthly\", \"preferred\",\n    \"format\", \"daughters\", \"variation\", \"conflicts\", \"extension\", \"greek\", \"posting\", \"greatly\", \"wallace\", \"scary\", \"managing\", \"scales\", \"analyzed\", \"pregnancy\", \"ships\", \"peoples\",\n    \"bloody\", \"aimed\", \"wealthy\", \"shore\", \"salary\", \"thereby\", \"pursue\", \"unions\", \"mechanism\", \"refers\", \"kissed\", \"integrity\", \"lists\", \"partly\", \"checking\", \"contest\",\n    \"morgan\", \"designer\", \"youre\", \"lawmakers\", \"preparing\", \"legacy\", \"witnesses\", \"trips\", \"beating\", \"colonel\", \"cheeks\", \"stranger\", \"featured\", \"stare\", \"warren\", \"grateful\",\n    \"temporary\", \"enemies\", \"pretend\", \"civilian\", \"chamber\", \"evident\", \"battery\", \"referring\", \"reflects\", \"assuming\", \"entering\", \"handful\", \"gordon\", \"couples\", \"versions\", \"stewart\",\n    \"drops\", \"scientist\", \"consent\", \"recalled\", \"matthew\", \"painful\", \"cents\", \"moscow\", \"overcome\", \"flour\", \"kinda\", \"defeat\", \"entitled\", \"disorders\", \"courage\", \"priest\",\n    \"encounter\", \"hardware\", \"emily\", \"editorial\", \"advocates\", \"promoting\", \"guarantee\", \"sorts\", \"succeed\", \"tragedy\", \"intensity\", \"isolated\", \"fears\", \"irish\", \"string\", \"database\",\n    \"behalf\", \"stretched\", \"drinks\", \"visits\", \"longtime\", \"tension\", \"sweetie\", \"celebrate\", \"picks\", \"knocked\", \"promises\", \"spain\", \"gifts\", \"arthur\", \"blogs\", \"apologize\",\n    \"korean\", \"acquired\", \"expenses\", \"homeless\", \"reveals\", \"robinson\", \"directors\", \"closet\", \"charlotte\", \"scandal\", \"handsome\", \"chart\", \"belly\", \"lifestyle\", \"kuwait\", \"hunter\",\n    \"cares\", \"gates\", \"viewers\", \"insight\", \"reliable\", \"outta\", \"checks\", \"construct\", \"tomatoes\", \"steven\", \"dishes\", \"lands\", \"liberals\", \"tennessee\", \"guards\", \"purchased\",\n    \"strip\", \"indiana\", \"hispanic\", \"adams\", \"providers\", \"chuck\", \"designs\", \"leaning\", \"shocked\", \"radiation\", \"assessed\", \"perry\", \"volunteer\", \"circuit\", \"summit\", \"airlines\",\n    \"strikes\", \"ownership\", \"register\", \"murdered\", \"potatoes\", \"qualified\", \"watches\", \"ranging\", \"briefly\", \"provision\", \"elderly\", \"counties\", \"biden\", \"gathering\", \"meals\", \"ruled\",\n    \"surveys\", \"swimming\", \"baseline\", \"islands\", \"russell\", \"barriers\", \"dynamics\", \"hampshire\", \"norms\", \"trillion\", \"racism\", \"filling\", \"adoption\", \"reforms\", \"devoted\", \"maria\",\n    \"landed\", \"cleaning\", \"competing\", \"graham\", \"coaching\", \"dennis\", \"walters\", \"buchanan\", \"nurses\", \"survived\", \"shelter\", \"sergeant\", \"rings\", \"employer\", \"nelson\", \"arguing\",\n    \"nixon\", \"artistic\", \"theology\", \"dates\", \"alexander\", \"choosing\", \"abilities\", \"existed\", \"perot\", \"striking\", \"ballot\", \"corps\", \"targeted\", \"sodium\", \"expertise\", \"relatives\",\n    \"wayne\", \"sooner\", \"olympics\", \"seemingly\", \"senators\", \"preserve\", \"princess\", \"rational\", \"stares\", \"snapped\", \"treaty\", \"grandma\", \"towns\", \"followup\", \"parallel\", \"grave\",\n    \"styles\", \"turner\", \"theyre\", \"mitchell\", \"desired\", \"introduce\", \"counts\", \"rhetoric\", \"folded\", \"sacrifice\", \"verbal\", \"commit\", \"margaret\", \"lowest\", \"handling\", \"farther\",\n    \"chuckles\", \"cohen\", \"expense\", \"youtube\", \"brazil\", \"scoring\", \"cleared\", \"jacob\", \"engaging\", \"makeup\", \"sheets\", \"secrets\", \"edwards\", \"bastard\", \"lightly\", \"clubs\",\n    \"confusion\", \"examining\", \"equality\", \"horizon\", \"producers\", \"titles\", \"fathers\", \"powell\", \"correctly\", \"tendency\", \"claiming\", \"stake\", \"michelle\", \"appointed\", \"screening\", \"parental\",\n    \"stones\", \"reverse\", \"playoffs\", \"jonathan\", \"franchise\", \"spaces\", \"raises\", \"traveled\", \"jesse\", \"louisiana\", \"adventure\", \"cokie\", \"classical\", \"wounded\", \"requiring\", \"nonprofit\",\n    \"parker\", \"contexts\", \"copies\", \"stanford\", \"smelled\", \"purple\", \"brooklyn\", \"currency\", \"boards\", \"cambridge\", \"educated\", \"ceremony\", \"reads\", \"precious\", \"aesthetic\", \"modest\",\n    \"campaigns\", \"activists\", \"kentucky\", \"suspected\", \"parked\", \"actively\", \"basement\", \"franklin\", \"branches\", \"wright\", \"julie\", \"attorneys\", \"impressed\", \"ronald\", \"physician\", \"varied\",\n    \"expanding\", \"forty\", \"separated\", \"gardens\", \"carries\", \"edges\", \"debates\", \"lawrence\", \"engineer\", \"unity\", \"wherever\", \"cardinals\", \"satellite\", \"ranks\", \"southwest\", \"refugees\",\n    \"sunlight\", \"wells\", \"playoff\", \"shifted\", \"regarded\", \"creatures\", \"twisted\", \"learners\", \"receiver\", \"touchdown\", \"exclusive\", \"languages\", \"overseas\", \"arabia\", \"stopping\", \"aaron\",\n    \"signals\", \"occasion\", \"reviewed\", \"taliban\", \"marshall\", \"cookies\", \"chips\", \"breasts\", \"intention\", \"broadway\", \"sizes\", \"billions\", \"satisfied\", \"cabinet\", \"adviser\", \"borders\",\n    \"hiring\", \"appeals\", \"collins\", \"jerusalem\", \"default\", \"relate\", \"server\", \"invisible\", \"broncos\", \"immigrant\", \"alongside\", \"douglas\", \"charity\", \"equation\", \"blues\", \"reactions\",\n    \"favorites\", \"linear\", \"dropping\", \"inclusion\", \"bishop\", \"revenues\", \"shade\", \"audio\", \"logical\", \"oldest\", \"poured\", \"demanded\", \"winds\", \"attending\", \"worlds\", \"berkeley\",\n    \"prisoners\", \"healing\", \"wages\", \"theres\", \"counting\", \"taxpayers\", \"shops\", \"complaint\", \"dispute\", \"invasion\", \"resolve\", \"rated\", \"balanced\", \"transport\", \"trucks\", \"libraries\",\n    \"prospect\", \"craig\", \"modified\", \"reasoning\", \"yankees\", \"overnight\", \"feeding\", \"consists\", \"suits\", \"flood\", \"spectrum\", \"northwest\", \"adopt\", \"download\", \"rangers\", \"justify\",\n    \"scream\", \"martha\", \"migration\", \"admission\", \"installed\", \"blond\", \"requests\", \"instances\", \"struggled\", \"focuses\", \"gibson\", \"promising\", \"grabs\", \"displayed\", \"campbell\", \"autonomy\",\n    \"deadly\", \"claire\", \"produces\", \"plates\", \"dimension\", \"crowded\", \"loaded\", \"trace\", \"explicit\", \"morris\", \"tribal\", \"modeling\", \"tossed\", \"cooper\", \"advocate\", \"oclock\",\n    \"portland\", \"evaluated\", \"touching\", \"circles\", \"planes\", \"arrival\", \"nutrition\", \"bradley\", \"remembers\", \"wheels\", \"habits\", \"decreased\", \"motivated\", \"heels\", \"impacts\", \"magnitude\",\n    \"backs\", \"pockets\", \"forcing\", \"maggie\", \"equity\", \"comparing\", \"freshman\", \"suburban\", \"closest\", \"lined\", \"applying\", \"subtle\", \"jefferson\", \"wider\", \"trapped\", \"halfway\",\n    \"nebraska\", \"celebrity\", \"rushed\", \"antonio\", \"pleasant\", \"alaska\", \"featuring\", \"affects\", \"cooked\", \"trauma\", \"servings\", \"proposals\", \"noting\", \"enjoying\", \"seventh\", \"demanding\",\n    \"lobby\", \"justin\", \"array\", \"signing\", \"arkansas\", \"murphy\", \"grinned\", \"likewise\", \"angels\", \"oscar\", \"funded\", \"defending\", \"accessed\", \"julia\", \"portrait\", \"layers\",\n    \"custody\", \"buyers\", \"waist\", \"jackie\", \"lowered\", \"realistic\", \"slavery\", \"rushing\", \"updated\", \"ignorant\", \"passenger\", \"debut\", \"fires\", \"remarks\", \"faded\", \"jennings\",\n    \"makers\", \"observers\", \"katie\", \"forests\", \"duties\", \"tender\", \"identical\", \"camps\", \"talented\", \"hurts\", \"imposed\", \"privilege\", \"printed\", \"corridor\", \"francis\", \"yelled\",\n    \"novels\", \"rivers\", \"hearings\", \"overhead\", \"farms\", \"lover\", \"pitcher\", \"crossing\", \"tends\", \"treasury\", \"goodness\", \"complain\", \"dominated\", \"recipes\", \"meets\", \"disappear\",\n    \"arranged\", \"laden\", \"updates\", \"iranian\", \"electoral\", \"habitat\", \"teens\", \"enhanced\", \"worthy\", \"sanders\", \"instantly\", \"readily\", \"conscious\", \"sliced\", \"peaceful\", \"rolls\",\n    \"rocky\", \"vegetable\", \"protests\", \"shaped\", \"maine\", \"jamie\", \"chill\", \"newshour\", \"courtesy\", \"russians\", \"sidewalk\", \"climbing\", \"dressing\", \"grants\", \"someday\", \"solely\",\n    \"opponent\", \"damaged\", \"strain\", \"nathan\", \"crops\", \"evolved\", \"particles\", \"jokes\", \"websites\", \"libya\", \"violation\", \"profound\", \"cheaper\", \"retrieved\", \"medicaid\", \"tracking\",\n    \"terrific\", \"missile\", \"floating\", \"trunk\", \"virtue\", \"keith\", \"deserves\", \"magazines\", \"crown\", \"removal\", \"donna\", \"shapes\", \"washed\", \"allegedly\", \"nonsense\", \"promotion\",\n    \"worship\", \"secular\", \"heroes\", \"analyze\", \"reminds\", \"stirring\", \"editors\", \"symbolic\", \"boats\", \"wishes\", \"attracted\", \"musicians\", \"spotted\", \"qualities\", \"airline\", \"planets\",\n    \"minimal\", \"paragraph\", \"southeast\", \"handled\", \"paula\", \"fails\", \"delicious\", \"shakes\", \"masters\", \"signature\", \"publisher\", \"charter\", \"audiences\", \"warner\", \"brooks\", \"applies\",\n    \"insights\", \"seniors\", \"bleeding\", \"bottles\", \"ignorance\", \"madison\", \"jeffrey\", \"safer\", \"twins\", \"headlines\", \"generous\", \"fulltime\", \"frowned\", \"annually\", \"toxic\", \"measuring\",\n    \"bands\", \"slaves\", \"socially\", \"wiped\", \"restore\", \"afterward\", \"sustained\", \"aboard\", \"dough\", \"blessed\", \"believing\", \"careers\", \"cheney\", \"homeland\", \"molly\", \"civilians\",\n    \"grows\", \"coastal\", \"suspended\", \"brains\", \"gorbachev\", \"necessity\", \"counted\", \"pressures\", \"scattered\", \"efficacy\", \"victor\", \"expects\", \"iraqis\", \"assessing\", \"traits\", \"ellen\",\n    \"dragged\", \"patience\", \"disabled\", \"occupied\", \"tucked\", \"mason\", \"sometime\", \"rebecca\", \"partial\", \"addresses\", \"legally\", \"hawaii\", \"scent\", \"defendant\", \"survivors\", \"sally\",\n    \"followers\", \"toronto\", \"civic\", \"jessica\", \"transit\", \"automatic\", \"credits\", \"implies\", \"engines\", \"informal\", \"tigers\", \"treating\", \"tended\", \"ireland\", \"acute\", \"freak\",\n    \"sponsored\", \"graph\", \"stanley\", \"enters\", \"admits\", \"inherent\", \"smells\", \"strict\", \"fruits\", \"defining\", \"exploring\", \"composed\", \"nightmare\", \"realm\", \"defeated\", \"placement\",\n    \"nicole\", \"ethnicity\", \"viewing\", \"sampling\", \"channels\", \"blank\", \"freeze\", \"prospects\", \"lebanon\", \"submitted\", \"betty\", \"graphic\", \"speakers\", \"berlin\", \"booth\", \"eleven\",\n    \"monica\", \"firmly\", \"delicate\", \"drain\", \"isolation\", \"entity\", \"quarters\", \"emphasize\", \"cared\", \"origins\", \"flexible\", \"stays\", \"spite\", \"philip\", \"residence\", \"sticks\",\n    \"acted\", \"silently\", \"adapted\", \"graduated\", \"vaccine\", \"slices\", \"quest\", \"corners\", \"gloves\", \"protocol\", \"hotels\", \"adjusted\", \"quoted\", \"spirits\", \"seated\", \"dismissed\",\n    \"steam\", \"innings\", \"tourists\", \"hamilton\", \"episodes\", \"jenny\", \"backup\", \"winners\", \"trailer\", \"sharon\", \"dealt\", \"muttered\", \"workplace\", \"shifts\", \"economies\", \"maker\",\n    \"grams\", \"troubled\", \"rubbed\", \"momentum\", \"eighth\", \"crosstalk\", \"putin\", \"sandwich\", \"diagnosed\", \"poorly\", \"codes\", \"consisted\", \"brands\", \"react\", \"solving\", \"ranged\",\n    \"shouting\", \"rounds\", \"stuffed\", \"courtroom\", \"pursuit\", \"excluded\", \"throws\", \"achieving\", \"petraeus\", \"historian\", \"seeks\", \"bases\", \"attacking\", \"startled\", \"pressing\", \"advocacy\",\n    \"sheep\", \"journals\", \"lightning\", \"recover\", \"sentences\", \"ralph\", \"inning\", \"critique\", \"emails\", \"deadline\", \"strangers\", \"displays\", \"driveway\", \"lakes\", \"morality\", \"rockets\",\n    \"blowing\", \"insist\", \"catching\", \"attribute\", \"yelling\", \"beard\", \"farmer\", \"trusted\", \"phillips\", \"portfolio\", \"arnold\", \"marie\", \"hunters\", \"wives\", \"beloved\", \"answering\",\n    \"flies\", \"brandon\", \"invested\", \"cracked\", \"shorter\", \"halloween\", \"intimate\", \"teenage\", \"counselor\", \"redskins\", \"screamed\", \"twentieth\", \"agrees\", \"beaten\", \"vitamin\", \"namely\",\n    \"damned\", \"mature\", \"trails\", \"heights\", \"advances\", \"blocked\", \"belongs\", \"jumping\", \"gentleman\", \"accepting\", \"souls\", \"enrolled\", \"conclude\", \"meters\", \"onions\", \"requested\",\n    \"projected\", \"incidence\", \"lighting\", \"shifting\", \"provider\", \"stiff\", \"contents\", \"janet\", \"escaped\", \"suite\", \"teaches\", \"tours\", \"median\", \"perceive\", \"diana\", \"openly\",\n    \"exhausted\", \"unclear\", \"permitted\", \"province\", \"patent\", \"meantime\", \"stored\", \"greens\", \"tanks\", \"mueller\", \"anxious\", \"specified\", \"columnist\", \"rises\", \"revealing\", \"designers\",\n    \"mister\", \"exercises\", \"interact\", \"temporal\", \"struggles\", \"northeast\", \"bored\", \"swallowed\", \"benjamin\", \"planted\", \"streak\", \"assured\", \"pitching\", \"calendar\", \"safely\", \"investing\",\n    \"pasta\", \"squad\", \"homework\", \"interface\", \"urged\", \"quotes\", \"grasp\", \"sucks\", \"partially\", \"ignoring\", \"statute\", \"saints\", \"pills\", \"sells\", \"detected\", \"flights\",\n    \"resolved\", \"towel\", \"promoted\", \"wireless\", \"browser\", \"syrian\", \"tyler\", \"stealing\", \"panels\", \"catherine\", \"criterion\", \"mentally\", \"founding\", \"accent\", \"respected\", \"bernie\",\n    \"steep\", \"stance\", \"columbus\", \"missiles\", \"jewelry\", \"draws\", \"suspects\", \"hunger\", \"workout\", \"corrupt\", \"warmth\", \"incidents\", \"placing\", \"eyebrows\", \"teammates\", \"prompted\",\n    \"screams\", \"metaphor\", \"starter\", \"backward\", \"murray\", \"feared\", \"hannah\", \"casey\", \"allstar\", \"mobility\", \"occasions\", \"wendy\", \"inventory\", \"threshold\", \"warrant\", \"deciding\",\n    \"guided\", \"galaxies\", \"financing\", \"writings\", \"shelf\", \"fighters\", \"excessive\", \"tropical\", \"evans\", \"recovered\", \"curiosity\", \"qualify\", \"montana\", \"traded\", \"mining\", \"obesity\",\n    \"screwed\", \"strengths\", \"nevada\", \"belonged\", \"hears\", \"footage\", \"sheer\", \"meanings\", \"blown\", \"bearing\", \"kenny\", \"forrest\", \"proceed\", \"activist\", \"lucas\", \"symbols\",\n    \"carlos\", \"suitable\", \"possess\", \"reserves\", \"highlight\", \"workshop\", \"collar\", \"albert\", \"graduates\", \"chemistry\", \"eagles\", \"infected\", \"reception\", \"vinegar\", \"hansen\", \"vincent\",\n    \"avoided\", \"shuttle\", \"lacking\", \"sectors\", \"lineup\", \"greece\", \"stepping\", \"amanda\", \"shiny\", \"matches\", \"awarded\", \"embassy\", \"incentive\", \"colin\", \"bothered\", \"jurors\",\n    \"voluntary\", \"decides\", \"gasoline\", \"explored\", \"masses\", \"oliver\", \"retain\", \"missions\", \"squeezed\", \"hostile\", \"paradigm\", \"spends\", \"developer\", \"teenagers\", \"spreading\", \"departure\",\n    \"happily\", \"haiti\", \"donations\", \"tales\", \"invented\", \"orchestra\", \"aliens\", \"benghazi\", \"palin\", \"flows\", \"magnetic\", \"holmes\", \"detection\", \"organize\", \"ukraine\", \"removing\",\n    \"barrier\", \"nothin\", \"loyalty\", \"knight\", \"fights\", \"shining\", \"villages\", \"harvey\", \"economist\", \"converted\", \"sticking\", \"relieved\", \"poems\", \"hurting\", \"affecting\", \"hurried\",\n    \"lighter\", \"studios\", \"malcolm\", \"locker\", \"revenge\", \"lungs\", \"tablet\", \"testament\", \"notably\", \"wears\", \"flames\", \"publish\", \"justified\", \"pillow\", \"divorced\", \"relating\",\n    \"export\", \"worries\", \"grandpa\", \"marcus\", \"sharply\", \"hesitated\", \"leonard\", \"entities\", \"polling\", \"desktop\", \"lifting\", \"backyard\", \"inability\", \"norman\", \"authentic\", \"finishing\",\n    \"interpret\", \"companion\", \"depressed\", \"rogers\", \"labeled\", \"contacts\", \"altered\", \"distress\", \"centre\", \"essays\", \"deemed\", \"vessels\", \"pickup\", \"lions\", \"prints\", \"blogging\",\n    \"bosnia\", \"laser\", \"bride\", \"railroad\", \"mercury\", \"relaxed\", \"graphics\", \"testified\", \"dealer\", \"pearl\", \"fleet\", \"regimes\", \"holidays\", \"floors\", \"midst\", \"drawer\",\n    \"banned\", \"addiction\", \"countless\", \"fighter\", \"sends\", \"revised\", \"embedded\", \"liver\", \"vanished\", \"teenager\", \"marines\", \"reserved\", \"rumors\", \"yeltsin\", \"cuban\", \"occurring\",\n    \"zones\", \"transform\", \"stunning\", \"battles\", \"testify\", \"paths\", \"harold\", \"freely\", \"anytime\", \"matching\", \"judgments\", \"collapsed\", \"tolerance\", \"latino\", \"creator\", \"weakness\",\n    \"earning\", \"costly\", \"insists\", \"treasure\", \"marty\", \"carrier\", \"tampa\", \"varieties\", \"partisan\", \"modes\", \"cowboys\", \"boulder\", \"delayed\", \"wallet\", \"pursuing\", \"intensive\",\n    \"pathetic\", \"avoiding\", \"kings\", \"failures\", \"skillet\", \"edited\", \"kicking\", \"regards\", \"reminder\", \"dealers\", \"considers\", \"magical\", \"butler\", \"prayers\", \"starters\", \"polish\",\n    \"proteins\", \"backing\", \"priests\", \"shipping\", \"utterly\", \"rebounds\", \"insects\", \"resume\", \"spinning\", \"glances\", \"faithful\", \"crushed\", \"terrain\", \"quinn\", \"bennett\", \"compound\",\n    \"colorful\", \"digging\", \"accounted\", \"sullivan\", \"laying\", \"imagery\", \"youngest\", \"molecules\", \"skinny\", \"brutal\", \"terrified\", \"resting\", \"favorable\", \"shorts\", \"egyptian\", \"pairs\",\n    \"nails\", \"pilots\", \"posed\", \"intend\", \"desires\", \"tribes\", \"emergence\", \"exports\", \"stating\", \"charming\", \"turkish\", \"wonders\", \"puerto\", \"apples\", \"citing\", \"mounted\",\n    \"applause\", \"governing\", \"slope\", \"advisory\", \"dylan\", \"rebels\", \"fisher\", \"witnessed\", \"forming\", \"socks\", \"strictly\", \"carved\", \"senses\", \"slammed\", \"brushed\", \"initiated\",\n    \"printing\", \"opposing\", \"succeeded\", \"manning\", \"scholar\", \"averaged\", \"tavis\", \"favored\", \"doubled\", \"sliding\", \"tenure\", \"surgeon\", \"mighty\", \"container\", \"lesser\", \"palms\",\n    \"bulls\", \"relevance\", \"destiny\", \"knocking\", \"operated\", \"assure\", \"samsung\", \"dakota\", \"ballots\", \"samuel\", \"angela\", \"loudly\", \"tapes\", \"polite\", \"catches\", \"discount\",\n    \"louder\", \"reverend\", \"novak\", \"bullying\", \"stressed\", \"skilled\", \"colleague\", \"tapped\", \"switched\", \"ripped\", \"rides\", \"sprinkle\", \"rejection\", \"glenn\", \"cleaned\", \"teddy\",\n    \"visitor\", \"chiefs\", \"foolish\", \"scratch\", \"permits\", \"bizarre\", \"tourism\", \"miserable\", \"dreamed\", \"architect\", \"occupy\", \"leans\", \"receives\", \"palestine\", \"blamed\", \"gaining\",\n    \"hometown\", \"formerly\", \"symphony\", \"vanilla\", \"stern\", \"routinely\", \"stark\", \"tensions\", \"derek\", \"youths\", \"bullets\", \"travelers\", \"armstrong\", \"watson\", \"domains\", \"crowds\",\n    \"rodriguez\", \"andrea\", \"jeremy\", \"sympathy\", \"practiced\", \"religions\", \"scrutiny\", \"labels\", \"terribly\", \"cohort\", \"earliest\", \"hosts\", \"ancestors\", \"passive\", \"murders\", \"chasing\",\n    \"batman\", \"prisoner\", \"dusty\", \"medieval\", \"annoying\", \"verse\", \"garcia\", \"bryant\", \"spencer\", \"searched\", \"farming\", \"gasps\", \"cheating\", \"trains\", \"buttons\", \"strongest\",\n    \"observer\", \"matched\", \"weekends\", \"loses\", \"organisms\", \"yields\", \"subsidies\", \"peterson\", \"orlando\", \"abundance\", \"nearest\", \"equipped\", \"suburbs\", \"bridges\", \"wounds\", \"shocking\",\n    \"homer\", \"lasted\", \"wasted\", \"kathy\", \"appealing\", \"patriots\", \"airplane\", \"costume\", \"parenting\", \"richmond\", \"tucson\", \"tumor\", \"surgical\", \"observing\", \"desirable\", \"irony\",\n    \"lawsuits\", \"legendary\", \"theaters\", \"divisions\", \"blessing\", \"skeptical\", \"cheers\", \"warriors\", \"tires\", \"screens\", \"caribbean\", \"adverse\", \"tribune\", \"operator\", \"probe\", \"sentenced\",\n    \"hates\", \"aurora\", \"statue\", \"valued\", \"inmates\", \"mandatory\", \"honored\", \"replacing\", \"imaging\", \"prophet\", \"germans\", \"kissing\", \"jupiter\", \"flashed\", \"enabled\", \"caroline\",\n    \"rewards\", \"realizing\", \"oversight\", \"champagne\", \"dense\", \"workforce\", \"sophomore\", \"rested\", \"straw\", \"museums\", \"donors\", \"continent\", \"optimal\", \"clearing\", \"restored\", \"certified\",\n    \"ounces\", \"vermont\", \"notions\", \"sweeping\", \"downs\", \"hudson\", \"recycling\", \"titled\", \"binding\", \"minimize\", \"sweater\", \"cookie\", \"murmured\", \"solved\", \"heather\", \"confusing\",\n    \"retailers\", \"abraham\", \"somethin\", \"sentiment\", \"ranking\", \"drifted\", \"doubts\", \"clarity\", \"reduces\", \"premise\", \"dated\", \"hierarchy\", \"harrison\", \"histories\", \"cycles\", \"keyboard\",\n    \"operates\", \"shelves\", \"hangs\", \"stevens\", \"casting\", \"tricks\", \"lloyd\", \"scenarios\", \"carrie\", \"seized\", \"severely\", \"pushes\", \"charm\", \"propose\", \"realities\", \"drawings\",\n    \"taxpayer\", \"washing\", \"prevented\", \"convert\", \"cries\", \"speeches\", \"chains\", \"limiting\", \"bailey\", \"guides\", \"hightech\", \"investor\", \"popped\", \"commented\", \"sixteen\", \"randomly\",\n    \"salaries\", \"archives\", \"closes\", \"hiking\", \"milwaukee\", \"violated\", \"blogger\", \"fried\", \"louise\", \"lasting\", \"routes\", \"trout\", \"thrust\", \"analyzing\", \"framed\", \"supper\",\n    \"elevated\", \"freshly\", \"barnes\", \"arriving\", \"limbs\", \"compact\", \"aloud\", \"rotation\", \"lovers\", \"thesis\", \"sequences\", \"triple\", \"quantity\", \"mitch\", \"travis\", \"colony\",\n    \"princeton\", \"bikes\", \"indirect\", \"towers\", \"maintains\", \"melissa\", \"selfish\", \"paradise\", \"shoved\", \"obstacles\", \"castro\", \"crude\", \"tucker\", \"spine\", \"peered\", \"severity\",\n    \"integral\", \"victories\", \"packages\", \"processor\", \"slowed\", \"appearing\", \"surfaces\", \"raymond\", \"ashley\", \"judged\", \"shields\", \"exclusion\", \"threaten\", \"enables\", \"judging\", \"delight\",\n    \"furious\", \"starr\", \"christie\", \"praying\", \"suspicion\", \"frames\", \"releases\", \"boundary\", \"hardest\", \"europeans\", \"risky\", \"dodgers\", \"therapist\", \"publicity\", \"aides\", \"confront\",\n    \"damages\", \"charging\", \"lakers\", \"diameter\", \"poster\", \"targeting\", \"pipeline\", \"painter\", \"notre\", \"rental\", \"static\", \"scripture\", \"dorothy\", \"hatch\", \"regulate\", \"blonde\",\n    \"hughes\", \"amazed\", \"pounding\", \"saturated\", \"speeds\", \"grunts\", \"resigned\", \"shout\", \"gazed\", \"lauren\", \"extract\", \"majors\", \"optional\", \"greta\", \"dangers\", \"glowing\",\n    \"longest\", \"scholarly\", \"workshops\", \"shirts\", \"consumed\", \"storms\", \"hopeful\", \"blows\", \"flowing\", \"declare\", \"dessert\", \"kitty\", \"poland\", \"intel\", \"impaired\", \"normative\",\n    \"declining\", \"tastes\", \"texture\", \"batteries\", \"contacted\", \"victoria\", \"martinez\", \"raiders\", \"shawn\", \"fortunate\", \"drought\", \"amongst\", \"invention\", \"dresses\", \"cameron\", \"deficits\",\n    \"naval\", \"overview\", \"embraced\", \"exhibited\", \"idiots\", \"nitrogen\", \"weigh\", \"credible\", \"clusters\", \"ballet\", \"privately\", \"ellis\", \"stumbled\", \"mentor\", \"delegates\", \"imply\",\n    \"operators\", \"mills\", \"goldman\", \"sensation\", \"utilities\", \"chile\", \"rooted\", \"ethan\", \"disputes\", \"footsteps\", \"fuels\", \"mickey\", \"slides\", \"forecast\", \"theirs\", \"blair\",\n    \"cooling\", \"natalie\", \"arlington\", \"broth\", \"scouts\", \"falcons\", \"headline\", \"notebook\", \"customs\", \"locate\", \"travels\", \"arrives\", \"heated\", \"ensuring\", \"riley\", \"beats\",\n    \"columns\", \"implied\", \"swinging\", \"kenneth\", \"canon\", \"optical\", \"sucked\", \"discharge\", \"sophie\", \"alternate\", \"roses\", \"terminal\", \"accidents\", \"purchases\", \"precision\", \"tribute\",\n    \"cowboy\", \"stems\", \"designing\", \"chapters\", \"quarterly\", \"persian\", \"sealed\", \"recipient\", \"motel\", \"surrender\", \"coupled\", \"tokyo\", \"renewed\", \"centered\", \"dumped\", \"fourteen\",\n    \"troubles\", \"comply\", \"spotlight\", \"defines\", \"chapel\", \"indicator\", \"artifacts\", \"urgent\", \"worrying\", \"dreaming\", \"marginal\", \"compost\", \"viewer\", \"gregory\", \"sweep\", \"servants\",\n    \"harper\", \"judiciary\", \"predictor\", \"bloggers\", \"steadily\", \"chorus\", \"hosted\", \"visually\", \"flipped\", \"harmony\", \"thrilled\", \"siblings\", \"kisses\", \"onethird\", \"fictional\", \"inspector\",\n    \"tense\", \"buses\", \"talkin\", \"albeit\", \"overtime\", \"relied\", \"extending\", \"curtains\", \"midwest\", \"computing\", \"whats\", \"griffin\", \"underwear\", \"moses\", \"finest\", \"charts\",\n    \"editing\", \"proves\", \"idaho\", \"gravel\", \"robbery\", \"backwards\", \"rockies\", \"facial\", \"intake\", \"bloom\", \"depicted\", \"heating\", \"basin\", \"cottage\", \"cousins\", \"grounded\",\n    \"fluency\", \"crews\", \"streams\", \"chick\", \"shades\", \"donated\", \"refuge\", \"flooding\", \"suited\", \"comics\", \"motive\", \"steering\", \"integrate\", \"indonesia\", \"possessed\", \"mushrooms\",\n    \"password\", \"frontier\", \"penalties\", \"needle\", \"nutrients\", \"drilling\", \"pricing\", \"explosive\", \"conceived\", \"analogy\", \"candles\", \"tuned\", \"surveyed\", \"vendors\", \"haven\", \"pelosi\",\n    \"nicely\", \"klein\", \"relates\", \"compounds\", \"carriers\", \"outlined\", \"admire\", \"listing\", \"whispers\", \"profiles\", \"pleaded\", \"interval\", \"competent\", \"finely\", \"motives\", \"intrinsic\",\n    \"suitcase\", \"riders\", \"starring\", \"strains\", \"composite\", \"passages\", \"wasting\", \"broadly\", \"hazardous\", \"readings\", \"breathed\", \"phases\", \"utilized\", \"justices\", \"immunity\", \"factories\",\n    \"subscribe\", \"thief\", \"arguably\", \"coded\", \"stuart\", \"fisheries\", \"slapped\", \"nashville\", \"minced\", \"dominate\", \"crashed\", \"venus\", \"rendered\", \"creepy\", \"finals\", \"convey\",\n    \"lacks\", \"brady\", \"sundays\", \"mixing\", \"renewable\", \"nigeria\", \"platforms\", \"obsessed\", \"nexus\", \"statewide\", \"implicit\", \"sixty\", \"carson\", \"budgets\", \"kinsley\", \"aftermath\",\n    \"breeding\", \"liane\", \"recruited\", \"peppers\", \"ringing\", \"planting\", \"thankful\", \"elites\", \"strips\", \"blocking\", \"smoked\", \"refusing\", \"parttime\", \"portable\", \"zealand\", \"cheer\",\n    \"maternal\", \"serial\", \"blake\", \"selecting\", \"shells\", \"fellas\", \"trevor\", \"rationale\", \"thighs\", \"elders\", \"porter\", \"segments\", \"coding\", \"pursued\", \"ideals\", \"thirteen\",\n    \"atomic\", \"newman\", \"wildly\", \"specialty\", \"warehouse\", \"ellie\", \"genuinely\", \"sleeve\", \"ranges\", \"waitress\", \"melted\", \"elvis\", \"cindy\", \"omaha\", \"lifts\", \"comet\",\n    \"consume\", \"bryan\", \"rivals\", \"leverage\", \"generic\", \"someplace\", \"deserved\", \"wolves\", \"freezing\", \"formally\", \"waits\", \"hostages\", \"risen\", \"selective\", \"wandered\", \"bells\",\n    \"proceeds\", \"canceled\", \"governors\", \"shortage\", \"denying\", \"retained\", \"danced\", \"spill\", \"slower\", \"volumes\", \"mario\", \"morally\", \"wines\", \"ensemble\", \"newest\", \"stakes\",\n    \"simmer\", \"trans\", \"obtaining\", \"astros\", \"bloomberg\", \"byebye\", \"gloria\", \"translate\", \"sweden\", \"fitting\", \"clayton\", \"absorbed\", \"slipping\", \"treats\", \"strings\", \"secondly\",\n    \"greeted\", \"argentina\", \"sensed\", \"certainty\", \"tracy\", \"listeners\", \"champions\", \"pitchers\", \"examines\", \"shotgun\", \"borrowed\", \"illegally\", \"premiere\", \"motors\", \"trainer\", \"holder\",\n    \"curtis\", \"entries\", \"portrayed\", \"outlets\", \"memorable\", \"pitched\", \"boulevard\", \"ironic\", \"peaks\", \"poles\", \"fists\", \"zimmerman\", \"disposal\", \"processed\", \"reviewing\", \"portions\",\n    \"lacked\", \"breakdown\", \"defended\", \"imports\", \"musician\", \"flags\", \"logan\", \"stephanie\", \"surviving\", \"handy\", \"marriages\", \"extends\", \"polished\", \"thrones\", \"peeled\", \"decorated\",\n    \"carroll\", \"intervals\", \"concludes\", \"flawed\", \"allied\", \"loads\", \"survivor\", \"excerpt\", \"unified\", \"lending\", \"bowed\", \"jumps\", \"appendix\", \"communism\", \"cellular\", \"console\",\n    \"connie\", \"patricia\", \"overly\", \"nodding\", \"tubes\", \"comin\", \"enacted\", \"offset\", \"talents\", \"taller\", \"chambers\", \"greed\", \"admiral\", \"regulated\", \"rosie\", \"stats\",\n    \"burke\", \"exploded\", \"drafted\", \"yielded\", \"landmark\", \"albums\", \"christine\", \"linking\", \"mistaken\", \"outright\", \"kindle\", \"founders\", \"dominance\", \"stossel\", \"preserved\", \"offended\",\n    \"swings\", \"packing\", \"wicked\", \"waiter\", \"megan\", \"affection\", \"leslie\", \"glancing\", \"sensors\", \"clues\", \"courtyard\", \"spelling\", \"primitive\", \"sporting\", \"gettin\", \"happier\",\n    \"shark\", \"flavors\", \"favors\", \"licensed\", \"secured\", \"flashing\", \"deborah\", \"sunshine\", \"hugged\", \"smarter\", \"darker\", \"gestured\", \"neurons\", \"outdoors\", \"trait\", \"offerings\",\n    \"guardian\", \"detention\", \"exceed\", \"elect\", \"grunting\", \"plains\", \"notices\", \"patted\", \"sideways\", \"browns\", \"interim\", \"ministers\", \"innocence\", \"crosses\", \"objection\", \"mentality\",\n    \"palmer\", \"kicks\", \"undermine\", \"annoyed\", \"finances\", \"newton\", \"carlson\", \"ricky\", \"fairness\", \"shattered\", \"optimism\", \"causal\", \"monsters\", \"exchanges\", \"thorough\", \"genome\",\n    \"respects\", \"needing\", \"cartoon\", \"manages\", \"rubbing\", \"seasonal\", \"kenya\", \"import\", \"topped\", \"warnings\", \"rented\", \"specimens\", \"preschool\", \"sandra\", \"genesis\", \"wrestling\",\n    \"imported\", \"launching\", \"cooler\", \"withdraw\", \"doctoral\", \"hopkins\", \"corpse\", \"curry\", \"evenly\", \"shooter\", \"singapore\", \"ratios\", \"begging\", \"chickens\", \"groans\", \"systemic\",\n    \"basil\", \"feathers\", \"recruit\", \"posters\", \"damaging\", \"serum\", \"glorious\", \"subjected\", \"husbands\", \"gonzalez\", \"crust\", \"lookin\", \"panthers\", \"offenders\", \"forbes\", \"jerked\",\n    \"diplomacy\", \"stripped\", \"affective\", \"feminine\", \"gestures\", \"curricula\", \"descent\", \"hardy\", \"preheat\", \"hosting\", \"carrots\", \"echoed\", \"refuses\", \"messed\", \"grilled\", \"sydney\",\n    \"cheat\", \"paperwork\", \"robots\", \"alfred\", \"laurie\", \"ducks\", \"relying\", \"relies\", \"mouths\", \"censored\", \"costa\", \"brett\", \"ravens\", \"ranger\", \"breed\", \"phrases\",\n    \"shouts\", \"queens\", \"matthews\", \"stimuli\", \"preceding\", \"candle\", \"supporter\", \"clinics\", \"bowls\", \"fertility\", \"combining\", \"deployed\", \"dragging\", \"tilted\", \"superman\", \"coleman\",\n    \"blaming\", \"whisk\", \"enron\", \"marvel\", \"toyota\", \"delighted\", \"swiss\", \"releasing\", \"cracks\", \"folder\", \"discusses\", \"margins\", \"teaspoons\", \"viruses\", \"fixing\", \"searches\",\n    \"isaac\", \"cardinal\", \"rusty\", \"wishing\", \"squash\", \"persuade\", \"cautious\", \"elbows\", \"outline\", \"sensible\", \"steelers\", \"walmart\", \"runners\", \"educator\", \"chloe\", \"realizes\",\n    \"mustard\", \"prayed\", \"endorsed\", \"praised\", \"supplied\", \"pretended\", \"interrupt\", \"cooperate\", \"joking\", \"joshua\", \"sponsors\", \"proving\", \"surplus\", \"spark\", \"freaking\", \"animated\",\n    \"circus\", \"seventeen\", \"stresses\", \"nerves\", \"fastest\", \"boiling\", \"rounded\", \"cheering\", \"smallest\", \"emerges\", \"busted\", \"wandering\", \"auburn\", \"gabriel\", \"excuses\", \"computed\",\n    \"repeating\", \"closure\", \"holdings\", \"easter\", \"hispanics\", \"floated\", \"roasted\", \"traces\", \"mapping\", \"reinforce\", \"meredith\", \"dietary\", \"lanes\", \"confined\", \"fragments\", \"julian\",\n    \"reliance\", \"lengthy\", \"streaming\", \"varies\", \"wyoming\", \"nicholas\", \"lectures\", \"parkway\", \"meter\", \"enabling\", \"olivia\", \"calculate\", \"crossfire\", \"frankie\", \"fountain\", \"corrected\",\n    \"compiled\", \"prejudice\", \"schemes\", \"demons\", \"deviation\", \"felony\", \"newer\", \"hercules\", \"clara\", \"secretly\", \"violet\", \"thereof\", \"criticize\", \"peninsula\", \"enjoys\", \"tricky\",\n    \"atoms\", \"saturn\", \"piled\", \"dont\", \"walsh\", \"residual\", \"commands\", \"wires\", \"powered\", \"carla\", \"conan\", \"mines\", \"delivers\", \"packs\", \"mattress\", \"mastery\",\n    \"pupils\", \"commodity\", \"nervously\", \"betrayed\", \"spilled\", \"timely\", \"precedent\", \"limbaugh\", \"oddly\", \"refusal\", \"outreach\", \"homemade\", \"repeal\", \"delays\", \"nintendo\", \"sacks\",\n    \"prevalent\", \"poses\", \"delaware\", \"liberties\", \"myers\", \"statutes\", \"premier\", \"grains\", \"biased\", \"livestock\", \"particle\", \"prairie\", \"nobel\", \"elaine\", \"brenda\", \"hawks\",\n    \"portraits\", \"bushes\", \"christina\", \"scotland\", \"flaws\", \"contend\", \"massage\", \"hormone\", \"raced\", \"stamps\", \"vaguely\", \"boeing\", \"stretches\", \"cycling\", \"necklace\", \"bankers\",\n    \"comprised\", \"chili\", \"dancer\", \"meyer\", \"woody\", \"stacked\", \"appetite\", \"singles\", \"revision\", \"luckily\", \"rigorous\", \"markers\", \"visions\", \"revival\", \"learner\", \"tablets\",\n    \"figuring\", \"rainbow\", \"masks\", \"cardboard\", \"slick\", \"fishery\", \"rituals\", \"endure\", \"shepherd\", \"broker\", \"baseman\", \"debbie\", \"promotes\", \"alltime\", \"valentine\", \"gerald\",\n    \"shoots\", \"spiral\", \"testers\", \"literal\", \"healthier\", \"opener\", \"tissues\", \"locks\", \"offseason\", \"throne\", \"lifelong\", \"niche\", \"joyce\", \"thermal\", \"evolving\", \"stirred\",\n    \"condemned\", \"feminism\", \"depths\", \"offshore\", \"resign\", \"puzzled\", \"starving\", \"advise\", \"grammar\", \"basics\", \"handles\", \"successes\", \"surprises\", \"donation\", \"distances\", \"curls\",\n    \"marco\", \"backpack\", \"communal\", \"confess\", \"stained\", \"probable\", \"concerts\", \"balloon\", \"assert\", \"develops\", \"monitors\", \"denise\", \"elliott\", \"colonies\", \"handing\", \"mentions\",\n    \"pools\", \"grabbing\", \"strokes\", \"darwin\", \"saucepan\", \"clarence\", \"tasted\", \"arrests\", \"briefing\", \"flooded\", \"differed\", \"textbooks\", \"debts\", \"plots\", \"whistle\", \"sherman\",\n    \"settling\", \"obsession\", \"lottery\", \"packers\", \"manifest\", \"preseason\", \"maximize\", \"truths\", \"interfere\", \"forbidden\", \"balancing\", \"ontario\", \"saves\", \"tolerate\", \"violate\", \"allison\",\n    \"punished\", \"blankets\", \"chuckled\", \"synthetic\", \"marietta\", \"priced\", \"pavement\", \"turtles\", \"choir\", \"timeline\", \"pierce\", \"angles\", \"cloves\", \"sonny\", \"disclose\", \"switching\",\n    \"doomed\", \"servers\", \"posture\", \"triggered\", \"glared\", \"punish\", \"lester\", \"battered\", \"carpenter\", \"premiums\", \"exhibits\", \"chrysler\", \"comeback\", \"turnout\", \"audrey\", \"crawford\",\n    \"trades\", \"sensor\", \"rocking\", \"reversed\", \"crafts\", \"remedy\", \"neglected\", \"saddle\", \"scarf\", \"troubling\", \"headache\", \"twoyear\", \"altar\", \"dancers\", \"blades\", \"sprint\",\n    \"probation\", \"graves\", \"vicious\", \"deleted\", \"clutching\", \"marital\", \"circular\", \"descended\", \"gasped\", \"consult\", \"lengths\", \"haunted\", \"contempt\", \"calvin\", \"henderson\", \"compelled\",\n    \"memoir\", \"hedge\", \"acids\", \"strangely\", \"uniforms\", \"pipes\", \"netanyahu\", \"planetary\", \"fills\", \"barrels\", \"resistant\", \"imaginary\", \"truman\", \"sammy\", \"capita\", \"showbiz\",\n    \"vaccines\", \"moonlight\", \"mattered\", \"forums\", \"saturdays\", \"subscale\", \"andrews\", \"intimacy\", \"freed\", \"crises\", \"poetic\", \"kindness\", \"gripped\", \"quayle\", \"easiest\", \"prisons\",\n    \"averaging\", \"dolphins\", \"nicky\", \"mornings\", \"parameter\", \"remark\", \"weeds\", \"carriage\", \"calmly\", \"textual\", \"flung\", \"helpless\", \"enhancing\", \"slips\", \"serbs\", \"athens\",\n    \"robertson\", \"downward\", \"peggy\", \"outlet\", \"ambiguous\", \"caption\", \"labour\", \"suppliers\", \"savannah\", \"patty\", \"accord\", \"savage\", \"flushed\", \"colts\", \"licenses\", \"romans\",\n    \"guiding\", \"thailand\", \"coats\", \"patches\", \"preview\", \"rider\", \"machinery\", \"camping\", \"sticky\", \"threads\", \"hayes\", \"bacterial\", \"offspring\", \"tweets\", \"coins\", \"sweating\",\n    \"fishermen\", \"theorists\", \"miniature\", \"schooling\", \"clicking\", \"snakes\", \"galleries\", \"reign\", \"tones\", \"ferguson\", \"cherokee\", \"wholly\", \"nowadays\", \"predators\", \"librarian\", \"mistress\",\n    \"whipped\", \"warmer\", \"losers\", \"directing\", \"myths\", \"artwork\", \"shipped\", \"teachings\", \"batting\", \"prevents\", \"winston\", \"airports\", \"clenched\", \"ruins\", \"spinach\", \"realism\",\n    \"fools\", \"modernity\", \"exclaimed\", \"foremost\", \"nasdaq\", \"pitches\", \"buddies\", \"crawled\", \"enjoyment\", \"piles\", \"replies\", \"observes\", \"swollen\", \"dripping\", \"dental\", \"carolyn\",\n    \"wreck\", \"sinking\", \"santorum\", \"coffin\", \"decreases\", \"patterson\", \"bonnie\", \"katherine\", \"gardening\", \"render\", \"shootings\", \"summers\", \"pathways\", \"campuses\", \"adrian\", \"successor\",\n    \"tearing\", \"muddy\", \"siegel\", \"jenkins\", \"vibrant\", \"explorer\", \"whitney\", \"chooses\", \"chefs\", \"arises\", \"exploit\", \"rankings\", \"vince\", \"teammate\", \"marsh\", \"draped\",\n    \"feasible\", \"scanned\", \"sanchez\", \"breach\", \"lethal\", \"diamonds\", \"casually\", \"benny\", \"gauge\", \"geraldo\", \"narrowed\", \"samantha\", \"nationals\", \"poets\", \"statutory\", \"startup\",\n    \"uncovered\", \"lindsay\", \"perched\", \"wagner\", \"lateral\", \"shrink\", \"poised\", \"programme\", \"lousy\", \"fouryear\", \"gallon\", \"lenses\", \"batter\", \"electron\", \"marker\", \"frederick\",\n    \"ambition\", \"disasters\", \"imagining\", \"cursed\", \"keywords\", \"crashing\", \"rehearsal\", \"radically\", \"singers\", \"cleaner\", \"tackles\", \"fridge\", \"mentoring\", \"deserted\", \"monroe\", \"fiveyear\",\n    \"woodruff\", \"imposing\", \"gases\", \"patrons\", \"curved\", \"mainland\", \"flush\", \"traumatic\", \"halls\", \"morrison\", \"marilyn\", \"traced\", \"licensing\", \"heavier\", \"killers\", \"utilize\",\n    \"oneself\", \"mineral\", \"marched\", \"subscales\", \"defenses\", \"scratched\", \"ankles\", \"curves\", \"froze\", \"readiness\", \"transfers\", \"dateline\", \"leisure\", \"genocide\", \"catcher\", \"rosemary\",\n    \"smoothly\", \"misses\", \"sleeves\", \"proudly\", \"explores\", \"thrill\", \"situated\", \"gangs\", \"seller\", \"panting\", \"momma\", \"robbed\", \"modem\", \"responds\", \"eleanor\", \"mound\",\n    \"notorious\", \"arrogant\", \"lively\", \"defender\", \"bounced\", \"willis\", \"punched\", \"darkened\", \"borrowing\", \"gardner\", \"cornell\", \"schedules\", \"clicked\", \"oceans\", \"layout\", \"trousers\",\n    \"overlap\", \"milky\", \"michel\", \"sincere\", \"shelters\", \"veins\", \"bites\", \"covenant\", \"fueled\", \"anova\", \"minus\", \"perimeter\", \"lowering\", \"freeman\", \"slightest\", \"hitter\",\n    \"remainder\", \"stimulate\", \"becky\", \"perfume\", \"mindset\", \"norway\", \"filters\", \"eased\", \"rests\", \"drifting\", \"ambiguity\", \"swedish\", \"joints\", \"strive\", \"virtues\", \"sudan\",\n    \"manners\", \"displaced\", \"pervasive\", \"triangle\", \"seals\", \"vanessa\", \"marcia\", \"elliot\", \"filthy\", \"heroic\", \"wyatt\", \"exchanged\", \"lipstick\", \"slowing\", \"motions\", \"simpler\",\n    \"aligned\", \"holland\", \"gilbert\", \"passport\", \"tightened\", \"lenders\", \"denies\", \"evidently\", \"repairs\", \"kelley\", \"florence\", \"freedoms\", \"marvin\", \"paste\", \"climbs\", \"phoebe\",\n    \"shoppers\", \"footnote\", \"colombia\", \"mounting\", \"lieberman\", \"michele\", \"costumes\", \"roommate\", \"tactic\", \"asteroid\", \"anonymity\", \"mortgages\", \"exterior\", \"specify\", \"activism\", \"netflix\",\n    \"skywalker\", \"pumps\", \"africans\", \"tracked\", \"scanning\", \"plague\", \"andre\", \"messenger\", \"geneva\", \"hostility\", \"finale\", \"defenders\", \"knicks\", \"shannon\", \"mortal\", \"floyd\",\n    \"folding\", \"noticing\", \"eyebrow\", \"dangling\", \"edgar\", \"restrict\", \"whilst\", \"randall\", \"mutually\", \"rebellion\", \"prose\", \"nascar\", \"mosque\", \"rumsfeld\", \"lydia\", \"govern\",\n    \"vernon\", \"policeman\", \"marching\", \"boasts\", \"kosovo\", \"verge\", \"awaiting\", \"sensory\", \"claude\", \"soaked\", \"continuum\", \"handson\", \"agnes\", \"baylor\", \"wrists\", \"venezuela\",\n    \"johns\", \"doses\", \"worthless\", \"newsweek\", \"stressful\", \"sterling\", \"begged\", \"databases\", \"peering\", \"reactor\", \"methodist\", \"seafood\", \"decisive\", \"equations\", \"endured\", \"sworn\",\n    \"prompt\", \"gallons\", \"insect\", \"wander\", \"alignment\", \"clergy\", \"ramsey\", \"medicines\", \"amended\", \"gradual\", \"cleanup\", \"messy\", \"mentors\", \"shutdown\", \"whereby\", \"receivers\",\n    \"neural\", \"montreal\", \"victorian\", \"evelyn\", \"crouched\", \"phillip\", \"pinch\", \"thinly\", \"formats\", \"auditory\", \"stabbed\", \"primaries\", \"sequel\", \"sunni\", \"eternity\", \"bodily\",\n    \"twisting\", \"bankrupt\", \"norfolk\", \"grated\", \"deposits\", \"simmons\", \"quoting\", \"settlers\", \"beams\", \"diving\", \"acquiring\", \"bully\", \"urgency\", \"hottest\", \"plasma\", \"weary\",\n    \"automated\", \"remarked\", \"chunks\", \"binary\", \"shane\", \"patio\", \"pledged\", \"killings\", \"filming\", \"tugged\", \"flynn\", \"embodied\", \"hiphop\", \"bulletin\", \"illnesses\", \"notified\",\n    \"ports\", \"melting\", \"mcconnell\", \"cease\", \"differing\", \"getty\", \"burton\", \"monitored\", \"archive\", \"pinned\", \"trustees\", \"bailout\", \"planners\", \"feeds\", \"initiate\", \"textbook\",\n    \"tangible\", \"staffers\", \"sailing\", \"nasal\", \"pathway\", \"persuaded\", \"apollo\", \"linux\", \"brightly\", \"diced\", \"greeting\", \"exceeded\", \"sausage\", \"sheila\", \"scrambled\", \"jackets\",\n    \"shiite\", \"sucking\", \"beers\", \"drowned\", \"predicts\", \"staircase\", \"disclosed\", \"sugars\", \"propped\", \"knives\", \"rightly\", \"fella\", \"friedman\", \"iconic\", \"retiring\", \"foliage\",\n    \"minerals\", \"paramount\", \"consuming\", \"sings\", \"disgust\", \"pains\", \"handbook\", \"politely\", \"cochran\", \"accusing\", \"cigar\", \"evenings\", \"melody\", \"yanked\", \"attic\", \"rescued\",\n    \"ventures\", \"modeled\", \"depot\", \"combines\", \"protects\", \"patents\", \"hubble\", \"lettuce\", \"diesel\", \"sparked\", \"avoidance\", \"robbie\", \"jared\", \"believer\", \"skiers\", \"betsy\",\n    \"animation\", \"connor\", \"wordpress\", \"salesman\", \"apparatus\", \"provinces\", \"dared\", \"paranoid\", \"heavens\", \"sellers\", \"frances\", \"squinted\", \"canned\", \"mysteries\", \"anyways\", \"endeavor\",\n    \"forensic\", \"mutant\", \"honda\", \"dwight\", \"consist\", \"genetics\", \"yorker\", \"pumping\", \"blinking\", \"enjoyable\", \"prostate\", \"pauses\", \"generates\", \"miguel\", \"smashed\", \"stein\",\n    \"bubbles\", \"judgement\", \"performs\", \"earnest\", \"disciples\", \"scars\", \"doubles\", \"clips\", \"winding\", \"renewal\", \"explode\", \"crawling\", \"cheryl\", \"governed\", \"bowling\", \"juliet\",\n    \"blended\", \"underway\", \"cooks\", \"greene\", \"decay\", \"warns\", \"righteous\", \"offenses\", \"linen\", \"briefcase\", \"sights\", \"promptly\", \"amusement\", \"sabrina\", \"claws\", \"needles\",\n    \"metals\", \"activated\", \"commons\", \"greedy\", \"postal\", \"brighter\", \"hampton\", \"threatens\", \"nursery\", \"latinos\", \"proceeded\", \"bothering\", \"pragmatic\", \"butterfly\", \"chess\", \"viewpoint\",\n    \"flashes\", \"comedian\", \"fibers\", \"freezer\", \"reuters\", \"bulbs\", \"hobby\", \"chelsea\", \"fries\", \"weaker\", \"attendant\", \"uncommon\", \"stall\", \"sleek\", \"ideally\", \"impress\",\n    \"boomers\", \"palette\", \"stahl\", \"clarke\", \"boarding\", \"freeway\", \"whales\", \"aristotle\", \"postwar\", \"clutched\", \"strained\", \"cosby\", \"littleton\", \"slopes\", \"prototype\", \"vitamins\",\n    \"feminists\", \"coached\", \"gamble\", \"bronx\", \"tweeted\", \"communion\", \"finishes\", \"massacre\", \"jerome\", \"cardiac\", \"plaintiff\", \"showcase\", \"richards\", \"fracture\", \"eventual\", \"fitted\",\n    \"tumors\", \"rewarding\", \"chased\", \"crooked\", \"patriot\", \"mandela\", \"isaiah\", \"wrinkled\", \"softened\", \"unusually\", \"violating\", \"armies\", \"fuller\", \"touring\", \"pastel\", \"tangled\",\n    \"shaken\", \"shirley\", \"intervene\", \"realtime\", \"railing\", \"generals\", \"prefers\", \"declines\", \"trademark\", \"butcher\", \"bosses\", \"slumped\", \"mandated\", \"reggie\", \"swamp\", \"daniels\",\n    \"thanked\", \"reminding\", \"belle\", \"slams\", \"troop\", \"outsiders\", \"dread\", \"antiques\", \"kimberly\", \"schorr\", \"benefited\", \"goddess\", \"taxation\", \"cereal\", \"snorted\", \"cheerful\",\n    \"vastly\", \"metaphors\", \"rodney\", \"shredded\", \"differs\", \"shrugs\", \"pierre\", \"relay\", \"moist\", \"printer\", \"sting\", \"longing\", \"grandson\", \"mammals\", \"lindsey\", \"solomon\",\n    \"mercedes\", \"owens\", \"richer\", \"turnover\", \"sharks\", \"bastards\", \"greet\", \"staged\", \"savvy\", \"rubio\", \"definite\", \"mustache\", \"remotely\", \"composer\", \"scarce\", \"barney\",\n    \"tshirts\", \"betting\", \"steer\", \"jonah\", \"harlem\", \"decatur\", \"traders\", \"credited\", \"strands\", \"artillery\", \"collector\", \"cancers\", \"charities\", \"resembles\", \"hernandez\", \"verizon\",\n    \"spice\", \"sipped\", \"strode\", \"prestige\", \"trailing\", \"marion\", \"stray\", \"bouncing\", \"fearful\", \"specifics\", \"sailor\", \"resisted\", \"clung\", \"creators\", \"hunched\", \"snatched\",\n    \"fines\", \"flown\", \"echoes\", \"wiping\", \"soils\", \"diplomats\", \"freddie\", \"headnote\", \"paired\", \"rewarded\", \"jacobs\", \"openness\", \"homers\", \"equals\", \"listens\", \"persist\",\n    \"confessed\", \"rifles\", \"lowfat\", \"numerical\", \"skirts\", \"devotion\", \"swore\", \"exits\", \"lakewood\", \"brushing\", \"tract\", \"freud\", \"goose\", \"preaching\", \"directory\", \"pastoral\",\n    \"accompany\", \"felix\", \"hazards\", \"wasnt\", \"singular\", \"vancouver\", \"superb\", \"lamps\", \"boris\", \"broccoli\", \"habitats\", \"chargers\", \"proposing\", \"groaned\", \"earrings\", \"declaring\",\n    \"tactical\", \"monkeys\", \"vienna\", \"cheated\", \"manny\", \"americas\", \"hostess\", \"circled\", \"splash\", \"norton\", \"swiftly\", \"herbert\", \"isabel\", \"undergo\", \"piper\", \"impatient\",\n    \"sparks\", \"tenants\", \"improves\", \"discrete\", \"wired\", \"worms\", \"frasier\", \"muscular\", \"sidney\", \"agreeing\", \"messing\", \"storyline\", \"exposing\", \"deepest\", \"graders\", \"performer\",\n    \"preorder\", \"bullpen\", \"startling\", \"pillows\", \"barking\", \"alumni\", \"bending\", \"villain\", \"hints\", \"cites\", \"stupidity\", \"deputies\", \"dances\", \"venues\", \"valerie\", \"ambitions\",\n    \"battling\", \"grapes\", \"chicks\", \"luggage\", \"marrying\", \"employing\", \"diets\", \"sleepy\", \"veronica\", \"granite\", \"beatles\", \"parted\", \"riots\", \"islamist\", \"schwartz\", \"groceries\",\n    \"pursuant\", \"judith\", \"recruits\", \"dolls\", \"cakes\", \"cracking\", \"concealed\", \"shapiro\", \"harmless\", \"tornado\", \"denmark\", \"poked\", \"autopsy\", \"suffers\", \"arthritis\", \"outbreaks\",\n    \"alicia\", \"leaked\", \"protocols\", \"backlash\", \"quicker\", \"freelance\", \"favourite\", \"villagers\", \"referral\", \"taped\", \"clearer\", \"framing\", \"curly\", \"rains\", \"brooke\", \"sebastian\",\n    \"medals\", \"grease\", \"extracted\", \"ropes\", \"garth\", \"lingering\", \"thieves\", \"downhill\", \"dawson\", \"signaling\", \"groaning\", \"recycled\", \"dixon\", \"blink\", \"tossing\", \"roswell\",\n    \"scarcely\", \"protested\", \"restraint\", \"garrett\", \"iranians\", \"verses\", \"herman\", \"kindly\", \"tenth\", \"mumbled\", \"finite\", \"presently\", \"toddler\", \"drake\", \"popping\", \"mediation\",\n    \"dudes\", \"paints\", \"derive\", \"rendering\", \"salient\", \"troll\", \"jenna\", \"thinkers\", \"destined\", \"sweaty\", \"booked\", \"logging\", \"restless\", \"buster\", \"gateway\", \"spoiled\",\n    \"stink\", \"whining\", \"paradox\", \"exposures\", \"debated\", \"dissolve\", \"huddled\", \"archer\", \"accepts\", \"webster\", \"collision\", \"skating\", \"famously\", \"cocked\", \"enforced\", \"natives\",\n    \"drums\", \"crashes\", \"spicy\", \"backdrop\", \"hissed\", \"leaks\", \"ramirez\", \"spouses\", \"bumps\", \"albany\", \"stalin\", \"schmidt\", \"dinners\", \"dissent\", \"pamela\", \"classics\",\n    \"weakened\", \"wetlands\", \"seize\", \"pedagogy\", \"champ\", \"commanded\", \"highways\", \"generator\", \"denny\", \"shivering\", \"globally\", \"thyme\", \"alison\", \"premises\", \"civilized\", \"cockpit\",\n    \"diffusion\", \"perez\", \"presses\", \"daring\", \"pastry\", \"growers\", \"hisher\", \"anita\", \"shrinking\", \"carnegie\", \"trope\", \"holders\", \"goldberg\", \"cavuto\", \"cables\", \"prolife\",\n    \"crater\", \"painters\", \"departed\", \"outraged\", \"seating\", \"youve\", \"pointless\", \"amusing\", \"aiming\", \"genres\", \"confirms\", \"mandates\", \"podcast\", \"folds\", \"bosnian\", \"fantasies\",\n    \"jammed\", \"renowned\", \"metric\", \"snaps\", \"ethic\", \"shivered\", \"proxy\", \"appealed\", \"leftist\", \"sprawling\", \"drones\", \"squares\", \"brokers\", \"milton\", \"chavez\", \"freddy\",\n    \"landlord\", \"blessings\", \"trent\", \"deceased\", \"sincerely\", \"attain\", \"excluding\", \"embargo\", \"wildcats\", \"marina\", \"posttest\", \"obese\", \"nodes\", \"nichols\", \"plunged\", \"poorer\",\n    \"buffy\", \"educating\", \"employs\", \"tryin\", \"gasping\", \"ceramic\", \"depended\", \"coughing\", \"retrieve\", \"overhaul\", \"packaging\", \"wesley\", \"watts\", \"owning\", \"spectacle\", \"naomi\",\n    \"rouge\", \"syracuse\", \"drowning\", \"tunes\", \"erica\", \"alliances\", \"electrons\", \"freshmen\", \"securing\", \"suntimes\", \"starbucks\", \"creep\", \"subtitles\", \"cafeteria\", \"gunshot\", \"tiles\",\n    \"marking\", \"martial\", \"republics\", \"lasts\", \"reallife\", \"lilly\", \"meadow\", \"accuse\", \"dresser\", \"biting\", \"summoned\", \"cubic\", \"superstar\", \"elevation\", \"periodic\", \"durable\",\n    \"organism\", \"hilton\", \"rugged\", \"deeds\", \"gibbs\", \"apologies\", \"sunrise\", \"withdrew\", \"damon\", \"icons\", \"heartbeat\", \"filmmaker\", \"dividing\", \"vanity\", \"fleeing\", \"expresses\",\n    \"assign\", \"hairs\", \"examiner\", \"barber\", \"treaties\", \"mourning\", \"foreman\", \"pounded\", \"wrapping\", \"razor\", \"miners\", \"snapping\", \"stump\", \"augustine\", \"valve\", \"pumped\",\n    \"strap\", \"cellphone\", \"tails\", \"mediated\", \"buffer\", \"booming\", \"populated\", \"wholesale\", \"salvador\", \"detained\", \"rulers\", \"eliot\", \"coward\", \"arsenal\", \"colour\", \"portray\",\n    \"intends\", \"retailer\", \"renee\", \"underwent\", \"prophets\", \"undertake\", \"hopeless\", \"presumed\", \"willow\", \"slack\", \"induce\", \"brightest\", \"roller\", \"sparkling\", \"stella\", \"kurtz\",\n    \"prizes\", \"jessie\", \"captures\", \"capturing\", \"sneakers\", \"wakes\", \"dante\", \"discarded\", \"bookstore\", \"energetic\", \"addicted\", \"rocked\", \"prophecy\", \"banker\", \"ronnie\", \"currents\",\n    \"entertain\", \"tariffs\", \"clubhouse\", \"conrad\", \"bakery\", \"cognition\", \"excel\", \"headaches\", \"stroked\", \"yearly\", \"rattled\", \"compares\", \"chapman\", \"maurice\", \"crumpled\", \"ignores\",\n    \"swelling\", \"nokia\", \"vault\", \"resorts\", \"comey\", \"favour\", \"opted\", \"softball\", \"highend\", \"weiss\", \"takeover\", \"leaped\", \"choked\", \"crunch\", \"utilizing\", \"impacted\",\n    \"drying\", \"exams\", \"fairfax\", \"reservoir\", \"siege\", \"portal\", \"aquatic\", \"proposes\", \"roaring\", \"slippery\", \"traveler\", \"turnovers\", \"dementia\", \"snacks\", \"scottish\", \"contests\",\n    \"nolan\", \"canopy\", \"averages\", \"assemble\", \"harriet\", \"vargas\", \"reset\", \"prevail\", \"exempt\", \"jacques\", \"apartheid\", \"chandler\", \"legends\", \"weber\", \"relieve\", \"shuddered\",\n    \"contends\", \"vines\", \"goodman\", \"conductor\", \"chores\", \"evidenced\", \"sniffed\", \"chewed\", \"spilling\", \"uniquely\", \"embracing\", \"esther\", \"allergic\", \"pensions\", \"hauled\", \"sears\",\n    \"filmed\", \"newcomers\", \"remedies\", \"stain\", \"strand\", \"poultry\", \"reviewers\", \"steroids\", \"widened\", \"mandy\", \"logistic\", \"speeding\", \"shutting\", \"strapped\", \"anaheim\", \"shanghai\",\n    \"connects\", \"betrayal\", \"libby\", \"foley\", \"boycott\", \"maxwell\", \"brennan\", \"sailors\", \"liable\", \"cliffs\", \"melanie\", \"bella\", \"pretest\", \"defects\", \"thriving\", \"malaria\",\n    \"metabolic\", \"tester\", \"restoring\", \"oversees\", \"chaotic\", \"tighter\", \"mulder\", \"greatness\", \"seeming\", \"rubin\", \"doubted\", \"rivera\", \"reese\", \"arising\", \"benign\", \"debating\",\n    \"versatile\", \"haley\", \"stripes\", \"trailed\", \"peasant\", \"wouldbe\", \"immoral\", \"exploited\", \"smash\", \"cathy\", \"belts\", \"condemn\", \"exercised\", \"traps\", \"flowed\", \"graceful\",\n    \"stride\", \"vivian\", \"claudia\", \"levin\", \"treasures\", \"churchill\", \"emanuel\", \"dictate\", \"fallout\", \"devised\", \"faintly\", \"distorted\", \"emerson\", \"tents\", \"teasing\", \"isolates\",\n    \"needless\", \"stigma\", \"dragons\", \"aired\", \"planner\", \"dinosaurs\", \"congo\", \"clinging\", \"aerial\", \"suppress\", \"contested\", \"swirling\", \"bathing\", \"grind\", \"flicked\", \"malaysia\",\n    \"raining\", \"seventy\", \"puppet\", \"relaxing\", \"termed\", \"drawers\", \"savior\", \"tasty\", \"tasting\", \"seahawks\", \"fractures\", \"shovel\", \"oblivious\", \"violently\", \"subset\", \"richest\",\n    \"forge\", \"bonuses\", \"minded\", \"speculate\", \"hoover\", \"scans\", \"rushes\", \"newborn\", \"shelly\", \"peters\", \"shaved\", \"jules\", \"audition\", \"pulitzer\", \"trimmed\", \"baldwin\",\n    \"poisoning\", \"torch\", \"gardeners\", \"depicts\", \"stacks\", \"workouts\", \"cosmos\", \"lunden\", \"tesla\", \"lobster\", \"keller\", \"midway\", \"bounds\", \"wherein\", \"morton\", \"township\",\n    \"arrows\", \"pines\", \"zombies\", \"patiently\", \"doyle\", \"passions\", \"wardrobe\", \"lastly\", \"richie\", \"erupted\", \"consulate\", \"devote\", \"resembled\", \"knights\", \"sonic\", \"bidding\",\n    \"painfully\", \"eyelids\", \"ducked\", \"patriotic\", \"motivate\", \"elephants\", \"conquest\", \"thirsty\", \"claus\", \"barred\", \"eagerly\", \"labeling\", \"farewell\", \"parallels\", \"acoustic\", \"alarming\",\n    \"distract\", \"brendan\", \"pedro\", \"schumer\", \"illicit\", \"elena\", \"aspen\", \"recount\", \"payne\", \"dubious\", \"heavenly\", \"airplanes\", \"obliged\", \"enlisted\", \"madrid\", \"realise\",\n    \"abrams\", \"crafted\", \"contrasts\", \"armored\", \"secrecy\", \"leaps\", \"scandals\", \"tutoring\", \"glowed\", \"receipt\", \"pluralism\", \"spinal\", \"venice\", \"intellect\", \"token\", \"unveiled\",\n    \"probes\", \"forged\", \"chang\", \"growled\", \"schneider\", \"danish\", \"digest\", \"baskets\", \"chrome\", \"versa\", \"messiah\", \"outsider\", \"dolly\", \"scalp\", \"rubble\", \"brent\",\n    \"watergate\", \"moody\", \"sayin\", \"offender\", \"prohibit\", \"marxist\", \"episcopal\", \"layoffs\", \"financed\", \"warmed\", \"paige\", \"bingo\", \"ruler\", \"intricate\", \"conform\", \"guatemala\",\n    \"intensely\", \"energies\", \"roared\", \"locke\", \"wally\", \"spreads\", \"newport\", \"ethiopia\", \"styling\", \"shave\", \"cutter\", \"screws\", \"fooled\", \"sachs\", \"barton\", \"malone\",\n    \"breaths\", \"reacted\", \"disguise\", \"factions\", \"surgeons\", \"declares\", \"diplomat\", \"browned\", \"bricks\", \"benson\", \"appraisal\", \"preach\", \"nailed\", \"monty\", \"arrogance\", \"mutations\",\n    \"guinea\", \"resumed\", \"bleed\", \"butch\", \"shelby\", \"newark\", \"unlocked\", \"therapies\", \"switches\", \"leapt\", \"showers\", \"bedrooms\", \"verified\", \"seasoned\", \"clearance\", \"intrigued\",\n    \"levine\", \"sonya\", \"crushing\", \"moose\", \"dissolved\", \"meadows\", \"pauline\", \"shortstop\", \"geeks\", \"circling\", \"cellar\", \"persona\", \"clint\", \"hungary\", \"carey\", \"biases\",\n    \"allocated\", \"phony\", \"twenties\", \"removes\", \"buddhist\", \"wastes\", \"kabul\", \"pottery\", \"peasants\", \"charcoal\", \"cabinets\", \"famed\", \"arched\", \"trusting\", \"singled\", \"rejecting\",\n    \"deception\", \"yells\", \"predator\", \"shores\", \"nucleus\", \"fertile\", \"cramped\", \"panetta\", \"darcy\", \"rainy\", \"intuitive\", \"disagreed\", \"contender\", \"amazingly\", \"regrets\", \"rivalry\",\n    \"brink\", \"spear\", \"woodward\", \"magnet\", \"austria\", \"banning\", \"endurance\", \"licked\", \"volcano\", \"granting\", \"feather\", \"asians\", \"analogous\", \"clockwise\", \"frowning\", \"validated\",\n    \"sprang\", \"precinct\", \"knocks\", \"tailored\", \"sensing\", \"uprising\", \"strauss\", \"endowment\", \"recorder\", \"rotating\", \"pleading\", \"beatrice\", \"motioned\", \"garner\", \"maritime\", \"devils\",\n    \"winked\", \"stacy\", \"ninety\", \"sophia\", \"chilling\", \"bothers\", \"remedial\", \"halftime\", \"grunted\", \"spins\", \"roberta\", \"pundits\", \"tumbled\", \"celtics\", \"apostles\", \"cruising\",\n    \"retirees\", \"reversal\", \"bolts\", \"sailed\", \"scrub\", \"rodgers\", \"kristen\", \"dayton\", \"directs\", \"judaism\", \"sketches\", \"airborne\", \"villa\", \"schieffer\", \"jarriel\", \"whitman\",\n    \"cocacola\", \"forgiven\", \"bruno\", \"cubes\", \"grouped\", \"renal\", \"corey\", \"dominican\", \"discard\", \"shitty\", \"benedict\", \"prompting\", \"johnston\", \"atlas\", \"paralyzed\", \"condo\",\n    \"knots\", \"defence\", \"shortages\", \"blender\", \"baron\", \"councils\", \"unite\", \"caleb\", \"striped\", \"symposium\", \"psycho\", \"simulated\", \"intently\", \"corpus\", \"irritated\", \"sandals\",\n    \"pharmacy\", \"creditors\", \"coyote\", \"bounty\", \"goats\", \"issuing\", \"dinosaur\", \"barrett\", \"latent\", \"guild\", \"isolate\", \"routines\", \"poorest\", \"thumbs\", \"carlton\", \"prosecute\",\n    \"receptor\", \"patron\", \"graphs\", \"joked\", \"discounts\", \"flipping\", \"spurs\", \"sipping\", \"multitude\", \"colon\", \"hunted\", \"exceeds\", \"downturn\", \"steals\", \"youthful\", \"dividends\",\n    \"panicked\", \"brushes\", \"molecule\", \"smelling\", \"plight\", \"retreated\", \"walton\", \"applicant\", \"booze\", \"specimen\", \"plunge\", \"drainage\", \"hannity\", \"quebec\", \"bumped\", \"intern\",\n    \"grinding\", \"janice\", \"specially\", \"humane\", \"augusta\", \"maureen\", \"plato\", \"doctrines\", \"litter\", \"forecasts\", \"flatow\", \"randolph\", \"metallic\", \"marin\", \"compass\", \"avery\",\n    \"blurred\", \"pathogens\", \"surfing\", \"resonance\", \"narrowly\", \"delia\", \"scouting\", \"pinched\", \"depicting\", \"bumper\", \"narration\", \"matchup\", \"emory\", \"straps\", \"posterior\", \"frogs\",\n    \"outset\", \"granny\", \"copied\", \"emptied\", \"perkins\", \"disrupt\", \"ledge\", \"manuel\", \"squeezing\", \"alpine\", \"oilers\", \"hitters\", \"wales\", \"confuse\", \"stationed\", \"inmate\",\n    \"wolfe\", \"chilly\", \"doubling\", \"bourne\", \"morale\", \"amsterdam\", \"sherry\", \"entails\", \"chatter\", \"consulted\", \"bourgeois\", \"grande\", \"fetus\", \"shrine\", \"asphalt\", \"gazette\",\n    \"costing\", \"candidacy\", \"rainfall\", \"analytics\", \"voiced\", \"downside\", \"brussels\", \"brigade\", \"monuments\", \"shortz\", \"napoleon\", \"paved\", \"condoms\", \"pluto\", \"stunt\", \"carrot\",\n    \"shaky\", \"sleeps\", \"fences\", \"specter\", \"thriller\", \"pedal\", \"stuffing\", \"metrics\", \"analytic\", \"carmen\", \"squat\", \"reactors\", \"catalogue\", \"tractor\", \"deprived\", \"cronbach\",\n    \"chuckling\", \"olson\", \"ensures\", \"fletcher\", \"smoky\", \"flourish\", \"caves\", \"reasoned\", \"skeptics\", \"monsieur\", \"gripping\", \"sixties\", \"minors\", \"supplier\", \"intuition\", \"skipped\",\n    \"boiled\", \"disputed\", \"marlins\", \"worldview\", \"withdrawn\", \"steaming\", \"bedside\", \"spectator\", \"fabrics\", \"scripts\", \"letterman\", \"doris\", \"plump\", \"scrape\", \"mechanic\", \"oneyear\",\n    \"registry\", \"dishonest\", \"maneuver\", \"bunker\", \"attendees\", \"phillies\", \"commute\", \"outlines\", \"clasped\", \"floods\", \"volcanic\", \"rampant\", \"sinatra\", \"simplest\", \"benchmark\", \"gourmet\",\n    \"serena\", \"rafael\", \"rochester\", \"fostering\", \"winters\", \"escaping\", \"coercion\", \"props\", \"awakened\", \"crumbs\", \"gotcha\", \"stylish\", \"edison\", \"courtney\", \"libyan\", \"prepares\",\n    \"catalyst\", \"cartoons\", \"mantle\", \"empowered\", \"wheeler\", \"portugal\", \"finland\", \"daley\", \"hawkins\", \"detainees\", \"greasy\", \"tanner\", \"blindness\", \"posing\", \"vengeance\", \"brook\",\n    \"topping\", \"hugging\", \"scissors\", \"ballpark\", \"environ\", \"stint\", \"healed\", \"caucasian\", \"preceded\", \"guarded\", \"wartime\", \"glaring\", \"extremist\", \"reckon\", \"milosevic\", \"modernist\",\n    \"forbid\", \"pleasures\", \"stevie\", \"reviewer\", \"highland\", \"rhythms\", \"overlook\", \"plead\", \"stroll\", \"podium\", \"oysters\", \"balances\", \"billie\", \"twists\", \"lesions\", \"editions\",\n    \"highrisk\", \"plucked\", \"rallies\", \"applaud\", \"onetime\", \"unrest\", \"replicate\", \"wills\", \"extremes\", \"larvae\", \"fortunes\", \"joanna\", \"sasha\", \"radius\", \"staggered\", \"packet\",\n    \"morals\", \"lenny\", \"allergies\", \"humidity\", \"freaked\", \"cruelty\", \"clare\", \"marge\", \"pertinent\", \"grasped\", \"plaster\", \"clumsy\", \"festivals\", \"hammond\", \"cured\", \"tammy\",\n    \"runoff\", \"glossy\", \"stumbling\", \"marshal\", \"methane\", \"facto\", \"agendas\", \"allan\", \"imitation\", \"canoe\", \"sloan\", \"cruiser\", \"greeks\", \"coarse\", \"buzzing\", \"linkedin\",\n    \"platter\", \"broadband\", \"impending\", \"lowcost\", \"lingered\", \"forearm\", \"disgusted\", \"kneeling\", \"mythology\", \"mikey\", \"porcelain\", \"nuggets\", \"seminary\", \"slamming\", \"blasted\", \"suicidal\",\n    \"flats\", \"detector\", \"fellows\", \"crest\", \"clueless\", \"alarmed\", \"invent\", \"erase\", \"ripping\", \"oversee\", \"pours\", \"norwegian\", \"tattoos\", \"pudding\", \"echoing\", \"stressors\",\n    \"chilled\", \"implying\", \"cookbook\", \"spelled\", \"hateful\", \"sherr\", \"trembled\", \"borrowers\", \"cohesion\", \"buffet\", \"desserts\", \"haircut\", \"attained\", \"marketers\", \"pasture\", \"pasadena\",\n    \"lesbians\", \"disparity\", \"ottoman\", \"salem\", \"vacations\", \"jewel\", \"remnants\", \"flora\", \"dickens\", \"lineage\", \"traction\", \"trench\", \"modules\", \"mildly\", \"signaled\", \"recess\",\n    \"chatting\", \"gracious\", \"jeanne\", \"captive\", \"withstand\", \"lucinda\", \"paces\", \"richness\", \"fragment\", \"blaze\", \"flickered\", \"scarlet\", \"anglers\", \"browse\", \"fargo\", \"noses\",\n    \"woodlands\", \"creeping\", \"bruised\", \"playful\", \"childish\", \"choke\", \"danielle\", \"directive\", \"reside\", \"rails\", \"teased\", \"bedtime\", \"blooms\", \"seminars\", \"customary\", \"blackness\",\n    \"vicki\", \"scalia\", \"wraps\", \"gears\", \"scenic\", \"conceive\", \"battalion\", \"pancakes\", \"johnnie\", \"logically\", \"darren\", \"royals\", \"pacing\", \"scares\", \"checklist\", \"donkey\",\n    \"traitor\", \"hillside\", \"downright\", \"feinstein\", \"croatia\", \"staples\", \"spared\", \"taxed\", \"scenery\", \"hairy\", \"corridors\", \"listener\", \"shines\", \"poisoned\", \"marta\", \"skins\",\n    \"thornton\", \"announces\", \"gramm\", \"messaging\", \"rhythmic\", \"punches\", \"spears\", \"artery\", \"mallory\", \"crowley\", \"surfaced\", \"singh\", \"enclosed\", \"antitrust\", \"mailing\", \"monks\",\n    \"celestial\", \"screened\", \"decidedly\", \"darryl\", \"crystals\", \"hopped\", \"sidewalks\", \"halfhour\", \"tenant\", \"awkwardly\", \"equitable\", \"strides\", \"improper\", \"covert\", \"wisely\", \"notation\",\n    \"reacting\", \"gardener\", \"coughed\", \"roland\", \"aided\", \"clapped\", \"swaying\", \"scraped\", \"statistic\", \"smokers\", \"newsroom\", \"barked\", \"variant\", \"triggers\", \"highs\", \"placebo\",\n    \"slippers\", \"gerry\", \"blatant\", \"starfleet\", \"enact\", \"wouldnt\", \"blitzer\", \"stranded\", \"viability\", \"harvested\", \"borne\", \"andersen\", \"jamaica\", \"longevity\", \"warrants\", \"pinky\",\n    \"recalling\", \"enforcing\", \"bananas\", \"stalled\", \"mystical\", \"shrubs\", \"graphite\", \"preston\", \"spheres\", \"billboard\", \"disturb\", \"splitting\", \"sampled\", \"crumbling\", \"wellness\", \"serbian\",\n    \"browsing\", \"retaining\", \"afforded\", \"donovan\", \"amelia\", \"statues\", \"theodore\", \"squirrel\", \"fridays\", \"abigail\", \"outfits\", \"debra\", \"boone\", \"persisted\", \"routledge\", \"subgroups\",\n    \"roofs\", \"robes\", \"brows\", \"barcelona\", \"chops\", \"screwing\", \"forefront\", \"bengals\", \"casinos\", \"align\", \"thugs\", \"discern\", \"juicy\", \"overt\", \"presume\", \"disparate\",\n    \"ancestral\", \"openings\", \"decree\", \"leaking\", \"awakening\", \"titanic\", \"derrick\", \"brokerage\", \"dreadful\", \"acclaimed\", \"breadth\", \"thinner\", \"recurring\", \"exert\", \"mariners\", \"sneaking\",\n    \"bliss\", \"hikes\", \"reformers\", \"highlands\", \"dispatch\", \"pristine\", \"arbor\", \"dividend\", \"bauer\", \"rabbits\", \"dwell\", \"astronaut\", \"coherence\", \"barefoot\", \"haitian\", \"moriarty\",\n    \"circuits\", \"spices\", \"mccoy\", \"resolving\", \"olives\", \"staging\", \"mediocre\", \"cassie\", \"giggled\", \"conquer\", \"operative\", \"outdated\", \"salads\", \"boredom\", \"artie\", \"rattle\",\n    \"subsidy\", \"blossoms\", \"softer\", \"spells\", \"tumbling\", \"bracket\", \"ahmed\", \"appoint\", \"penguin\", \"shear\", \"lender\", \"marissa\", \"chalk\", \"sheldon\", \"goodnight\", \"tentative\",\n    \"thematic\", \"comprise\", \"mixer\", \"shuffled\", \"veggies\", \"legion\", \"clicks\", \"everett\", \"shiver\", \"gabrielle\", \"nietzsche\", \"watershed\", \"plagued\", \"concede\", \"reconcile\", \"deduction\",\n    \"cannabis\", \"striving\", \"flakes\", \"riverside\", \"locking\", \"fashioned\", \"mitigate\", \"bends\", \"arsenic\", \"enzymes\", \"clintons\", \"theresa\", \"growling\", \"vanguard\", \"herbal\", \"imperfect\",\n    \"warden\", \"emptiness\", \"arousal\", \"unfolding\", \"pleasing\", \"jeremiah\", \"launches\", \"magician\", \"stephens\", \"laborers\", \"curiously\", \"rejects\", \"intraday\", \"geared\", \"sprawled\", \"pence\",\n    \"sticker\", \"sarge\", \"divergent\", \"wrinkles\", \"tosses\", \"rattling\", \"tipping\", \"solemn\", \"activate\", \"menus\", \"purdue\", \"scraping\", \"stale\", \"roadside\", \"jointly\", \"acrylic\",\n    \"plumbing\", \"endlessly\", \"navajo\", \"ticking\", \"mates\", \"grouping\", \"innate\", \"buddha\", \"winced\", \"spaghetti\", \"cushion\", \"gallup\", \"chuckle\", \"opposes\", \"bruises\", \"broadwell\",\n    \"clemens\", \"fragrant\", \"expansive\", \"stabilize\", \"dashed\", \"yorkers\", \"policing\", \"whistling\", \"sorting\", \"royalty\", \"dataset\", \"muted\", \"lowell\", \"renew\", \"liner\", \"revive\",\n    \"hackers\", \"ached\", \"hating\", \"flicker\", \"meltdown\", \"choral\", \"notify\", \"sideline\", \"padded\", \"fiduciary\", \"billing\", \"conveyed\", \"norris\", \"gloom\", \"slots\", \"backstage\",\n    \"tighten\", \"scarcity\", \"reeves\", \"listings\", \"cheered\", \"sarajevo\", \"durham\", \"sized\", \"residency\", \"furiously\", \"balloons\", \"midtown\", \"naughty\", \"stainless\", \"pathology\", \"darted\",\n    \"possesses\", \"avenues\", \"serbia\", \"peyton\", \"hicks\", \"fearing\", \"lineman\", \"rutgers\", \"laptops\", \"summed\", \"cancelled\", \"crackdown\", \"smoothed\", \"watkins\", \"welch\", \"filtered\",\n    \"halted\", \"antibody\", \"moderator\", \"thinkin\", \"juices\", \"pierced\", \"penelope\", \"penetrate\", \"sanity\", \"chester\", \"hides\", \"fossils\", \"martian\", \"variants\", \"scraps\", \"breakup\",\n    \"ponytail\", \"amenities\", \"needy\", \"greenspan\", \"conceal\", \"anterior\", \"flattened\", \"diapers\", \"helena\", \"textile\", \"additions\", \"typed\", \"firefox\", \"bigotry\", \"recurrent\", \"deter\",\n    \"stature\", \"ribbons\", \"vinyl\", \"frazier\", \"bridget\", \"vapor\", \"conceded\", \"keeper\", \"reich\", \"virgil\", \"hurdles\", \"grasses\", \"wipes\", \"divisive\", \"reprinted\", \"therein\",\n    \"defect\", \"sirens\", \"whine\", \"coating\", \"casts\", \"stains\", \"enhances\", \"runaway\", \"lowers\", \"archie\", \"receptive\", \"dropout\", \"correlate\", \"gavin\", \"cocoa\", \"undergone\",\n    \"bolivia\", \"storing\", \"plateau\", \"heroine\", \"emergent\", \"citations\", \"almonds\", \"willingly\", \"outspoken\", \"distrust\", \"damascus\", \"undecided\", \"cosmetic\", \"provoked\", \"modernism\", \"exploding\",\n    \"aspiring\", \"analog\", \"refund\", \"rican\", \"hugely\", \"scifi\", \"cooled\", \"wheeled\", \"orchard\", \"sands\", \"excerpts\", \"galveston\", \"objected\", \"heres\", \"madeleine\", \"leaping\",\n    \"partition\", \"macro\", \"hayden\", \"chanting\", \"dynasty\", \"thursdays\", \"derives\", \"brutality\", \"racially\", \"vansant\", \"ariel\", \"gladly\", \"sinks\", \"kickoff\", \"plaque\", \"urges\",\n    \"anchored\", \"sidelines\", \"dialog\", \"edged\", \"hybrids\", \"longed\", \"endeavors\", \"detached\", \"aching\", \"moons\", \"pratt\", \"hardship\", \"betray\", \"tribunal\", \"enriched\", \"rents\",\n    \"optics\", \"straining\", \"airways\", \"staffing\", \"gravy\", \"copying\", \"nurturing\", \"portrayal\", \"startups\", \"saudis\", \"psyche\", \"spying\", \"brewers\", \"discovers\", \"foucault\", \"farmhouse\",\n    \"slated\", \"gould\", \"duluth\", \"header\", \"alleviate\", \"peeling\", \"bladder\", \"silva\", \"raids\", \"robotic\", \"tongues\", \"cantor\", \"makeshift\", \"unanimous\", \"allergy\", \"tease\",\n    \"whipping\", \"notch\", \"salty\", \"manually\", \"unjust\", \"populist\", \"expands\", \"stung\", \"repeats\", \"kitchens\", \"boarded\", \"bathtub\", \"merge\", \"spielberg\", \"bland\", \"evacuated\",\n    \"earns\", \"affinity\", \"separates\", \"weaken\", \"trayvon\", \"oversized\", \"regimen\", \"coated\", \"fragrance\", \"rapids\", \"canadians\", \"bangs\", \"upgrades\", \"thirties\", \"pastors\", \"invade\",\n    \"morocco\", \"mortar\", \"benches\", \"revisions\", \"pelley\", \"reyes\", \"trainers\", \"ascii\", \"stalking\", \"expired\", \"oneway\", \"swayed\", \"milan\", \"rotting\", \"abrupt\", \"embryos\",\n    \"suites\", \"freestyle\", \"ballroom\", \"plainly\", \"satire\", \"apparel\", \"banged\", \"aerobic\", \"goodwill\", \"ruining\", \"depiction\", \"howling\", \"pinterest\", \"spies\", \"barren\", \"algeria\",\n    \"racks\", \"slung\", \"warranted\", \"crank\", \"bethesda\", \"prompts\", \"archival\", \"impetus\", \"valleys\", \"nausea\", \"expelled\", \"texting\", \"hazel\", \"formative\", \"guitarist\", \"rotate\",\n    \"sadie\", \"cyclists\", \"soften\", \"crackers\", \"perch\", \"celia\", \"folklore\", \"descend\", \"grading\", \"convict\", \"flips\", \"logistics\", \"unlock\", \"tracing\", \"treason\", \"fluids\",\n    \"maura\", \"digits\", \"creed\", \"precincts\", \"famine\", \"algae\", \"hardened\", \"overthrow\", \"meats\", \"decoding\", \"santiago\", \"dispersed\", \"offend\", \"fronts\", \"haunting\", \"suffice\",\n    \"clipped\", \"packaged\", \"implant\", \"trustee\", \"scramble\", \"grins\", \"fisherman\", \"trusts\", \"bates\", \"stylist\", \"converts\", \"submarine\", \"detecting\", \"drafting\", \"ruthless\", \"valuation\",\n    \"careless\", \"aerospace\", \"fungi\", \"elicit\", \"mailed\", \"greenberg\", \"grieving\", \"rosen\", \"superhero\", \"francesca\", \"spurred\", \"transmit\", \"alexis\", \"quitting\", \"malls\", \"doubtful\",\n    \"dawkins\", \"warranty\", \"humorous\", \"amazement\", \"mateo\", \"residuals\", \"hadley\", \"markedly\", \"ponder\", \"selves\", \"doorbell\", \"stamped\", \"deposited\", \"expletive\", \"crammed\", \"cambodia\",\n    \"cursing\", \"windy\", \"quartet\", \"crate\", \"attracts\", \"evils\", \"mosquito\", \"shuts\", \"showdown\", \"nicer\", \"trolls\", \"rebuilt\", \"punitive\", \"counters\", \"expanse\", \"affirmed\",\n    \"lords\", \"altering\", \"ensembles\", \"robbins\", \"wreckage\", \"provoke\", \"remake\", \"punching\", \"glaze\", \"couldnt\", \"entirety\", \"coroner\", \"footing\", \"violates\", \"slump\", \"burnett\",\n    \"dismissal\", \"creations\", \"soaking\", \"subpoena\", \"mileage\", \"twotime\", \"fares\", \"bolted\", \"parasites\", \"anguish\", \"pausing\", \"diners\", \"crusade\", \"hacked\", \"watering\", \"hailed\",\n    \"necks\", \"spoil\", \"numbered\", \"aquinas\", \"delegate\", \"fascist\", \"colder\", \"federally\", \"manure\", \"lexington\", \"daschle\", \"cervical\", \"detectors\", \"vitality\", \"lever\", \"tangle\",\n    \"clout\", \"policemen\", \"satin\", \"shady\", \"caregiver\", \"mimic\", \"aquarium\", \"giggling\", \"calves\", \"thicker\", \"rallied\", \"leftover\", \"pressured\", \"sununu\", \"continual\", \"spacious\",\n    \"allowance\", \"unborn\", \"hideous\", \"referrals\", \"commuter\", \"muster\", \"gregg\", \"alphabet\", \"symbolism\", \"scaling\", \"imbalance\", \"cultivate\", \"skier\", \"reins\", \"flapping\", \"shale\",\n    \"earthly\", \"profanity\", \"linger\", \"seizure\", \"mormons\", \"dolan\", \"unfolded\", \"dealings\", \"diversion\", \"flowering\", \"corpses\", \"lyons\", \"cartel\", \"photoshop\", \"pineapple\", \"overheard\",\n    \"stillness\", \"coworkers\", \"wilder\", \"nicaragua\", \"cleansing\", \"resisting\", \"muttering\", \"sheen\", \"scooped\", \"auntie\", \"ransom\", \"artifact\", \"desks\", \"whichever\", \"vitro\", \"prevailed\",\n    \"lillian\", \"collects\", \"blueprint\", \"payoff\", \"mailbox\", \"detailing\", \"visionary\", \"cutler\", \"mocking\", \"bitterly\", \"ensuing\", \"scoffs\", \"textiles\", \"stringent\", \"disks\", \"handgun\",\n    \"anecdotal\", \"havoc\", \"embarrass\", \"sunscreen\", \"airlock\", \"paperback\", \"bearded\", \"reactive\", \"affidavit\", \"outskirts\", \"sighted\", \"eldest\", \"squinting\", \"forgiving\", \"ashcroft\", \"receipts\",\n    \"transient\", \"luxurious\", \"romania\", \"murdering\", \"starred\", \"erased\", \"perks\", \"fannie\", \"amish\", \"flagship\", \"sixteenth\", \"curling\", \"rigged\", \"validate\", \"liturgy\", \"taxing\",\n    \"kissinger\", \"powerless\", \"prudent\", \"upgraded\", \"backers\", \"shadowy\", \"evergreen\", \"motif\", \"pollen\", \"linkage\", \"fluttered\", \"carve\", \"skate\", \"hauling\", \"uttered\", \"thyroid\",\n    \"gaunt\", \"hemingway\", \"fifties\", \"repay\", \"stairwell\", \"staffer\", \"groan\", \"regiment\", \"familial\", \"nearer\", \"quirky\", \"gaping\", \"logged\", \"geometric\", \"lithuania\", \"revived\",\n    \"appalled\", \"xavier\", \"della\", \"printers\", \"riches\", \"homeowner\", \"spectral\", \"exceeding\", \"harmed\", \"blinding\", \"fallacy\", \"spiders\", \"hearty\", \"cohorts\", \"idiotic\", \"airway\",\n    \"carbo\", \"diagnoses\", \"slows\", \"didnt\", \"competed\", \"fleeting\", \"defiance\", \"browsers\", \"prohibits\", \"attrition\", \"powdered\", \"sighing\", \"rosenberg\", \"denounced\", \"tripped\", \"railway\",\n    \"faction\", \"murmur\", \"moderates\", \"stylistic\", \"subtest\", \"fished\", \"informing\", \"shampoo\", \"carbs\", \"murdoch\", \"dismay\", \"updating\", \"dilemmas\", \"cocktails\", \"collusion\", \"leonardo\",\n    \"formulate\", \"flirting\", \"retains\", \"repaired\", \"bathrooms\", \"flank\", \"golfers\", \"dictated\", \"donny\", \"rinsed\", \"scorer\", \"agitated\", \"tulsa\", \"starling\", \"pillars\", \"islamists\",\n    \"franken\", \"lawful\", \"landfill\", \"galactic\", \"secession\", \"mastered\", \"cerebral\", \"construed\", \"footprint\", \"likert\", \"timeless\", \"chung\", \"hesitant\", \"tuesdays\", \"delhi\", \"radiant\",\n    \"surreal\", \"clauses\", \"ponds\", \"stalks\", \"gamers\", \"reliably\", \"annabelle\", \"upstream\", \"exemplary\", \"conquered\", \"carts\", \"shoving\", \"thirst\", \"punishing\", \"motifs\", \"liars\",\n    \"brisk\", \"marketed\", \"severed\", \"furnished\", \"gendered\", \"escorted\", \"sinners\", \"formulas\", \"drills\", \"summarize\", \"estates\", \"affirm\", \"strolled\", \"opaque\", \"clocks\", \"pecans\",\n    \"phelps\", \"amidst\", \"strung\", \"guardians\", \"abdomen\", \"barnett\", \"devoid\", \"alamo\", \"abdullah\", \"humanist\", \"boast\", \"cutline\", \"arranging\", \"tutorial\", \"avengers\", \"chiles\",\n    \"bullied\", \"diaspora\", \"canton\", \"bathed\", \"morgue\", \"cuffs\", \"obscene\", \"puzzles\", \"scarred\", \"trickle\", \"groove\", \"deserving\", \"fungal\", \"pinpoint\", \"theyve\", \"petals\",\n    \"fined\", \"plurality\", \"critiques\", \"faults\", \"breeds\", \"buckle\", \"obligated\", \"spitting\", \"fostered\", \"ancestry\", \"extras\", \"pillar\", \"settles\", \"cercla\", \"weekdays\", \"hacker\",\n    \"platinum\", \"yielding\", \"gesturing\", \"fastball\", \"fixes\", \"malicious\", \"jerks\", \"bottled\", \"quotas\", \"quotation\", \"taiwanese\", \"mickelson\", \"nestled\", \"buzzed\", \"petitions\", \"asteroids\",\n    \"decency\", \"pronounce\", \"gradient\", \"pantry\", \"billed\", \"favre\", \"resides\", \"wording\", \"blossom\", \"decor\", \"nielsen\", \"milestone\", \"kendall\", \"flare\", \"beeping\", \"audible\",\n    \"mayer\", \"relish\", \"candid\", \"poignant\", \"narcotics\", \"loops\", \"unfairly\", \"edith\", \"dazed\", \"carville\", \"ritter\", \"seeded\", \"vocals\", \"canonical\", \"lurking\", \"blinded\",\n    \"syntax\", \"impulses\", \"harassed\", \"absentee\", \"sectarian\", \"vibration\", \"chimney\", \"brock\", \"helmets\", \"murderers\", \"renting\", \"colonists\", \"linkages\", \"coyotes\", \"thrilling\", \"blinds\",\n    \"glamour\", \"busch\", \"surrogate\", \"arteries\", \"auditors\", \"filings\", \"plugin\", \"lawns\", \"norcross\", \"tattered\", \"easing\", \"combo\", \"patronage\", \"wallpaper\", \"edible\", \"hammered\",\n    \"flared\", \"faulty\", \"dickinson\", \"clashes\", \"moaned\", \"residue\", \"eliza\", \"falsely\", \"depletion\", \"cinemark\", \"cecilia\", \"ryder\", \"haters\", \"littered\", \"grady\", \"visibly\",\n    \"suspend\", \"replaces\", \"tabloid\", \"obscured\", \"toddlers\", \"gallagher\", \"scowled\", \"sharpton\", \"occupying\", \"densities\", \"ancestor\", \"annoyance\", \"thatcher\", \"coarsely\", \"immensely\", \"spawned\",\n    \"coupling\", \"succeeds\", \"steaks\", \"scanner\", \"receptors\", \"renders\", \"jesuit\", \"twoway\", \"supremacy\", \"quantify\", \"ventured\", \"registers\", \"remorse\", \"vested\", \"debacle\", \"surgeries\",\n    \"shameful\", \"vicinity\", \"catering\", \"fixation\", \"snowy\", \"roasting\", \"schultz\", \"blindly\", \"offline\", \"widening\", \"morons\", \"graveyard\", \"fractured\", \"cling\", \"monstrous\", \"salvage\",\n    \"karzai\", \"saunders\", \"threeday\", \"synagogue\", \"smear\", \"withheld\", \"upwards\", \"motorists\", \"parody\", \"upstate\", \"fennel\", \"reformed\", \"yates\", \"avoids\", \"engages\", \"depart\",\n    \"preached\", \"magically\", \"sakes\", \"ballistic\", \"midday\", \"conducive\", \"fairway\", \"yearold\", \"footnotes\", \"sorted\", \"bandwidth\", \"twostory\", \"promoter\", \"swirled\", \"thump\", \"smartest\",\n    \"ambient\", \"boutique\", \"greetings\", \"whistled\", \"spans\", \"compose\", \"diaries\", \"treasurer\", \"divinity\", \"disrupted\", \"carly\", \"masked\", \"muller\", \"populace\", \"disagrees\", \"accessing\",\n    \"grips\", \"whack\", \"lashes\", \"resilient\", \"disguised\", \"barracks\", \"midterm\", \"hustle\", \"ortiz\", \"jamal\", \"stoop\", \"prized\", \"periphery\", \"endemic\", \"summon\", \"bachmann\",\n    \"informs\", \"marriott\", \"stickers\", \"liaison\", \"cheapest\", \"lunches\", \"brutally\", \"sterile\", \"drafts\", \"imagines\", \"alienated\", \"classify\", \"winfrey\", \"blames\", \"mixes\", \"dreaded\",\n    \"docks\", \"carcinoma\", \"whirled\", \"furnace\", \"heath\", \"pests\", \"ambush\", \"expressly\", \"grimaced\", \"rubric\", \"addictive\", \"bottoms\", \"regretted\", \"plugged\", \"menopause\", \"macarthur\",\n    \"lurched\", \"ethos\", \"denim\", \"herein\", \"comprises\", \"rustic\", \"keyword\", \"turbines\", \"interplay\", \"facade\", \"watery\", \"optimum\", \"paranoia\", \"scant\", \"reliever\", \"happiest\",\n    \"coupons\", \"shaving\", \"eyeing\", \"crippled\", \"phoned\", \"handmade\", \"piedmont\", \"plotting\", \"sails\", \"emerald\", \"streaks\", \"wiley\", \"attentive\", \"revise\", \"unarmed\", \"diarrhea\",\n    \"caste\", \"lighten\", \"buckets\", \"resent\", \"winery\", \"risking\", \"tally\", \"margarine\", \"hungarian\", \"italians\", \"riggs\", \"mashable\", \"amounted\", \"dryer\", \"unmarried\", \"predatory\",\n    \"trendy\", \"acquitted\", \"trillions\", \"deference\", \"hesitates\", \"hydraulic\", \"parishes\", \"glued\", \"darkest\", \"peaked\", \"ensign\", \"bitten\", \"makeover\", \"marrow\", \"regan\", \"renovated\",\n    \"albright\", \"dichotomy\", \"shooters\", \"paulo\", \"steamed\", \"briefed\", \"reassure\", \"recounts\", \"peril\", \"memoirs\", \"supplying\", \"pageant\", \"seasoning\", \"cloning\", \"coveted\", \"alarms\",\n    \"rooting\", \"jailed\", \"boise\", \"muffin\", \"plaid\", \"forestry\", \"poisonous\", \"comrades\", \"sprouts\", \"diffuse\", \"boulders\", \"leveled\", \"visas\", \"prolific\", \"anomaly\", \"workings\",\n    \"eclectic\", \"postponed\", \"blending\", \"hitchcock\", \"elegance\", \"starve\", \"entrees\", \"irons\", \"smeared\", \"hallmark\", \"bullies\", \"dismal\", \"twitched\", \"mindful\", \"dominates\", \"clerks\",\n    \"uniformed\", \"deferred\", \"hardcore\", \"unleashed\", \"limestone\", \"beamed\", \"floats\", \"fooling\", \"contours\", \"sponge\", \"englewood\", \"sandusky\", \"destroys\", \"pricey\", \"tedious\", \"countered\",\n    \"margot\", \"folders\", \"router\", \"ranchers\", \"shuffling\", \"paradigms\", \"scaring\", \"newcomer\", \"ensured\", \"primer\", \"explodes\", \"handicap\", \"truthful\", \"villains\", \"mobilize\", \"logos\",\n    \"seventies\", \"composers\", \"mapped\", \"treadmill\", \"tagged\", \"mayors\", \"shipment\", \"kristol\", \"strewn\", \"doctorate\", \"onehalf\", \"alameda\", \"standoff\", \"ellison\", \"bandar\", \"reminders\",\n    \"homestead\", \"tackling\", \"coverup\", \"bryce\", \"snuck\", \"concedes\", \"shoreline\", \"barring\", \"bosch\", \"whoohoo\", \"seekers\", \"highness\", \"regents\", \"reefs\", \"moines\", \"stiffened\",\n    \"uncles\", \"esteem\", \"goldstein\", \"slaps\", \"standings\", \"tugging\", \"grumbled\", \"rooftop\", \"hurrying\", \"seizures\", \"clustered\", \"ridges\", \"attackers\", \"heaved\", \"geese\", \"clutter\",\n    \"dearly\", \"encompass\", \"trumpet\", \"seminal\", \"symmetry\", \"prescribe\", \"taxonomy\", \"enactment\", \"hikers\", \"cherished\", \"realms\", \"ashore\", \"exhaled\", \"inherit\", \"broaden\", \"dipping\",\n    \"baths\", \"dictates\", \"hushed\", \"crumbled\", \"socket\", \"blasting\", \"lured\", \"commenter\", \"garland\", \"shanahan\", \"authorize\", \"aunts\", \"coloring\", \"cupboard\", \"steered\", \"liberated\",\n    \"columbine\", \"gameplay\", \"yearning\", \"lends\", \"commotion\", \"hinted\", \"dogma\", \"humankind\", \"sharia\", \"refine\", \"stockings\", \"plentiful\", \"defeating\", \"cabins\", \"bulky\", \"surged\",\n    \"clamped\", \"cosmetics\", \"grasping\", \"cinematic\", \"dashboard\", \"boosting\", \"plank\", \"distal\", \"farmland\", \"extremism\", \"portrays\", \"vouchers\", \"susteren\", \"overturn\", \"tweeting\", \"hires\",\n    \"gloved\", \"woodstock\", \"deported\", \"standup\", \"fidel\", \"intrusion\", \"benin\", \"specs\", \"override\", \"bashing\", \"macdonald\", \"accents\", \"gordy\", \"rodham\", \"immersed\", \"swelled\",\n    \"disposed\", \"landings\", \"cavaliers\", \"parting\", \"realist\", \"nests\", \"countdown\", \"upsetting\", \"sarcastic\", \"boosted\", \"greenwood\", \"rites\", \"marash\", \"schema\", \"corrosion\", \"battled\",\n    \"knowingly\", \"orphan\", \"antenna\", \"chord\", \"lyric\", \"sprayed\", \"strait\", \"loopholes\", \"helms\", \"bulging\", \"beetles\", \"malware\", \"favoring\", \"composing\", \"filtering\", \"unused\",\n    \"banquet\", \"guarding\", \"congrats\", \"wikileaks\", \"supernova\", \"tunisia\", \"unsalted\", \"sinus\", \"gleamed\", \"stocked\", \"dumpster\", \"avocado\", \"login\", \"laced\", \"abducted\", \"specials\",\n    \"extant\", \"puree\", \"whistles\", \"convoy\", \"sparse\", \"vividly\", \"standout\", \"offending\", \"cutoff\", \"postcard\", \"ebooks\", \"unnamed\", \"moods\", \"worldly\", \"coercive\", \"pandemic\",\n    \"illusions\", \"booths\", \"decorate\", \"alyssa\", \"seedlings\", \"knotted\", \"cushions\", \"webshots\", \"scaled\", \"flurry\", \"chant\", \"blurted\", \"divides\", \"gridlock\", \"profiling\", \"platoon\",\n    \"monarchy\", \"alleging\", \"publishes\", \"fastened\", \"literate\", \"tending\", \"shards\", \"preserves\", \"vitti\", \"cages\", \"clears\", \"audiotape\", \"streaked\", \"hissing\", \"atkins\", \"buddhism\",\n    \"playhouse\", \"caucuses\", \"schadler\", \"intercept\", \"shocks\", \"utopian\", \"squarely\", \"stevenson\", \"packets\", \"lesion\", \"replay\", \"squatted\", \"nuclei\", \"tibet\", \"depleted\", \"stalls\",\n    \"silas\", \"mindless\", \"grimly\", \"creeps\", \"substrate\", \"scarlett\", \"magnesium\", \"confines\", \"turks\", \"discs\", \"wichita\", \"arenas\", \"stairway\", \"embraces\", \"racket\", \"verbally\",\n    \"debuted\", \"hereafter\", \"nearing\", \"revolver\", \"hourly\", \"bouquet\", \"webbased\", \"teamed\", \"elijah\", \"spills\", \"flattered\", \"norah\", \"contended\", \"blushed\", \"brochure\", \"obsessive\",\n    \"peeked\", \"pursed\", \"extrinsic\", \"frontal\", \"tanzania\", \"topical\", \"felicity\", \"appalling\", \"amend\", \"digestive\", \"elian\", \"dialed\", \"realised\", \"watchdog\", \"jongun\", \"airing\",\n    \"parkinson\", \"gracie\", \"priori\", \"defiant\", \"grassy\", \"captivity\", \"headset\", \"landmarks\", \"etched\", \"collapses\", \"harding\", \"govt\", \"favorably\", \"downloads\", \"coupon\", \"mcgee\",\n    \"maher\", \"regained\", \"lockheed\", \"ratified\", \"tandem\", \"constance\", \"giveaway\", \"diagrams\", \"safeguard\", \"glimpsed\", \"informant\", \"turkeys\", \"isabella\", \"attends\", \"racists\", \"weakly\",\n    \"hamstring\", \"polity\", \"fades\", \"selfhelp\", \"grossman\", \"bazaar\", \"grownup\", \"wretched\", \"coaster\", \"hearth\", \"soles\", \"shaded\", \"stinking\", \"suarez\", \"specifies\", \"spruce\",\n    \"whopping\", \"queries\", \"classy\", \"awaits\", \"fruitful\", \"cranberry\", \"watchers\", \"throbbing\", \"absently\", \"parchment\", \"encoding\", \"harbaugh\", \"complains\", \"luncheon\", \"churning\", \"recounted\",\n    \"angled\", \"workin\", \"wrongly\", \"parity\", \"leopold\", \"retrieval\", \"hummed\", \"conducts\", \"genus\", \"drags\", \"cruises\", \"terminate\", \"tragedies\", \"hubbard\", \"handcuffs\", \"simulate\",\n    \"shimano\", \"revisit\", \"proximal\", \"freezes\", \"humid\", \"twohour\", \"waterfall\", \"autistic\", \"stiffly\", \"bounded\", \"photons\", \"submerged\", \"decks\", \"ridicule\", \"lighted\", \"absorbing\",\n    \"angola\", \"oxide\", \"climates\", \"amplified\", \"appellate\", \"sprigs\", \"gritty\", \"booking\", \"splashing\", \"reunited\", \"facets\", \"silvery\", \"forties\", \"survives\", \"flaming\", \"corrupted\",\n    \"clove\", \"requisite\", \"bigtime\", \"turquoise\", \"fernandez\", \"throats\", \"rumbling\", \"faculties\", \"glossary\", \"boils\", \"emitted\", \"persists\", \"manmade\", \"diverted\", \"flair\", \"gergen\",\n    \"recourse\", \"lofty\", \"beckel\", \"serene\", \"doorstep\", \"timetable\", \"throttle\", \"gloomy\", \"pairing\", \"deadlines\", \"mater\", \"rulings\", \"walnuts\", \"starks\", \"slowdown\", \"briskly\",\n    \"auditor\", \"overdue\", \"pursuits\", \"likeness\", \"safest\", \"fastfood\", \"shrill\", \"blackened\", \"sweeps\", \"mounds\", \"sinai\", \"drifts\", \"greer\", \"cautions\", \"landslide\", \"cords\",\n    \"despise\", \"chloride\", \"textures\", \"crates\", \"timed\", \"parasite\", \"stemming\", \"pigment\", \"proclaim\", \"brody\", \"nicklaus\", \"voldemort\", \"folly\", \"guideline\", \"cabrera\", \"maize\",\n    \"tornadoes\", \"quivering\", \"stabbing\", \"discreet\", \"evokes\", \"staten\", \"gentiles\", \"calmed\", \"mediator\", \"garments\", \"dubai\", \"glaciers\", \"explorers\", \"pigeon\", \"wrecked\", \"strangled\",\n    \"autograph\", \"emmett\", \"turbulent\", \"transcend\", \"rained\", \"probing\", \"hereby\", \"greenwich\", \"escapes\", \"silky\", \"laughable\", \"weakening\", \"lagattuta\", \"bearings\", \"hubby\", \"cores\",\n    \"hanks\", \"rumored\", \"growl\", \"prank\", \"argentine\", \"thomson\", \"stitches\", \"cracker\", \"hardwood\", \"surrounds\", \"legit\", \"rocker\", \"thier\", \"priceless\", \"skeletal\", \"sprinkled\",\n    \"scatter\", \"nesting\", \"trenches\", \"mayoral\", \"bedding\", \"pennies\", \"squirrels\", \"uniformly\", \"wagons\", \"notebooks\", \"layered\", \"retina\", \"chipped\", \"paralysis\", \"herds\", \"scrubbed\",\n    \"coolest\", \"radios\", \"clarified\", \"blends\", \"tripled\", \"sanction\", \"revered\", \"mediating\", \"elias\", \"overboard\", \"shoves\", \"trays\", \"boasted\", \"complexes\", \"eyepiece\", \"cessation\",\n    \"coined\", \"euros\", \"psychotic\", \"mediate\", \"spectra\", \"perverse\", \"flannel\", \"cubans\", \"beethoven\", \"flinched\", \"interiors\", \"draining\", \"amplitude\", \"suspense\", \"pigeons\", \"recap\",\n    \"diabetic\", \"ketchup\", \"excused\", \"swallows\", \"diagnose\", \"sheltered\", \"trotted\", \"leftwing\", \"deterrent\", \"occupies\", \"arresting\", \"havent\", \"quiones\", \"cassandra\", \"preface\", \"murderous\",\n    \"badges\", \"hearst\", \"divert\", \"gandhi\", \"reacts\", \"dynamite\", \"awaited\", \"precursor\", \"imposes\", \"cherish\", \"doctrinal\", \"emeritus\", \"beckett\", \"antiquity\", \"flute\", \"nepal\",\n    \"grotesque\", \"bankr\", \"angered\", \"rousseau\", \"leone\", \"relocated\", \"civility\", \"moneyline\", \"stooped\", \"tailor\", \"sluggish\", \"pipelines\", \"lessen\", \"chiefly\", \"alexandra\", \"immersion\",\n    \"embarked\", \"closeness\", \"washes\", \"nominate\", \"sincerity\", \"blockade\", \"referee\", \"festive\", \"surpassed\", \"frigid\", \"risked\", \"patting\", \"primacy\", \"replica\", \"linemen\", \"hopping\",\n    \"neutron\", \"combed\", \"twitch\", \"outfield\", \"schroeder\", \"silverman\", \"smacked\", \"shepard\", \"disliked\", \"seams\", \"finalists\", \"halved\", \"stormed\", \"donating\", \"fixtures\", \"catalogs\",\n    \"bayou\", \"simplify\", \"renamed\", \"runnerup\", \"patsy\", \"blackmail\", \"clooney\", \"quieter\", \"mosques\", \"henri\", \"drilled\", \"alvarez\", \"metadata\", \"dearest\", \"executor\", \"flawless\",\n    \"plotted\", \"patrols\", \"discredit\", \"devise\", \"casualty\", \"raisins\", \"semifinal\", \"anchors\", \"rubbish\", \"elevators\", \"spirited\", \"joyful\", \"quaint\", \"bowen\", \"ferris\", \"colombian\",\n    \"regulars\", \"interns\", \"puppets\", \"lancaster\", \"beaming\", \"knitting\", \"shriek\", \"convened\", \"rustling\", \"grenade\", \"redundant\", \"leftovers\", \"climatic\", \"heaving\", \"shipments\", \"deceptive\",\n    \"tenets\", \"payton\", \"upgrading\", \"rusted\", \"loadings\", \"sweaters\", \"wiser\", \"cones\", \"vocation\", \"eminent\", \"whiteness\", \"commuters\", \"propelled\", \"charred\", \"concerted\", \"tides\",\n    \"opioid\", \"baltic\", \"ascent\", \"blasts\", \"reverence\", \"truce\", \"puffed\", \"majestic\", \"thinker\", \"actresses\", \"barak\", \"rookies\", \"stalked\", \"forks\", \"cautioned\", \"gleam\",\n    \"prognosis\", \"makin\", \"bundled\", \"timer\", \"fixture\", \"vineyards\", \"waged\", \"vents\", \"psych\", \"elicited\", \"gentry\", \"janie\", \"equate\", \"tremble\", \"restart\", \"aristide\",\n    \"chopping\", \"fledgling\", \"syrians\", \"shutters\", \"tread\", \"mondays\", \"bristol\", \"batters\", \"mocked\", \"lifeless\", \"quarry\", \"hitch\", \"garnered\", \"clarice\", \"goodwin\", \"bodyguard\",\n    \"spree\", \"thinning\", \"eruption\", \"forceful\", \"manuals\", \"railroads\", \"moran\", \"boldly\", \"vance\", \"baffled\", \"scratches\", \"reopened\", \"hunch\", \"causality\", \"buckhead\", \"erroneous\",\n    \"workload\", \"ushered\", \"calculus\", \"despised\", \"preclude\", \"handheld\", \"dominic\", \"reeling\", \"nicholson\", \"conserve\", \"airtight\", \"accessory\", \"staining\", \"bustling\", \"stressing\", \"rosenthal\",\n    \"malignant\", \"dangled\", \"emulate\", \"authored\", \"clapping\", \"suitcases\", \"cluttered\", \"squadron\", \"tripp\", \"overdose\", \"recycle\", \"spraying\", \"aspire\", \"reforming\", \"banners\", \"gland\",\n    \"goauld\", \"glide\", \"vowel\", \"widen\", \"attacker\", \"citizenry\", \"plush\", \"puzzling\", \"freeing\", \"giles\", \"modifying\", \"embryonic\", \"harmon\", \"frida\", \"frosting\", \"attire\",\n    \"clumps\", \"walkway\", \"silenced\", \"quota\", \"mclean\", \"shrieked\", \"warsaw\", \"mythical\", \"prophetic\", \"resonate\", \"pitiful\", \"alleges\", \"percy\", \"casimir\", \"reassured\", \"denotes\",\n    \"liquidity\", \"lasers\", \"heirs\", \"grayson\", \"kodak\", \"reelected\", \"illegals\", \"perdue\", \"refining\", \"wilkinson\", \"heartland\", \"sauces\", \"tenor\", \"shortcut\", \"pleas\", \"valves\",\n    \"cortical\", \"fluent\", \"intrusive\", \"qualifies\", \"praising\", \"taxable\", \"finer\", \"gathers\", \"hallways\", \"vigil\", \"exposes\", \"thrift\", \"steinberg\", \"glazed\", \"embryo\", \"evoked\",\n    \"spaceship\", \"compel\", \"vanishing\", \"bumping\", \"barge\", \"agrarian\", \"thanking\", \"chinatown\", \"visualize\", \"annapolis\", \"twoday\", \"wooded\", \"emailed\", \"circa\", \"greenland\", \"rallying\",\n    \"ramon\", \"norma\", \"venerable\", \"anecdotes\", \"inject\", \"walkers\", \"accords\", \"optimize\", \"tracts\", \"newfound\", \"saloon\", \"audubon\", \"devout\", \"axial\", \"barris\", \"antidote\",\n    \"flutter\", \"vigor\", \"crave\", \"swann\", \"canyons\", \"additive\", \"signifies\", \"sensual\", \"gunshots\", \"squid\", \"cummings\", \"concise\", \"residing\", \"bannon\", \"polarized\", \"baggy\",\n    \"marches\", \"outpost\", \"toured\", \"deepened\", \"overgrown\", \"rapists\", \"medically\", \"exploits\", \"enraged\", \"boyle\", \"defective\", \"manafort\", \"cardio\", \"juries\", \"errands\", \"arches\",\n    \"franz\", \"mustang\", \"maternity\", \"macmillan\", \"steroid\", \"abdul\", \"crows\", \"negatives\", \"gorge\", \"resumes\", \"semantics\", \"keynote\", \"colbert\", \"trimmings\", \"downed\", \"elevate\",\n    \"manila\", \"verbs\", \"paypal\", \"pencils\", \"bruise\", \"bundles\", \"beets\", \"prosper\", \"mused\", \"leafy\", \"poetics\", \"delaying\", \"junkie\", \"analyzes\", \"slicing\", \"calhoun\",\n    \"bobbed\", \"feelin\", \"warmly\", \"strife\", \"showered\", \"heartfelt\", \"abduction\", \"envelopes\", \"sculptor\", \"gorilla\", \"tealc\", \"colby\", \"bosom\", \"skipper\", \"harms\", \"creaking\",\n    \"tellin\", \"exhales\", \"rabin\", \"embodies\", \"protector\", \"curses\", \"sweetly\", \"cleaners\", \"curving\", \"coincide\", \"spawning\", \"couture\", \"executing\", \"superiors\", \"gruesome\", \"arcade\",\n    \"endowed\", \"pooled\", \"mckinney\", \"rockville\", \"anime\", \"ebola\", \"budding\", \"starved\", \"offscreen\", \"relegated\", \"anthology\", \"soups\", \"stomped\", \"goodies\", \"harden\", \"nagging\",\n    \"undone\", \"bubbling\", \"stricken\", \"purposely\", \"ticks\", \"starship\", \"raspberry\", \"cersei\", \"applauded\", \"contour\", \"spooky\", \"namespace\", \"dramas\", \"tibetan\", \"wideeyed\", \"elective\",\n    \"vigilant\", \"sheikh\", \"primal\", \"virtuous\", \"millennia\", \"cradled\", \"camden\", \"stalk\", \"idealism\", \"charms\", \"twitching\", \"cashier\", \"hunts\", \"parachute\", \"scooter\", \"hurries\",\n    \"menacing\", \"callers\", \"classmate\", \"volcanoes\", \"fling\", \"cultured\", \"canals\", \"lenin\", \"pulpit\", \"spaced\", \"splits\", \"outweigh\", \"forsyth\", \"dripped\", \"teamwork\", \"solemnly\",\n    \"squared\", \"doesn\", \"tricked\", \"knack\", \"caveat\", \"slogans\", \"pitted\", \"treatise\", \"afterlife\", \"upheaval\", \"olsen\", \"reuben\", \"freakin\", \"wicker\", \"passer\", \"tactile\",\n    \"shalt\", \"townsend\", \"baldemar\", \"matrices\", \"partying\", \"jacobson\", \"pulses\", \"monsanto\", \"gifford\", \"untreated\", \"overtly\", \"tattooed\", \"whitaker\", \"shred\", \"creaked\", \"tallest\",\n    \"fraught\", \"ashtray\", \"bowel\", \"exited\", \"pathogen\", \"genomic\", \"drapes\", \"stripping\", \"furry\", \"cooke\", \"shedding\", \"nicolas\", \"osborne\", \"cohesive\", \"saliva\", \"crafting\",\n    \"massively\", \"arrivals\", \"labored\", \"deepening\", \"sunnis\", \"sharper\", \"waiters\", \"molded\", \"anomalies\", \"forearms\", \"ezekiel\", \"excitedly\", \"macon\", \"cartilage\", \"lecturer\", \"dives\",\n    \"petite\", \"residues\", \"designate\", \"clerical\", \"putnam\", \"pulsing\", \"endorsing\", \"kanye\", \"secede\", \"wrestle\", \"elitist\", \"handler\", \"whores\", \"skeletons\", \"gadget\", \"calming\",\n    \"impartial\", \"fracking\", \"robotics\", \"deficient\", \"stadiums\", \"redesign\", \"macho\", \"downfall\", \"comer\", \"intercom\", \"venera\", \"fencing\", \"hammering\", \"foothills\", \"wormhole\", \"takin\",\n    \"rumbled\", \"momentary\", \"mounts\", \"roommates\", \"withhold\", \"sediments\", \"weasel\", \"politico\", \"kennesaw\", \"departing\", \"enlarge\", \"megyn\", \"mourn\", \"clipboard\", \"medalist\", \"retro\",\n    \"savory\", \"quaid\", \"repent\", \"carney\", \"papal\", \"unheard\", \"blazer\", \"jerking\", \"creasy\", \"kingdoms\", \"instruct\", \"coiled\", \"hotline\", \"signify\", \"lynne\", \"theorem\",\n    \"genotype\", \"tessa\", \"mckenzie\", \"nicknamed\", \"surveying\", \"lange\", \"westbrook\", \"queue\", \"germs\", \"georges\", \"grossly\", \"whips\", \"cheeses\", \"taipei\", \"bribery\", \"basal\",\n    \"wrigley\", \"conveys\", \"casserole\", \"coughs\", \"bentley\", \"darting\", \"carton\", \"brewery\", \"bartlett\", \"lowlevel\", \"eleventh\", \"forensics\", \"handshake\", \"prudence\", \"spanning\", \"musharraf\",\n    \"revolving\", \"genders\", \"cartridge\", \"funerals\", \"pollock\", \"mckay\", \"jobless\", \"oblivion\", \"napkins\", \"degraded\", \"avail\", \"coastline\", \"chilean\", \"ramos\", \"liberia\", \"flashy\",\n    \"restrain\", \"codified\", \"polluted\", \"dormant\", \"shrieking\", \"salted\", \"clothed\", \"heirloom\", \"thumping\", \"marinade\", \"tenet\", \"beltway\", \"jails\", \"dignified\", \"roseanne\", \"humanism\",\n    \"glimpses\", \"lanka\", \"sacrament\", \"spiked\", \"ardent\", \"intro\", \"frowns\", \"erickson\", \"islanders\", \"breakout\", \"tariff\", \"campers\", \"reboot\", \"swanson\", \"chigurh\", \"daria\",\n    \"crackling\", \"customize\", \"promoters\", \"impede\", \"bethlehem\", \"swimmer\", \"brunswick\", \"sheffield\", \"leftists\", \"attest\", \"mackenzie\", \"roars\", \"snarled\", \"darkening\", \"lipid\", \"defends\",\n    \"josephine\", \"stinging\", \"auctions\", \"undue\", \"leach\", \"regal\", \"resultant\", \"frontiers\", \"jaguar\", \"spoiler\", \"coincided\", \"paterno\", \"medicinal\", \"secretive\", \"mamma\", \"doubtless\",\n    \"clinician\", \"energized\", \"fangs\", \"buyout\", \"weekday\", \"playbook\", \"caramel\", \"lapse\", \"whitfield\", \"spotting\", \"carnage\", \"realty\", \"mahmoud\", \"angst\", \"steiner\", \"funnel\",\n    \"polled\", \"purported\", \"diagonal\", \"plummeted\", \"hardships\", \"shortfall\", \"kerrey\", \"flake\", \"lawmaker\", \"subsidize\", \"sterritt\", \"funniest\", \"nacional\", \"brookings\", \"lando\", \"pollster\",\n    \"outcry\", \"senseless\", \"pedals\", \"feral\", \"regulates\", \"spitzer\", \"repealed\", \"lanier\", \"blankly\", \"lancet\", \"melbourne\", \"scents\", \"spacex\", \"dispersal\", \"seamless\", \"wearily\",\n    \"fluke\", \"deceived\", \"squeezes\", \"mutants\", \"howled\", \"stony\", \"tenuous\", \"richly\", \"weakest\", \"cater\", \"trance\", \"marxism\", \"recite\", \"undercut\", \"craters\", \"finnish\",\n    \"guillen\", \"inflict\", \"stockholm\", \"clubhead\", \"cavern\", \"wasteful\", \"melodies\", \"scrimmage\", \"brexit\", \"thirds\", \"shortened\", \"stemmed\", \"convent\", \"legalized\", \"busiest\", \"peruvian\",\n    \"fasting\", \"vacancy\", \"audits\", \"occupants\", \"penchant\", \"royalties\", \"cosmology\", \"hurriedly\", \"mcmahon\", \"reflex\", \"faiths\", \"stumbles\", \"sweetest\", \"endings\", \"cupcakes\", \"plugs\",\n    \"raping\", \"sofia\", \"chords\", \"waning\", \"dartmouth\", \"fallujah\", \"repressed\", \"glint\", \"trophies\", \"buttocks\", \"meyers\", \"spawn\", \"consoles\", \"bathrobe\", \"sprawl\", \"groupings\",\n    \"intrigue\", \"haynes\", \"contra\", \"twelfth\", \"dispose\", \"deceive\", \"averted\", \"afflicted\", \"composure\", \"praises\", \"causation\", \"salazar\", \"haste\", \"boardwalk\", \"adamant\", \"schuster\",\n    \"urgently\", \"corbett\", \"bluetooth\", \"ruben\", \"batted\", \"chore\", \"grounding\", \"narrower\", \"harlan\", \"kneel\", \"exported\", \"vending\", \"embassies\", \"saddened\", \"pained\", \"binge\",\n    \"equator\", \"minimized\", \"polio\", \"patented\", \"jolie\", \"bandage\", \"burying\", \"hover\", \"shutter\", \"exporting\", \"gospels\", \"chained\", \"gilded\", \"unfolds\", \"gazes\", \"cologne\",\n    \"begala\", \"excesses\", \"staffs\", \"escalated\", \"repairing\", \"inhale\", \"blurry\", \"putative\", \"fared\", \"fueling\", \"moans\", \"crossover\", \"skyfall\", \"clientele\", \"piety\", \"doughnuts\",\n    \"compute\", \"aires\", \"courtship\", \"limousine\", \"lonergan\", \"refute\", \"pretense\", \"neared\", \"lures\", \"ankara\", \"trudy\", \"captains\", \"chevron\", \"pastels\", \"sunken\", \"sixmonth\",\n    \"budge\", \"approving\", \"earnhardt\", \"occupancy\", \"selig\", \"justifies\", \"gowns\", \"groves\", \"lowkey\", \"barbed\", \"blooming\", \"mavericks\", \"dreamy\", \"reddit\", \"beginner\", \"restroom\",\n    \"stagnant\", \"plastered\", \"molina\", \"electing\", \"collagen\", \"parcells\", \"scowl\", \"fredricka\", \"algren\", \"amanpour\", \"shallots\", \"unreal\", \"snape\", \"stricter\", \"drenched\", \"oversaw\",\n    \"unifying\", \"cowardly\", \"shrek\", \"morsi\", \"strolling\", \"hypocrite\", \"wetland\", \"chechnya\", \"timid\", \"cartels\", \"hiked\", \"martyr\", \"plunging\", \"narrowing\", \"anchorage\", \"harassing\",\n    \"rembrandt\", \"overload\", \"tworun\", \"smallpox\", \"cesar\", \"bailouts\", \"celsius\", \"crippling\", \"douglass\", \"flask\", \"wakeup\", \"ticked\", \"faraway\", \"condensed\", \"oceanic\", \"winged\",\n    \"schiff\", \"lunchtime\", \"setbacks\", \"whirling\", \"chemist\", \"climbers\", \"rumpled\", \"bluegrass\", \"nathaniel\", \"dialect\", \"iphones\", \"uploaded\", \"chests\", \"surging\", \"melts\", \"obeyed\",\n    \"croatian\", \"nicest\", \"maneuvers\", \"penned\", \"toppled\", \"tripping\", \"planks\", \"allocate\", \"bloodshed\", \"follower\", \"kayak\", \"antics\", \"guthrie\", \"youngster\", \"subtests\", \"flashback\",\n    \"geoff\", \"reversing\", \"hooded\", \"shadowed\", \"rounding\", \"minimally\", \"quilts\", \"sporadic\", \"postcards\", \"everytime\", \"woken\", \"extracts\", \"postpone\", \"nurtured\", \"implanted\", \"disable\",\n    \"comforted\", \"deviant\", \"chatted\", \"monet\", \"confided\", \"pledges\", \"reddish\", \"tensed\", \"anglo\", \"comforts\", \"edinburgh\", \"diluted\", \"tweed\", \"visceral\", \"stubble\", \"recited\",\n    \"drugstore\", \"reared\", \"tabloids\", \"cures\", \"labyrinth\", \"fremont\", \"carcass\", \"troopers\", \"flimsy\", \"postings\", \"recognise\", \"memos\", \"trainees\", \"automaker\", \"dignan\", \"landry\",\n    \"practicum\", \"spores\", \"subsided\", \"isabelle\", \"bailed\", \"warped\", \"cheesy\", \"glands\", \"eyelashes\", \"schindler\", \"crispy\", \"achieves\", \"outlining\", \"datasets\", \"aversion\", \"miner\",\n    \"steed\", \"naples\", \"steward\", \"statesman\", \"grilling\", \"centrist\", \"oversize\", \"cadets\", \"magnolia\", \"crumble\", \"wont\", \"busting\", \"dials\", \"dreamt\", \"annals\", \"hampered\",\n    \"forgets\", \"couric\", \"smoother\", \"dorsey\", \"aback\", \"presided\", \"hurtful\", \"overwhelm\", \"swearing\", \"bellaire\", \"eyeballs\", \"accession\", \"scribbled\", \"splendor\", \"troupe\", \"galley\",\n    \"refresh\", \"nascent\", \"liquids\", \"runnin\", \"cliche\", \"smoothing\", \"hague\", \"perfected\", \"outages\", \"sheds\", \"starboard\", \"tripod\", \"sermons\", \"dialectic\", \"growls\", \"idealized\",\n    \"scorn\", \"kneels\", \"pharma\", \"neary\", \"mccormick\", \"gutierrez\", \"imprint\", \"repayment\", \"auditing\", \"flatly\", \"referees\", \"mixtures\", \"pitfalls\", \"royce\", \"juveniles\", \"lilies\",\n    \"memorized\", \"collier\", \"spacing\", \"swath\", \"katya\", \"georgian\", \"lunged\", \"panelist\", \"chaplain\", \"mobilized\", \"patriarch\", \"congruent\", \"fibrosis\", \"dodging\", \"murmurs\", \"bellevue\",\n    \"wager\", \"altman\", \"highrise\", \"blinks\", \"awaken\", \"bashar\", \"genotypes\", \"rentals\", \"leopard\", \"accorded\", \"foreigner\", \"feldman\", \"woolf\", \"positives\", \"tumblr\", \"ripples\",\n    \"kingston\", \"jerseys\", \"maximal\", \"exerted\", \"conserved\", \"scarves\", \"curing\", \"denis\", \"relic\", \"patterned\", \"tinted\", \"monologue\", \"lament\", \"peeking\", \"perplexed\", \"wilde\",\n    \"securely\", \"mascara\", \"fifteenth\", \"louisa\", \"conferred\", \"commits\", \"beckoned\", \"bandura\", \"appliance\", \"allure\", \"unravel\", \"overcoat\", \"optimized\", \"saviour\", \"undertook\", \"molested\",\n    \"chemo\", \"shrunk\", \"traverse\", \"ipads\", \"twoweek\", \"lamented\", \"brooding\", \"breathes\", \"bulgaria\", \"bungalow\", \"macbook\", \"gliding\", \"regis\", \"removable\", \"exhale\", \"airwaves\",\n    \"anglican\", \"rendition\", \"chaired\", \"accuses\", \"unload\", \"colours\", \"affirms\", \"wacky\", \"swimmers\", \"underdog\", \"moderated\", \"viola\", \"clones\", \"intending\", \"schiller\", \"tonic\",\n    \"pinot\", \"grooming\", \"reckoning\", \"pondered\", \"lumps\", \"absurdity\", \"antiwar\", \"allegheny\", \"fortified\", \"rangel\", \"cranky\", \"plume\", \"digestion\", \"repertory\", \"ballard\", \"davenport\",\n    \"puberty\", \"bonded\", \"pyramids\", \"comedians\", \"serenity\", \"converse\", \"flavored\", \"ignited\", \"georgians\", \"speck\", \"ascribed\", \"pastures\", \"chives\", \"theorist\", \"sculpted\", \"sansa\",\n    \"mcbride\", \"sagged\", \"receding\", \"densely\", \"batches\", \"valet\", \"angelina\", \"crowe\", \"fliers\", \"earners\", \"armey\", \"glimmer\", \"heady\", \"medley\", \"landlords\", \"dumps\",\n    \"gillespie\", \"mosul\", \"chassis\", \"framers\", \"consonant\", \"madeline\", \"deluxe\", \"daryl\", \"markings\", \"odors\", \"aubrey\", \"piers\", \"fonts\", \"amassed\", \"doorknob\", \"twigs\",\n    \"filth\", \"underside\", \"booklet\", \"abiding\", \"encrypted\", \"accuser\", \"cornmeal\", \"avert\", \"saucer\", \"expires\", \"drawbacks\", \"revisited\", \"dwarfs\", \"darts\", \"redefine\", \"carpets\",\n    \"shelton\", \"salinas\", \"rotated\", \"rightful\", \"projector\", \"groomed\", \"sidelined\", \"tacos\", \"pesto\", \"worrisome\", \"rapport\", \"trough\", \"bargains\", \"suicides\", \"cameraman\", \"dries\",\n    \"hartman\", \"spatula\", \"texted\", \"effluent\", \"harshly\", \"paulson\", \"warily\", \"bestowed\", \"foggy\", \"overcame\", \"paleo\", \"resin\", \"parable\", \"converge\", \"crunchy\", \"avian\",\n    \"forwards\", \"princes\", \"minivan\", \"confer\", \"finalist\", \"modesty\", \"bowing\", \"tilting\", \"mullen\", \"mantel\", \"sided\", \"flopped\", \"padding\", \"docking\", \"beginners\", \"grate\",\n    \"atkinson\", \"dialogues\", \"appetizer\", \"connector\", \"underwood\", \"fanned\", \"juniors\", \"glided\", \"loophole\", \"sightings\", \"taping\", \"canons\", \"colossal\", \"spoilers\", \"tackled\", \"thrived\",\n    \"sandstone\", \"aidan\", \"campfire\", \"allright\", \"soybeans\", \"tagging\", \"encoded\", \"usability\", \"melodic\", \"wheaton\", \"sloping\", \"famer\", \"sparkled\", \"checkout\", \"flagged\", \"resented\",\n    \"sharpened\", \"greased\", \"handouts\", \"plowed\", \"parochial\", \"budgetary\", \"retreats\", \"estranged\", \"radon\", \"expos\", \"wilkins\", \"provoking\", \"takers\", \"fullerton\", \"elderman\", \"enlist\",\n    \"stately\", \"borges\", \"attaining\", \"alligator\", \"dismantle\", \"analogies\", \"mouthful\", \"balkans\", \"manifests\", \"bandages\", \"grenades\", \"judah\", \"silicone\", \"barthes\", \"grits\", \"scrubbing\",\n    \"anecdote\", \"briefings\", \"healthful\", \"arisen\", \"shielded\", \"bribes\", \"ashton\", \"roundup\", \"snort\", \"whence\", \"ritchie\", \"defer\", \"straits\", \"veiled\", \"revolves\", \"escalate\",\n    \"destroyer\", \"relics\", \"lugar\", \"coldly\", \"feeny\", \"flares\", \"apathy\", \"tamara\", \"artisans\", \"skates\", \"pendulum\", \"zachary\", \"commuting\", \"ballad\", \"vowels\", \"heroism\",\n    \"presiding\", \"cutbacks\", \"gulped\", \"murals\", \"darla\", \"forging\", \"ovarian\", \"limbo\", \"tutors\", \"flailing\", \"ortega\", \"banished\", \"spits\", \"pedestal\", \"reliant\", \"durant\",\n    \"boosts\", \"friedrich\", \"quark\", \"proxies\", \"shortest\", \"breads\", \"allegory\", \"deserts\", \"shiites\", \"pollsters\", \"watered\", \"jeter\", \"excludes\", \"prada\", \"sixyear\", \"tasked\",\n    \"landuse\", \"streamed\", \"wimbledon\", \"reigning\", \"terminals\", \"grieve\", \"quarrel\", \"drumming\", \"melon\", \"unleash\", \"impeached\", \"widows\", \"overalls\", \"rafters\", \"helper\", \"jamaican\",\n    \"molding\", \"prickly\", \"outputs\", \"hasty\", \"caretaker\", \"closets\", \"noriega\", \"onesided\", \"modestly\", \"coasts\", \"waxed\", \"propel\", \"mingled\", \"palate\", \"cashmere\", \"coals\",\n    \"lizards\", \"lashed\", \"empires\", \"sedentary\", \"cropped\", \"puffs\", \"mistrust\", \"untold\", \"bowers\", \"rapes\", \"sling\", \"perceives\", \"darkly\", \"crowned\", \"pondering\", \"delusions\",\n    \"harmonic\", \"regulator\", \"farthest\", \"lacey\", \"dusted\", \"hawking\", \"redeem\", \"brochures\", \"graded\", \"athena\", \"doorman\", \"schematic\", \"topanga\", \"ledger\", \"clouded\", \"completes\",\n    \"alluded\", \"underage\", \"brigham\", \"rodents\", \"bayesian\", \"stripe\", \"thoreau\", \"acidic\", \"marshes\", \"courier\", \"musicals\", \"warhol\", \"heller\", \"rehnquist\", \"clams\", \"annan\",\n    \"tentacles\", \"baroque\", \"oconnell\", \"thickened\", \"crowding\", \"fullness\", \"aiding\", \"waitin\", \"marshals\", \"fedex\", \"backside\", \"grandeur\", \"longhorns\", \"handbag\", \"dictators\", \"penal\",\n    \"beaumont\", \"outings\", \"swiveled\", \"rhymes\", \"defeats\", \"menhaden\", \"partnered\", \"hermione\", \"shootout\", \"revising\", \"ontology\", \"twinkies\", \"faulkner\", \"grail\", \"rippling\", \"readable\",\n    \"affirming\", \"detergent\", \"purgatory\", \"hattie\", \"cranes\", \"mansfield\", \"ridley\", \"redress\", \"detriment\", \"newsom\", \"entrusted\", \"payers\", \"squatting\", \"westward\", \"syringe\", \"mcguire\",\n    \"errand\", \"bowels\", \"kimble\", \"ethically\", \"bellowed\", \"hangar\", \"gurney\", \"takeoff\", \"brunette\", \"elise\", \"pharaoh\", \"willful\", \"topdown\", \"alaskan\", \"drugged\", \"bandwagon\",\n    \"blanc\", \"deepen\", \"preachers\", \"binds\", \"darden\", \"keepers\", \"alito\", \"humour\", \"rippled\", \"havin\", \"wooten\", \"emirates\", \"clogged\", \"downey\", \"slaying\", \"wrestled\",\n    \"scopes\", \"dutifully\", \"butte\", \"eurozone\", \"crazed\", \"hanged\", \"hardcopy\", \"excerpted\", \"orient\", \"bluntly\", \"severus\", \"trailhead\", \"raptors\", \"crucified\", \"descartes\", \"siberia\",\n    \"bleach\", \"unmanned\", \"flinch\", \"picket\", \"whined\", \"archaic\", \"galleria\", \"alaric\", \"passports\", \"surpass\", \"workable\", \"gravely\", \"wholesome\", \"blackwell\", \"cleric\", \"hayward\",\n    \"stifling\", \"landfills\", \"lyrical\", \"canning\", \"bumpy\", \"soybean\", \"citigroup\", \"disarm\", \"abstracts\", \"playin\", \"proverbs\", \"raided\", \"molten\", \"octopus\", \"charger\", \"vinci\",\n    \"balding\", \"healer\", \"constable\", \"guadalupe\", \"habitual\", \"squeak\", \"pandering\", \"distort\", \"fashions\", \"entailed\", \"wares\", \"bleached\", \"electors\", \"stitched\", \"chiang\", \"mcdowell\",\n    \"midwife\", \"fauna\", \"tubing\", \"mythic\", \"masking\", \"splinter\", \"scarecrow\", \"drains\", \"briefs\", \"tillman\", \"shrewd\", \"legions\", \"excavated\", \"stretcher\", \"shyly\", \"robberies\",\n    \"narrated\", \"tonya\", \"segal\", \"creak\", \"exiled\", \"predation\", \"ferns\", \"jacks\", \"swine\", \"scanners\", \"staffed\", \"mockery\", \"geithner\", \"wishful\", \"curators\", \"andean\",\n    \"derrida\", \"hines\", \"borden\", \"sergei\", \"martyrs\", \"comedies\", \"resists\", \"evanston\", \"buckled\", \"condos\", \"delights\", \"stashed\", \"montage\", \"pretends\", \"trudged\", \"dover\",\n    \"angier\", \"bluray\", \"graphical\", \"marveled\", \"sloane\", \"marcy\", \"waging\", \"comfy\", \"vetoed\", \"levers\", \"gaines\", \"magnets\", \"malik\", \"marquee\", \"darlin\", \"slashing\",\n    \"universes\", \"browne\", \"meteors\", \"quinones\", \"squads\", \"decipher\", \"rowland\", \"miley\", \"allotted\", \"ensued\", \"tabletop\", \"nested\", \"cyclical\", \"supervise\", \"statehood\", \"respite\",\n    \"bathe\", \"elsie\", \"tillotson\", \"dashing\", \"harming\", \"posited\", \"fullest\", \"enslaved\", \"forcibly\", \"unesco\", \"nameless\", \"deploying\", \"shelling\", \"trolley\", \"triad\", \"bordering\",\n    \"finley\", \"thawed\", \"cooker\", \"unsettled\", \"overrun\", \"resonates\", \"operas\", \"facet\", \"markup\", \"proponent\", \"dawned\", \"telltale\", \"alleys\", \"cafes\", \"unfit\", \"creased\",\n    \"summaries\", \"pores\", \"blowout\", \"outfitted\", \"magnified\", \"electrode\", \"wanders\", \"sandler\", \"sprays\", \"menstrual\", \"herrera\", \"visuals\", \"wildfire\", \"fingered\", \"crickets\", \"arrays\",\n    \"glares\", \"maguire\", \"aches\", \"oxidative\", \"durbin\", \"slideshow\", \"manic\", \"crockett\", \"bleachers\", \"sargent\", \"shopper\", \"censure\", \"knockout\", \"mussels\", \"fairs\", \"stamberg\",\n    \"forage\", \"yearbook\", \"virginity\", \"importing\", \"bouts\", \"wondrous\", \"agonizing\", \"colonized\", \"nairobi\", \"impromptu\", \"scripted\", \"postcold\", \"shrub\", \"strangest\", \"allout\", \"homered\",\n    \"gibbons\", \"utterance\", \"moths\", \"posits\", \"nerds\", \"snowfall\", \"travelled\", \"suppl\", \"refinery\", \"imitating\", \"offence\", \"salts\", \"withered\", \"lucia\", \"motivates\", \"crawls\",\n    \"uneasily\", \"deutsche\", \"marquette\", \"breeders\", \"puffing\", \"clawed\", \"unfounded\", \"pointer\", \"variously\", \"screech\", \"necrosis\", \"foresight\", \"equated\", \"obscurity\", \"camped\", \"scoreless\",\n    \"bounces\", \"clutches\", \"nebulae\", \"furrowed\", \"lanterns\", \"crooks\", \"soiled\", \"judas\", \"fillets\", \"ayers\", \"condit\", \"idols\", \"digitally\", \"paychecks\", \"neuronal\", \"digit\",\n    \"dwellers\", \"degrading\", \"bordered\", \"keyboards\", \"bunkers\", \"caviar\", \"boxed\", \"slumber\", \"livin\", \"fractions\", \"summons\", \"proctor\", \"publicist\", \"frankfurt\", \"reeds\", \"whirlwind\",\n    \"stardom\", \"cowards\", \"combating\", \"reinvent\", \"stroller\", \"shreds\", \"tickled\", \"raked\", \"harrowing\", \"crouching\", \"hagel\", \"sockets\", \"dumbbell\", \"faked\", \"thwart\", \"engraving\",\n    \"genomes\", \"crunching\", \"septic\", \"wards\", \"sacked\", \"racked\", \"enticing\", \"manova\", \"harass\", \"memorize\", \"dogged\", \"clippings\", \"cottages\", \"ingram\", \"resided\", \"davey\",\n    \"intifada\", \"weston\", \"bridging\", \"impeach\", \"kenyan\", \"cucumbers\", \"colette\", \"holloway\", \"conveying\", \"grappling\", \"scrawled\", \"affords\", \"pickled\", \"tripoli\", \"clive\", \"sunflower\",\n    \"constrain\", \"downing\", \"meddling\", \"lumia\", \"chimed\", \"pointedly\", \"spaniards\", \"pataki\", \"opting\", \"charters\", \"calendars\", \"foresee\", \"blueberry\", \"crier\", \"knopf\", \"enclave\",\n    \"dreary\", \"vaughan\", \"lumpy\", \"ravaged\", \"engulfed\", \"earthy\", \"spewing\", \"sanjay\", \"capsules\", \"closures\", \"watchful\", \"tendon\", \"wrongs\", \"animosity\", \"beatty\", \"haitians\",\n    \"cultivars\", \"fandom\", \"triumphs\", \"macintosh\", \"prosocial\", \"westeros\", \"clerics\", \"worsening\", \"apostolic\", \"warheads\", \"milling\", \"greeley\", \"larsen\", \"acuity\", \"rebuttal\", \"genie\",\n    \"cholera\", \"commenced\", \"romanian\", \"emile\", \"previews\", \"covariate\", \"tenderly\", \"ethel\", \"underfoot\", \"slimy\", \"legalize\", \"spade\", \"nordic\", \"zipped\", \"handlers\", \"barbour\",\n    \"entangled\", \"tropics\", \"detour\", \"repubs\", \"picky\", \"smirked\", \"swells\", \"humphries\", \"creditor\", \"flaps\", \"staterun\", \"iteration\", \"seduced\", \"rasmussen\", \"fanatics\", \"rescuers\",\n    \"steamy\", \"intensify\", \"streisand\", \"smugglers\", \"bedrock\", \"dukakis\", \"shatter\", \"impulsive\", \"excursion\", \"ringed\", \"shrieks\", \"cripple\", \"perilous\", \"wharton\", \"fateful\", \"compile\",\n    \"donvan\", \"collide\", \"scallions\", \"glacial\", \"ahold\", \"shorty\", \"approves\", \"ridiculed\", \"overrated\", \"playfully\", \"denounce\", \"upholding\", \"disciple\", \"mascot\", \"garza\", \"corral\",\n    \"countess\", \"holyfield\", \"cannes\", \"mormonism\", \"homegrown\", \"damian\", \"mariah\", \"bandit\", \"fullsize\", \"thrashing\", \"selects\", \"crackled\", \"grizzlies\", \"blushing\", \"profane\", \"limitless\",\n    \"middleton\", \"bigoted\", \"cheaply\", \"felon\", \"slanted\", \"moira\", \"minions\", \"graying\", \"sleigh\", \"sanctity\", \"scrooge\", \"reread\", \"bacterium\", \"sufferers\", \"conveyor\", \"sweeter\",\n    \"dinah\", \"defied\", \"gamer\", \"vibrating\", \"agitation\", \"homey\", \"freckled\", \"popup\", \"nineties\", \"epidemics\", \"dismayed\", \"recruiter\", \"molds\", \"reptiles\", \"catchy\", \"threaded\",\n    \"rusher\", \"wildfires\", \"venetian\", \"striding\", \"kelso\", \"mayfield\", \"collage\", \"kellyanne\", \"absorbs\", \"flushing\", \"montaigne\", \"chills\", \"devoured\", \"dulles\", \"creams\", \"giovanni\",\n    \"dialysis\", \"shielding\", \"snatches\", \"caribou\", \"looped\", \"dominique\", \"consumes\", \"margo\", \"fleece\", \"damning\", \"priscilla\", \"enacting\", \"prettier\", \"botched\", \"raged\", \"creeks\",\n    \"snail\", \"eagerness\", \"modular\", \"whitehead\", \"warmup\", \"forwarded\", \"flavorful\", \"knoxville\", \"snapshots\", \"robbers\", \"flapped\", \"raylan\", \"emmanuel\", \"erode\", \"forgo\", \"deceit\",\n    \"altruism\", \"navigator\", \"rearing\", \"redeemed\", \"prodigy\", \"linens\", \"drawback\", \"envied\", \"sketched\", \"tacit\", \"jilly\", \"flicking\", \"cullen\", \"carlisle\", \"neutrinos\", \"corny\",\n    \"lucian\", \"splayed\", \"dusting\", \"matted\", \"outburst\", \"wildcard\", \"envisions\", \"globular\", \"farce\", \"thrusting\", \"issuer\", \"lineages\", \"allege\", \"empress\", \"semblance\", \"shafts\",\n    \"mandarin\", \"veranda\", \"tapestry\", \"courting\", \"dizzying\", \"rooftops\", \"revoked\", \"scrolls\", \"buffs\", \"scolded\", \"anarchist\", \"heaviest\", \"algerian\", \"squealed\", \"ticker\", \"issuance\",\n    \"triangles\", \"bakhtin\", \"underlie\", \"hemmer\", \"delores\", \"immediacy\", \"waller\", \"thwarted\", \"frontline\", \"reston\", \"ignite\", \"medial\", \"worsened\", \"unmet\", \"cornelius\", \"canola\",\n    \"dissident\", \"grapple\", \"esoteric\", \"scams\", \"flatter\", \"innovate\", \"emanating\", \"paving\", \"thrives\", \"oneman\", \"stamina\", \"broadened\", \"sentient\", \"flexed\", \"langley\", \"mediators\",\n    \"jimenez\", \"searing\", \"hitched\", \"obedient\", \"strata\", \"daine\", \"leahy\", \"willed\", \"confronts\", \"scurried\", \"wildest\", \"foraging\", \"patchwork\", \"eaton\", \"excision\", \"variances\",\n    \"pryor\", \"hacks\", \"fours\", \"fondness\", \"dickerson\", \"slider\", \"drummond\", \"droplets\", \"bowden\", \"momentous\", \"trending\", \"refill\", \"callahan\", \"mcintyre\", \"musty\", \"billowing\",\n    \"fountains\", \"gaped\", \"unchecked\", \"centrally\", \"hardline\", \"ascending\", \"sorely\", \"raccoon\", \"boomed\", \"cleanse\", \"valuing\", \"complicit\", \"kimmel\", \"slabs\", \"centres\", \"clearcut\",\n    \"stomping\", \"winslow\", \"putts\", \"snowstorm\", \"moustache\", \"actuality\", \"flooring\", \"shrines\", \"likened\", \"graft\", \"evolves\", \"decaying\", \"mccann\", \"wheeling\", \"inched\", \"windfall\",\n    \"mammalian\", \"walden\", \"overflow\", \"starch\", \"roamed\", \"maude\", \"droid\", \"outlawed\", \"impunity\", \"spatially\", \"maids\", \"exiting\", \"crocodile\", \"entre\", \"knowhow\", \"prism\",\n    \"writhing\", \"agreeable\", \"stirs\", \"bradshaw\", \"contrived\", \"schwab\", \"riparian\", \"bitcoin\", \"distilled\", \"steeped\", \"burgess\", \"plopped\", \"alloy\", \"failings\", \"smuggled\", \"artworks\",\n    \"rustle\", \"unsub\", \"kernels\", \"analysed\", \"shortcuts\", \"brits\", \"clubface\", \"comical\", \"liberate\", \"demonic\", \"impasse\", \"ascension\", \"populous\", \"jumble\", \"craftsman\", \"mania\",\n    \"boyhood\", \"kingwood\", \"recital\", \"buttoned\", \"thumped\", \"armenian\", \"traitors\", \"complied\", \"blaring\", \"cyclist\", \"prescott\", \"talley\", \"noodle\", \"equities\", \"battista\", \"sealing\",\n    \"fainted\", \"negligent\", \"seawater\", \"polyester\", \"polygraph\", \"whacked\", \"conduit\", \"hyperbole\", \"referent\", \"washer\", \"cronies\", \"randi\", \"bronco\", \"ralston\", \"posse\", \"whirl\",\n    \"scented\", \"glassy\", \"combs\", \"tatum\", \"grimy\", \"toobin\", \"circulate\", \"reborn\", \"brighten\", \"unearthed\", \"mayan\", \"antlers\", \"gearing\", \"attuned\", \"entice\", \"mules\",\n    \"diligent\", \"grooves\", \"natalee\", \"conyers\", \"tiananmen\", \"sniffs\", \"effected\", \"grownups\", \"swirls\", \"wield\", \"pedaling\", \"descends\", \"prettiest\", \"litany\", \"matalin\", \"visavis\",\n    \"syntactic\", \"grouse\", \"ejected\", \"surfer\", \"wading\", \"mcdaniel\", \"heresy\", \"floured\", \"geraldine\", \"diversify\", \"radiance\", \"millet\", \"pelvic\", \"savages\", \"succumbed\", \"dearth\",\n    \"gutted\", \"prologue\", \"exertion\", \"glorified\", \"smashes\", \"bolstered\", \"larval\", \"andes\", \"reciting\", \"dieting\", \"camper\", \"stinky\", \"jackpot\", \"islamabad\", \"servaas\", \"glittered\",\n    \"daryn\", \"swamps\", \"keenly\", \"stills\", \"gleaned\", \"amnesia\", \"wellbeing\", \"willfully\", \"rockdale\", \"borrower\", \"premieres\", \"arduous\", \"sighting\", \"finesse\", \"artus\", \"shorten\",\n    \"vases\", \"modelling\", \"grader\", \"legality\", \"sprouted\", \"coulter\", \"melanoma\", \"coups\", \"craze\", \"brownies\", \"melville\", \"ovation\", \"monoxide\", \"kandahar\", \"tombs\", \"elemental\",\n    \"skinned\", \"eastman\", \"suffrage\", \"boyish\", \"headon\", \"eaters\", \"cornered\", \"modality\", \"waterways\", \"lowry\", \"xander\", \"softness\", \"globes\", \"podcasts\", \"revert\", \"ramps\",\n    \"scorched\", \"latte\", \"fonda\", \"stucco\", \"heaps\", \"commend\", \"basing\", \"cradling\", \"leakage\", \"murtaugh\", \"coupe\", \"macvicar\", \"spiraling\", \"stifled\", \"halting\", \"trapping\",\n    \"skillful\", \"stables\", \"degrade\", \"squint\", \"panelists\", \"greets\", \"wrenched\", \"pellets\", \"juncture\", \"roused\", \"portman\", \"furnish\", \"shutout\", \"lilburn\", \"sprained\", \"remarried\",\n    \"boosters\", \"trimming\", \"loudoun\", \"alters\", \"lambs\", \"studs\", \"tractors\", \"replete\", \"lifespan\", \"subtypes\", \"wrongful\", \"karaoke\", \"compliant\", \"glows\", \"rancho\", \"bourdieu\",\n    \"genealogy\", \"atonement\", \"namesake\", \"whoopi\", \"slums\", \"janeiro\", \"stair\", \"youll\", \"poole\", \"crowns\", \"aerobics\", \"stallion\", \"cylinders\", \"frosted\", \"upton\", \"revamped\",\n    \"jayz\", \"shingles\", \"fetched\", \"twofold\", \"senegal\", \"gulls\", \"foregoing\", \"throng\", \"thorns\", \"analyse\", \"dodged\", \"tinkering\", \"alexa\", \"marla\", \"chanted\", \"gorlen\",\n    \"morphin\", \"propriety\", \"widowed\", \"tremor\", \"signified\", \"gnarled\", \"warms\", \"fringes\", \"intl\", \"spooked\", \"collided\", \"elspeth\", \"lasagna\", \"reith\", \"garnett\", \"coils\",\n    \"disarray\", \"tailback\", \"frosty\", \"tillerson\", \"elisabeth\", \"thine\", \"leeks\", \"groping\", \"stocky\", \"righty\", \"finalized\", \"unease\", \"exclaims\", \"lauer\", \"snowden\", \"casing\",\n    \"peptide\", \"cavernous\", \"caress\", \"matured\", \"streep\", \"rehearsed\", \"hardcover\", \"coolly\", \"robby\", \"brunt\", \"geniuses\", \"footwear\", \"swarming\", \"clashed\", \"elegantly\", \"leveraged\",\n    \"mastering\", \"dulaney\", \"flowered\", \"relapse\", \"rodent\", \"acreage\", \"glinting\", \"sleepless\", \"encased\", \"peregrine\", \"illogical\", \"tacky\", \"attaching\", \"farrakhan\", \"evocative\", \"parades\",\n    \"musically\", \"quart\", \"improvise\", \"umpires\", \"couches\", \"wolff\", \"grimes\", \"trumps\", \"haunts\", \"commence\", \"wrapper\", \"earmarks\", \"spherical\", \"micah\", \"juniper\", \"allegra\",\n    \"lowly\", \"margarita\", \"whatnot\", \"petersen\", \"patched\", \"coerced\", \"shellfish\", \"crossings\", \"antigen\", \"pinning\", \"bared\", \"conroe\", \"prevails\", \"doorways\", \"stirfry\", \"collars\",\n    \"gritted\", \"augment\", \"clair\", \"kendrick\", \"felons\", \"settler\", \"fasten\", \"unloaded\", \"reverie\", \"hanoi\", \"purified\", \"pretext\", \"lightest\", \"chipotle\", \"carlyle\", \"hayek\",\n    \"mcintosh\", \"postage\", \"hodges\", \"superfund\", \"cruisers\", \"eternally\", \"platte\", \"swooped\", \"tendrils\", \"complying\", \"leadoff\", \"chernobyl\", \"rossi\", \"matisse\", \"rehearse\", \"flustered\",\n    \"undressed\", \"clasp\", \"handguns\", \"chartered\", \"squeal\", \"friggin\", \"formality\", \"ramsay\", \"bugging\", \"estonia\", \"affleck\", \"espoused\", \"unitary\", \"lifetimes\", \"hitherto\", \"moret\",\n    \"whooping\", \"radial\", \"reigns\", \"donahue\", \"treasured\", \"hubris\", \"newborns\", \"hamid\", \"elisa\", \"dryly\", \"circadian\", \"raincoat\", \"squirmed\", \"marbles\", \"ducking\", \"dumbbells\",\n    \"strives\", \"russo\", \"sonar\", \"parka\", \"subverted\", \"doubly\", \"grainy\", \"stools\", \"fairfield\", \"ranches\", \"falwell\", \"addison\", \"abramson\", \"skied\", \"mingle\", \"moroccan\",\n    \"roomy\", \"ascended\", \"reckoned\", \"netting\", \"symbolize\", \"gusts\", \"backups\", \"bookcase\", \"movin\", \"thicket\", \"cadre\", \"waffles\", \"sitter\", \"federer\", \"jabbed\", \"newscast\",\n    \"precepts\", \"seeped\", \"taxfree\", \"forested\", \"licks\", \"nicki\", \"sputtered\", \"curtail\", \"aromatic\", \"canvases\", \"hathaway\", \"wrenching\", \"reeve\", \"guerrero\", \"drinkers\", \"intercut\",\n    \"pleases\", \"bubbly\", \"skewers\", \"mined\", \"gracias\", \"grazed\", \"likable\", \"untie\", \"perished\", \"boutiques\", \"spotify\", \"glistened\", \"eruptions\", \"riddled\", \"frenchman\", \"mobil\",\n    \"youii\", \"bellies\", \"distaste\", \"grandkids\", \"usaid\", \"lauded\", \"oneday\", \"laidback\", \"arterial\", \"barbaric\", \"blossomed\", \"budgeting\", \"sneaked\", \"basins\", \"redshirt\", \"streetcar\",\n    \"goldwater\", \"cascades\", \"exogenous\", \"garry\", \"mccall\", \"wavering\", \"deadliest\", \"kayla\", \"confesses\", \"shrapnel\", \"antelope\", \"yellowed\", \"foxes\", \"allusion\", \"langdon\", \"pickups\",\n    \"worded\", \"condone\", \"primates\", \"cleavage\", \"eater\", \"networked\", \"darfur\", \"chimes\", \"syndicate\", \"annoy\", \"delve\", \"critters\", \"dogmatic\", \"retiree\", \"brianna\", \"mourners\",\n    \"harbors\", \"slalom\", \"lefties\", \"sittin\", \"tacked\", \"maris\", \"alfonso\", \"pastries\", \"chimps\", \"privy\", \"starched\", \"cello\", \"harkin\", \"lentils\", \"carefree\", \"coffers\",\n    \"blazed\", \"tweaks\", \"pedigree\", \"veritable\", \"chats\", \"dazzle\", \"reviving\", \"matheny\", \"sheppard\", \"billings\", \"prius\", \"woodson\", \"plissken\", \"spokane\", \"kepler\", \"rescuing\",\n    \"hermann\", \"marquez\", \"glitch\", \"pretrial\", \"disperse\", \"tristan\", \"scallops\", \"pavel\", \"scrawny\", \"selma\", \"plantings\", \"blight\", \"heron\", \"apologise\", \"keynes\", \"latency\",\n    \"radiator\", \"textured\", \"annabel\", \"cleverly\", \"coworker\", \"foray\", \"tutorials\", \"genitals\", \"heaped\", \"showcases\", \"annotated\", \"storied\", \"protons\", \"pigments\", \"peels\", \"hatched\",\n    \"slurs\", \"sisko\", \"dozed\", \"entrances\", \"greener\", \"trappings\", \"remington\", \"slander\", \"trashed\", \"rancher\", \"isolating\", \"bigots\", \"heartless\", \"beasley\", \"carousel\", \"shuttered\",\n    \"styled\", \"credence\", \"deranged\", \"realtors\", \"enveloped\", \"primers\", \"hastert\", \"walled\", \"mortals\", \"issuers\", \"breezy\", \"dilution\", \"landfall\", \"rivalries\", \"staked\", \"wideopen\",\n    \"sudanese\", \"paisley\", \"pamphlets\", \"colmes\", \"overruled\", \"drooping\", \"shimmered\", \"wallets\", \"defies\", \"parched\", \"pastime\", \"deflect\", \"barlow\", \"gripes\", \"mainline\", \"citadel\",\n    \"notoriety\", \"rationing\", \"laments\", \"jindal\", \"pacey\", \"alienate\", \"euphoria\", \"salinity\", \"haidt\", \"plugins\", \"bidder\", \"strenuous\", \"seeping\", \"wavered\", \"centauri\", \"prolong\",\n    \"sheik\", \"campsite\", \"deluded\", \"slits\", \"angler\", \"conundrum\", \"brood\", \"stoves\", \"dwellings\", \"shrinks\", \"breached\", \"wakefield\", \"impacting\", \"celiac\", \"hendricks\", \"trampled\",\n    \"balked\", \"vistas\", \"mangled\", \"perils\", \"bette\", \"offroad\", \"keyes\", \"whoop\", \"dreamers\", \"midair\", \"profess\", \"taxonomic\", \"shunned\", \"licensure\", \"droughts\", \"succumb\",\n    \"heats\", \"ferrell\", \"macedonia\", \"polishing\", \"opposites\", \"innocuous\", \"bigot\", \"primed\", \"bandits\", \"merritt\", \"menlo\", \"proofs\", \"blurring\", \"topnotch\", \"vignettes\", \"wherefore\",\n    \"sketchy\", \"dearborn\", \"vandalism\", \"parisian\", \"healy\", \"humbled\", \"brandt\", \"sparking\", \"scoffed\", \"hammock\", \"saith\", \"fictions\", \"shorthand\", \"stacking\", \"schiavo\", \"habitable\",\n    \"minuscule\", \"cabaret\", \"cameo\", \"waterway\", \"vigilance\", \"severance\", \"latitudes\", \"professed\", \"proton\", \"conley\", \"sweats\", \"quivered\", \"resection\", \"tropes\", \"brill\", \"raters\",\n    \"appease\", \"geologist\", \"henson\", \"unsteady\", \"sternly\", \"renters\", \"donned\", \"receded\", \"recharge\", \"raffalon\", \"prodded\", \"shameless\", \"impart\", \"hairline\", \"overlooks\", \"barns\",\n    \"ivanka\", \"earnestly\", \"bridal\", \"unloading\", \"voicing\", \"trawl\", \"kennedys\", \"juarez\", \"capers\", \"sprinted\", \"verde\", \"backlog\", \"forte\", \"manicured\", \"pendleton\", \"phonemic\",\n    \"filler\", \"baines\", \"onlookers\", \"palaces\", \"redirect\", \"levees\", \"satisfies\", \"rewritten\", \"fruition\", \"pantheon\", \"agility\", \"childlike\", \"dropouts\", \"seton\", \"albanian\", \"tranquil\",\n    \"blanks\", \"frenzied\", \"salvaged\", \"deletion\", \"jogged\", \"stave\", \"parasitic\", \"cadence\", \"geordi\", \"simms\", \"lifeline\", \"venous\", \"vitals\", \"recapture\", \"whitetail\", \"salience\",\n    \"paine\", \"dropbox\", \"pokes\", \"handset\", \"waterfowl\", \"polenta\", \"vertigo\", \"bunched\", \"masterful\", \"wielding\", \"plumes\", \"werent\", \"garages\", \"ellington\", \"delicacy\", \"pendant\",\n    \"meatballs\", \"heralded\", \"satanic\", \"embattled\", \"bowles\", \"reinhardt\", \"propane\", \"decoys\", \"authorial\", \"conjured\", \"rotted\", \"phased\", \"addie\", \"cannons\", \"quizzes\", \"copeland\",\n    \"stammered\", \"finnegan\", \"spurrier\", \"custard\", \"awarding\", \"rainwater\", \"worldcom\", \"laziness\", \"spinoza\", \"redefined\", \"liasson\", \"wasps\", \"bulldog\", \"mystique\", \"painless\", \"tampering\",\n    \"acronym\", \"essex\", \"taxis\", \"goodell\", \"shroud\", \"reels\", \"padilla\", \"showroom\", \"barnard\", \"snarky\", \"execs\", \"fillmore\", \"ascend\", \"superboy\", \"clans\", \"meteorite\",\n    \"subspace\", \"wayward\", \"expertly\", \"movers\", \"chime\", \"attaches\", \"pregame\", \"resorted\", \"couscous\", \"waded\", \"amman\", \"topple\", \"fourday\", \"sharif\", \"rosary\", \"negation\",\n    \"sharpen\", \"pegged\", \"decoy\", \"dismisses\", \"laureate\", \"midsummer\", \"breyer\", \"stunts\", \"donatello\", \"feeder\", \"rematch\", \"sayer\", \"paddling\", \"diseased\", \"barrow\", \"betraying\",\n    \"hapless\", \"handlebar\", \"feverish\", \"posit\", \"scrolling\", \"skaters\", \"rollers\", \"vests\", \"pollutant\", \"bookshelf\", \"chants\", \"trickled\", \"antivirus\", \"saltwater\", \"lingers\", \"episodic\",\n    \"governs\", \"marcie\", \"marred\", \"worcester\", \"surfers\", \"creases\", \"outliers\", \"auditions\", \"swears\", \"reprints\", \"delacroix\", \"lecturing\", \"bushy\", \"smarts\", \"theyll\", \"harvests\",\n    \"canary\", \"reclaimed\", \"utensils\", \"corollary\", \"subtract\", \"faltered\", \"kellogg\", \"endearing\", \"randal\", \"occupant\", \"starlight\", \"integer\", \"abramoff\", \"scorsese\", \"swarmed\", \"premiered\",\n    \"speckled\", \"howto\", \"gastric\", \"arcane\", \"deleting\", \"winking\", \"menendez\", \"ferdinand\", \"flatten\", \"brokaw\", \"cheery\", \"legacies\", \"thickly\", \"dizziness\", \"guzman\", \"groped\",\n    \"snarling\", \"gradients\", \"kline\", \"ovens\", \"messes\", \"libel\", \"oncology\", \"coincides\", \"configure\", \"rewriting\", \"bullish\", \"phrasing\", \"brimming\", \"seduction\", \"pollard\", \"beeps\",\n    \"whoosh\", \"senor\", \"openair\", \"panes\", \"tonal\", \"presidio\", \"proclaims\", \"craftsmen\", \"archy\", \"vacancies\", \"loudest\", \"sugary\", \"dalai\", \"squeaked\", \"mottled\", \"lunge\",\n    \"flocks\", \"crested\", \"booted\", \"tarnished\", \"dentists\", \"masse\", \"saban\", \"americana\", \"sorta\", \"lattice\", \"hippies\", \"stupidly\", \"paucity\", \"ponies\", \"debtors\", \"innuendo\",\n    \"realtor\", \"nephews\", \"wisps\", \"repaid\", \"rebounded\", \"scrapes\", \"displace\", \"grassley\", \"crutches\", \"fanciful\", \"pointers\", \"jameson\", \"occult\", \"frugal\", \"canister\", \"marketer\",\n    \"verne\", \"snails\", \"candor\", \"mansions\", \"exporters\", \"valentino\", \"barclays\", \"colds\", \"blisters\", \"studded\", \"sprouting\", \"devour\", \"fester\", \"purses\", \"denzel\", \"twirling\",\n    \"takeaway\", \"fiscally\", \"tradeoff\", \"dunlap\", \"forfeit\", \"angling\", \"saleh\", \"mugabe\", \"recoil\", \"revolve\", \"himher\", \"punks\", \"norville\", \"freer\", \"hanover\", \"romances\",\n    \"bloomed\", \"glinted\", \"barbra\", \"fervent\", \"aretha\", \"rowan\", \"clawing\", \"forlorn\", \"partake\", \"takeout\", \"rockfish\", \"demeaning\", \"vacated\", \"dialing\", \"amenable\", \"scoops\",\n    \"tiers\", \"jamming\", \"penalized\", \"cranked\", \"tweaking\", \"helpers\", \"excite\", \"comme\", \"riveting\", \"underlies\", \"overcast\", \"graces\", \"oozing\", \"levee\", \"limped\", \"enlighten\",\n    \"alluring\", \"artistry\", \"mediums\", \"mouthed\", \"pitts\", \"clipping\", \"warring\", \"backpacks\", \"morbid\", \"woolen\", \"northward\", \"dwindled\", \"enrolling\", \"quickest\", \"northside\", \"snipers\",\n    \"saddled\", \"additives\", \"covington\", \"discord\", \"coriander\", \"niches\", \"expectant\", \"depaul\", \"greats\", \"astray\", \"utilizes\", \"mcpherson\", \"donnelly\", \"bloodied\", \"walkin\", \"freedman\",\n    \"strangle\", \"cahill\", \"sweetened\", \"stuffy\", \"entree\", \"deirdre\", \"knobs\", \"rations\", \"lenora\", \"ranting\", \"resonated\", \"optic\", \"nasser\", \"webpage\", \"maddox\", \"thinned\",\n    \"squirming\", \"innocents\", \"creighton\", \"soulful\", \"muses\", \"hedgehog\", \"spines\", \"errant\", \"maples\", \"mutters\", \"interacts\", \"layering\", \"theta\", \"bindings\", \"jayne\", \"manicure\",\n    \"jonbenet\", \"throwback\", \"wounding\", \"tinnitus\", \"apricot\", \"courteous\", \"palatable\", \"stanza\", \"censor\", \"haggard\", \"amplify\", \"scots\", \"debatable\", \"screeched\", \"passover\", \"toned\",\n    \"martyrdom\", \"stomp\", \"tilts\", \"subpoenas\", \"idling\", \"midsize\", \"selfless\", \"defaults\", \"radiated\", \"deities\", \"gangsters\", \"praxis\", \"bassist\", \"humiliate\", \"lockhart\", \"villanova\",\n    \"partisans\", \"breezes\", \"basra\", \"scotia\", \"stalling\", \"cordelia\", \"secretion\", \"farmed\", \"tumour\", \"compiling\", \"concur\", \"throbbed\", \"plaques\", \"meditate\", \"upsets\", \"graze\",\n    \"basque\", \"posturing\", \"frist\", \"cartons\", \"carvings\", \"newsmaker\", \"tully\", \"shivers\", \"cortez\", \"annuity\", \"castiron\", \"lockers\", \"mcmillan\", \"hotly\", \"sheehan\", \"preamble\",\n    \"ramadan\", \"twine\", \"lunges\", \"brees\", \"ladders\", \"darby\", \"polluting\", \"rowdy\", \"crabtree\", \"unveiling\", \"flanagan\", \"cleans\", \"cravings\", \"mathews\", \"emptying\", \"backfire\"\n];\n\n", "// (c) 2023 384 (tm)\n\n// This is an separate module to facilitate code density\n\nimport { generatePassPhrase, generateStrongKey, recreateStrongKey } from './strongphrase';\n\n/** @public */\nexport const strongphrase = {\n    generate: generatePassPhrase,\n    toKey: generateStrongKey,\n    recreateKey: recreateStrongKey\n};\n", "// (c) 2024 384 (tm)\n\n/**\n * (c) 2024 384 (tm)\n *\n * AsyncSequence implements general operations on an async sequence of items.\n *\n * Transformations:\n * - map()       : projects each element to another value\n * - flatMap()   : projects each element to another sequence, then flattens\n *\n * Filtering:\n * - filter()    : filters elements based on a predicate, keeping only those\n *                 that evaluate to 'true'\n *\n * Truncation and Limits:\n * - take()        : limits the sequence to the first 'n' elements\n * - takeWhile()   : limits the sequence as long as a predicate is true\n * - limitUntil()  : similar to 'takeWhile()', but in reverse logic\n * - skip()        : skips the first 'n' elements, emitting the rest\n * - skipWhile()   : skips elements as long as a predicate is true\n * - skipUntil()   : similar to 'skipWhile()', but in reverse logic\n *\n * Combining, Merging, Splitting:\n * - concat()      : concatenates two sequences into one, starting the second\n *   when the first is done\n * - merge()       : merges two sequences into one, emitting as soon as any of\n *   the sources emits\n * - zip()         : combines two sequences into a single sequence of pairs\n *\n * Consumers / Aggregators:\n * - reduce()      : reduces the sequence to a single value\n * - toArray()     : collects all elements in the sequence into an array\n * - find()        : finds the first element that matches a predicate\n * - any()         : checks if any element in the sequence matches a predicate\n * - some()        : alias for 'any()'\n * - every()       : checks if all elements in the sequence match a predicate\n * - none()        : checks if no elements in the sequence match a predicate\n * - count()       : counts the number of elements in the sequence\n * - first()       : returns the first element of the sequence\n * - last()        : returns the last element of the sequence\n *\n */\nexport class AsyncSequence<T> implements AsyncIterable<T> {\n\n    /**\n     * Generally available to any subclasses to coordinate\n     * 'remainders' from any (optimized) skip operations.\n     */\n    residualSkipValue = 0;\n\n    /**\n     * Providing source on creation is optional, and it\n     * can be changed dynamically.\n     */\n    constructor(private _source?: AsyncIterable<T>) { }\n\n    set source(value) { this._source = value; }\n    get source() {\n        if (!this._source) throw new Error(\"No source for the sequence\");\n        return this._source;\n    }\n\n    get residualSkip(): number {\n        return this.residualSkipValue;\n    }\n    set residualSkip(value: number) {\n        this.residualSkipValue = value;\n    }\n\n    // Transformations\n\n    /**\n     * Projects each element of the sequence to another value.\n     */\n    map<U>(fn: (value: T) => U | Promise<U>): AsyncSequence<U> {\n        const source = this.source;\n        const mapped = async function* () {\n            for await (const item of source)\n                yield await fn(item);\n        };\n        return new AsyncSequence(mapped());\n    }\n\n    /** Concatenates (or 'flatens') the sequence, enforces serialization */\n    concatMap<U>(fn: (value: T) => Iterable<U> | AsyncIterable<U>): AsyncSequence<U> {\n        const source = this.source;\n        const flatMapped = async function* () {\n            for await (const item of source) {\n                const mapped = fn(item);\n                if (!mapped) continue;\n                if (typeof (mapped as AsyncIterable<U>)[Symbol.asyncIterator] === 'function') {\n                    for await (const subItem of mapped as AsyncIterable<U>) yield subItem;\n                } else if (typeof (mapped as Iterable<U>)[Symbol.iterator] === 'function') {\n                    for (const subItem of mapped as Iterable<U>) yield subItem;\n                } else {\n                    throw new Error(\"The function provided to flatMap must return an Iterable or AsyncIterable\");\n                }\n            }\n        };\n        return new AsyncSequence(flatMapped());\n    }\n\n    /** Concatenates (or 'flatens') the sequence. Unless overriden, will enforce serialization. */\n    flatMap<U>(fn: (value: T) => Iterable<U> | AsyncIterable<U>): AsyncSequence<U> {\n        // override this if you want 'flatMap()' to allow concurrent processing\n        return this.concatMap(fn);\n    }\n\n    /** Same as concatMap() but allows asynchronicity/parallelism. Note implemented in base class. */\n    mergeMap<U>(_fn: (value: T) => Iterable<U> | AsyncIterable<U>): AsyncSequence<U> {\n        // for convenience, you can use this to make sure that there is a concurrent\n        // version that's used (eg you need to implement both 'flatMap()' and then\n        // 'mergeMap()' as an alias)\n        throw new Error(\"'mergeMap()' has not been overriden from base, and base flatMap() does not support concurrency.\");\n    }\n\n    // Filtering\n\n    filter(predicate: (value: T) => boolean | Promise<boolean>): AsyncSequence<T> {\n        const source = this.source;\n        const filtered = async function* () {\n            for await (const item of source) {\n                if (await predicate(item))\n                    yield item;\n            }\n        };\n        return new AsyncSequence(filtered());\n    }\n\n\n    // Truncation and Limits\n\n    /**\n     * Yields elements as long as the predicate is true, and then stops.\n     * Equivalent to 'limitUntil()' with the predicate negated.\n     */\n    takeWhile(predicate: (value: T) => boolean | Promise<boolean>): AsyncSequence<T> {\n        const source = this.source;\n        const taken = async function* () {\n            for await (const item of source) {\n                if (!(await predicate(item))) return;\n                yield item;\n            }\n        };\n        return new AsyncSequence(taken());\n    }\n\n    /** Limits the sequence to the first 'count' elements */\n    take(count: number): AsyncSequence<T> {\n        const source = this.source;\n        const taken = async function* () {\n            let takenCount = 0;\n            for await (const item of source) {\n                if (takenCount >= count) return;\n                yield item;\n                takenCount++;\n            }\n        };\n        return new AsyncSequence(taken());\n    }\n\n    /**\n     * Skips elements as long as predicate is true, and then emits the first\n     * element for which the predicate is false and all subsequent elements. If\n     * the predicate is false for the first element, the entire sequence will be\n     * emitted. If the predicate never evaluates to false, the resulting\n     * sequence will be empty. Equivalent to 'skipUntil()' with the predicate\n     * negated.\n     */\n    skipWhile(predicate: (value: T) => boolean | Promise<boolean>): AsyncSequence<T> {\n        const source = this.source;\n        const skipped = async function* () {\n            let skipping = true;\n            for await (const item of source) {\n                if (skipping && !(await predicate(item))) skipping = false;\n                if (!skipping) yield item;\n            }\n        };\n        return new AsyncSequence(skipped());\n    }\n\n    /**\n     * Skips elements as long as the predicate is false. The first element for\n     * which the predicate is true will be emitted and the sequence will\n     * continue from there. If the predicate is true for the first element,\n     * the entire sequence will be emitted. If the predicate never evaluates\n     * to true, the resulting sequence will be empty. Equivalent to 'skipWhile()'\n     * with the predicate negated.\n    */\n    skipUntil(predicate: (value: T) => boolean | Promise<boolean>): AsyncSequence<T> {\n        return this.skipWhile(async (value) => !(await predicate(value)));\n    }\n\n    /** Skips the first 'count' elements */\n    skip(count: number): AsyncSequence<T> {\n        return this.skipWhile(async () => count-- > 0);\n    }\n\n    /**\n     * All elements will be emitted until the predicate evaluates to true, at\n     * which point the sequence will stop. If the predicate is true for the\n     * first element, the resulting sequence will be empty. This is the same\n     * as 'takeWhile()' with the predicate negated.\n     */\n    limitUntil(predicate: (value: T) => boolean | Promise<boolean>): AsyncSequence<T> {\n        return this.takeWhile(async (value) => !(await predicate(value)));\n    }\n\n\n    // Combining, Merging, Splitting\n\n    /**\n     * Concatenates two sequences into one, starting the second when the first\n     * is done. Note if you have derived classes with optimizations for any\n     * of the AsyncSequence methods, eg a smarter 'skip()', then those\n     * will be ignored when using 'concat()' (eg you would need to override\n     * 'concat()' to make sure that the optimizations are applied).\n     */\n    concat(other: AsyncSequence<T>) {\n        const myThis = this;\n        const concatted = async function* () {\n            yield* myThis.source;\n            yield* other.source;\n        };\n        return new AsyncSequence(concatted());\n    }\n\n    /**\n     * Merge() - merges two sequences into one, emitting as soon as any of the sources emits\n     */\n    merge(other: AsyncSequence<T>): AsyncSequence<T> {\n        const source = this.source;\n        const merged = async function* () {\n            const iterators = [source[Symbol.asyncIterator](), other[Symbol.asyncIterator]()];\n            const results = iterators.map((it) => it.next());\n\n            while (results.length > 0) {\n                try {\n                    const { value, done } = await Promise.race(results);\n                    const index = results.findIndex(p => p === Promise.resolve({ value, done }));\n                    if (done) {\n                        // Remove the iterator that's done\n                        iterators.splice(index, 1);\n                        results.splice(index, 1);\n                    } else {\n                        yield value;\n                        // Replace the resolved promise with the next one\n                        results[index] = iterators[index].next();\n                    }\n                } catch (err) {\n                    throw err;\n                }\n            }\n        };\n        return new AsyncSequence(merged());\n    }\n\n\n    /**\n     * Combines two sequences into a single sequence of pairs\n     */\n    zip<U>(other: AsyncSequence<U>): AsyncSequence<[T, U]> {\n        const source = this.source;\n        const zipped = async function* () {\n            const sourceIterator = source[Symbol.asyncIterator]();\n            const otherIterator = other[Symbol.asyncIterator]();\n            while (true) {\n                const sourceResult = await sourceIterator.next();\n                const otherResult = await otherIterator.next();\n                if (sourceResult.done || otherResult.done) break;\n                yield [sourceResult.value, otherResult.value] as [T, U];\n            }\n        }\n        return new AsyncSequence(zipped());\n    }\n\n    // Consuming / Aggregating / Seeking\n\n    /** Consumes and executes given predicate for each element */\n    async forEach(fn: (value: T) => void | Promise<void>): Promise<void> {\n        for await (const item of this.source)\n            await fn(item);\n    }\n\n    /** Applies a function against an accumulator and each element in the sequence */\n    async reduce<U>(\n        fn: (accumulator: U, value: T) => U | Promise<U>,\n        initialValue: U\n    ): Promise<U> {\n        let acc = initialValue;\n        for await (const item of this.source)\n            acc = await fn(acc, item);\n        return acc;\n    }\n\n    async toArray(): Promise<T[]> {\n        const result: T[] = [];\n        for await (const item of this.source)\n            result.push(item);\n        return result;\n    }\n\n    /** Returns true if the predicate evaluates to true for ANY element */\n    async any(predicate: (value: T) => boolean | Promise<boolean>): Promise<boolean> {\n        for await (const item of this.source)\n            if (await predicate(item)) return true;\n        return false;\n    }\n\n    /** 'some()' is alias for 'any()' */\n    async some(predicate: (value: T) => boolean | Promise<boolean>): Promise<boolean> {\n        return this.any(predicate);\n    }\n\n    /** Returns true if the predicate evaluates to true for EVERY element */\n    async every(predicate: (value: T) => boolean | Promise<boolean>): Promise<boolean> {\n        for await (const item of this.source)\n            if (!await predicate(item)) return false;\n        return true;\n    }\n\n    /** Inverse of 'any()', evaluates to true if there is no element for which\n     * the predicate evaluates to true */\n    async none(predicate: (value: T) => boolean | Promise<boolean>): Promise<boolean> {\n        return !(await this.any(predicate));\n    }\n\n    /** Returns the first element for which the predicate evaluates to true */\n    async find(predicate: (value: T) => boolean | Promise<boolean>): Promise<T | undefined> {\n        for await (const item of this.source)\n            if (await predicate(item)) return item;\n        return undefined;\n    }\n\n    /** Return the first element of the sequence */\n    async first(): Promise<T | undefined> {\n        return (await this.take(1).toArray())[0];\n    }\n\n    /** Returns the last element of the sequence */\n    async last(): Promise<T | undefined> {\n        let last: T | undefined = undefined;\n        for await (const item of this.source)\n            last = item;\n        return last;\n    }\n\n    /** Returns the number of elements in the sequence */\n    async count(): Promise<number> {\n        let count = 0;\n        for await (const _ of this.source) count++;\n        return count;\n    }\n\n    /**\n     * Given an index 'N', returns the Nth element of the sequence.\n     */\n    async elementAt(index: number): Promise<T | undefined> {\n        return this.skip(index).first();\n    }\n\n    [Symbol.asyncIterator](): AsyncIterator<T> {\n        return this.source[Symbol.asyncIterator]();\n    }\n}\n", "// (c) 2023-2024 384 (tm)\n\n// src/browser/files.ts\n\n// handle browser-to-file-system environment\n\n// NOTA BENE: if you change things here in any fundamental way, make sure it's\n// working on multiple browsers, since they have different behaviors in this\n// area, some differences are subtle.  We target Firefox, Chrome, Edge, and\n// Safari, and on MacOS, Windows, and Linux. It should work on other browsers\n// and/or platforms, but we don't necessarily test too carefully on others. In\n// fact this code will try several things, all of which do not work on *any* of\n// the browsers, but tries to construct a 'union' of information.\n\n// An example is handling empty, eg 'dangling', directories, which we currently\n// disable; if you re-enable this, you have work to do.\nconst SKIP_DIR = true;\n\n// Contrary to our instincts, we try hard to execute synchronously in this code,\n// because the order in which bits and pieces of information arrive is\n// important. For example, we try to process a directory before it's contents,\n// because, depending on the browser, there is sometimes explicit information in\n// the directory, in other cases that same information can sometimes be derived\n// from the files.\n\n// TODO: does NOT handle two identical files in different directories; this\n//       turns out to be a painpoint since rolling up web apps often have\n//       the effect of copying files around (eg our documentation)\n\nimport { ChannelApi } from 'src/channel/ChannelApi';\nimport { arrayBufferToBase62 } from 'src/utils/b62';\nimport { StorageApi } from 'src/storage/StorageApi';\nimport { SBFile } from 'src/file/SBFile';\n\nconst DBG0 = false;\nconst DBG2 = false; // more verbose\nconst DEBUG3 = false; // etc\n\nconst SEP = '\\n' + '-'.repeat(80) + '\\n';\n\n//#region HELPER FUNCTIONS ************************************************************************************************\n\n// helper function to pull properties of interest out, resilient\n// to what is available on the object/class/whatever\n// const fileInfo = { ...getProperties(fileObject, propertyList) };\n\nfunction getProperties(obj: any, propertyList: Array<string>) {\n    const properties: { [key: string]: any } = {};\n    // First priority: regular properties (directly on the object)\n    propertyList.forEach((property) => {\n        if (obj.hasOwnProperty(property)) {\n            properties[property] = obj[property];\n        }\n    });\n    // Second priority: own properties (from Object.getOwnPropertyNames)\n    Object.getOwnPropertyNames(obj).forEach((property) => {\n        if (propertyList.includes(property) && !properties.hasOwnProperty(property)) {\n            properties[property] = obj[property];\n        }\n    });\n    // Third priority: properties up the prototype chain (from for...in loop)\n    for (const property in obj) {\n        if (propertyList.includes(property) && !properties.hasOwnProperty(property)) {\n            properties[property] = obj[property];\n        }\n    }\n    return properties;\n}\n\n/**\n * Tries to figure out MIME type based on file extension. If it can't,\n * it will return undefined.\n * @internal\n */\nexport function getMimeType(fileName: string | undefined): string | undefined {\n    if (!fileName) return undefined;\n    fileName = fileName.trim().toLowerCase();\n    // Mapping of file extensions to MIME types\n    // for 'unofficial' mappings, a future [todo] could include reviewing the\n    // National Software Reference Library (NSRL) Reference Data Set (RDS) for file types\n    const MIME_TYPES: Record<string, string> = {\n        '.aac': 'audio/aac',   // AAC audio\n        '.abw': 'application/x-abiword',   // AbiWord\u00A0document\n        '.arc': 'application/x-freearc',   // Archive document (multiple files embedded)\n        '.avif': 'image/avif',   // AVIF image\n        '.avi': 'video/x-msvideo',   // AVI: Audio Video Interleave\n        '.azw': 'application/vnd.amazon.ebook',   // Amazon Kindle eBook format\n        '.bin': 'application/octet-stream',   // Any kind of binary data\n        '.bmp': 'image/bmp',   // Windows OS/2 Bitmap Graphics\n        '.bz': 'application/x-bzip',   // BZip archive\n        '.bz2': 'application/x-bzip2',   // BZip2 archive\n        '.cda': 'application/x-cdf',   // CD audio\n        '.csh': 'application/x-csh',   // C-Shell script\n        '.css': 'text/css',   // Cascading Style Sheets (CSS)\n        '.csv': 'text/csv',   // Comma-separated values (CSV)\n        '.doc': 'application/msword',   // Microsoft Word\n        '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',   // Microsoft Word (OpenXML)\n        '.eot': 'application/vnd.ms-fontobject',   // MS Embedded OpenType fonts\n        '.epub': 'application/epub+zip',   // Electronic publication (EPUB)\n        '.gz': 'application/gzip',   // GZip Compressed Archive\n        '.gif': 'image/gif',   // Graphics Interchange Format (GIF)\n        '.htm': 'text/html',   // HyperText Markup Language (HTML)\n        '.html': 'text/html',   // HyperText Markup Language (HTML)\n        '.ico': 'image/vnd.microsoft.icon',   // Icon format\n        '.ics': 'text/calendar',   // iCalendar format\n        '.jar': 'application/java-archive',   // Java Archive (JAR)\n        '.jpeg': 'image/jpeg',   // JPEG images\n        '.jpg': 'image/jpeg',   // JPEG images\n        '.js': 'text/javascript',   // JavaScript (Specifications:\u00A0HTML\u00A0and\u00A0RFC 9239)\n        '.json': 'application/json',   // JSON format\n        '.jsonld': 'application/ld+json',   // JSON-LD format\n        '.mid': 'audio/midi',   // Musical Instrument Digital Interface (MIDI)\n        '.midi': 'audio/midi',   // Musical Instrument Digital Interface (MIDI)\n        '.mjs': 'text/javascript',   // JavaScript module\n        '.mp3': 'audio/mpeg',   // MP3 audio\n        '.mp4': 'video/mp4',   // MP4 video\n        '.m4a': 'audio/mp4',   // M4A audio\n        '.m4b': 'audio/mp4',   // M4A audio\n        '.mpeg': 'video/mpeg',   // MPEG Video\n        '.mpkg': 'application/vnd.apple.installer+xml',   // Apple Installer Package\n        '.odp': 'application/vnd.oasis.opendocument.presentation',   // OpenDocument presentation document\n        '.ods': 'application/vnd.oasis.opendocument.spreadsheet',   // OpenDocument spreadsheet document\n        '.odt': 'application/vnd.oasis.opendocument.text',   // OpenDocument text document\n        '.oga': 'audio/ogg',   // OGG audio\n        '.ogv': 'video/ogg',   // OGG video\n        '.ogx': 'application/ogg',   // OGG\n        '.opus': 'audio/opus',   // Opus audio\n        '.otf': 'font/otf',   // OpenType font\n        '.png': 'image/png',   // Portable Network Graphics\n        '.pdf': 'application/pdf',   // Adobe\u00A0Portable Document Format\u00A0(PDF)\n        '.php': 'application/x-httpd-php',   // Hypertext Preprocessor (Personal Home Page)\n        '.ppt': 'application/vnd.ms-powerpoint',   // Microsoft PowerPoint\n        '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',   // Microsoft PowerPoint (OpenXML)\n        '.rar': 'application/vnd.rar',   // RAR archive\n        '.rtf': 'application/rtf',   // Rich Text Format (RTF)\n        '.sh': 'application/x-sh',   // Bourne shell script\n        '.svg': 'image/svg+xml',   // Scalable Vector Graphics (SVG)\n        '.tar': 'application/x-tar',   // Tape Archive (TAR)\n        '.tif': 'image/tiff',   // Tagged Image File Format (TIFF)\n        '.tiff': 'image/tiff',   // Tagged Image File Format (TIFF)\n        '.ts': 'video/mp2t',   // MPEG transport stream\n        '.ttf': 'font/ttf',   // TrueType Font\n        '.txt': 'text/plain',   // Text, (generally ASCII or ISO 8859-n)\n        '.vsd': 'application/vnd.visio',   // Microsoft Visio\n        '.wasm': 'application/wasm',   // WebAssembly\n        '.wav': 'audio/wav',   // Waveform Audio Format\n        '.weba': 'audio/webm',   // WEBM audio\n        '.webm': 'video/webm',   // WEBM video\n        '.webp': 'image/webp',   // WEBP image\n        '.woff': 'font/woff',   // Web Open Font Format (WOFF)\n        '.woff2': 'font/woff2',   // Web Open Font Format (WOFF)\n        '.xhtml': 'application/xhtml+xml',   // XHTML\n        '.xls': 'application/vnd.ms-excel',   // Microsoft Excel\n        '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',   // Microsoft Excel (OpenXML)\n        '.xml': 'application/xml',   // XML\n        '.xul': 'application/vnd.mozilla.xul+xml',   // XUL\n        '.zip': 'application/zip',   // ZIP archive\n        '.7z': 'application/x-7z-compressed',   // 7-zip\u00A0archive\n    };\n\n    // Extract the file extension from the file name\n    const fileExtension = fileName.slice(fileName.lastIndexOf('.'));\n\n    // Return the MIME type if it exists in the mapping, or an empty string otherwise\n    const t = MIME_TYPES[fileExtension];\n    if (t) return t;\n    else {\n        console.warn(\"Note, cannot figure out MIME type for file extension: \" + fileExtension);\n        return undefined\n    }\n}\n//#endregion HELPER FUNCTIONS ************************************************************************************************\n\n//#region TYPESCRIPT TYPES ETC ************************************************************************************************\n\n// browser behavior is not always captured by standard typescript headers, for\n// example, Microsoft header files don't support some Safari behavior; so we\n// need some definitions of our own\n\n// FileEntry is non standard ... so we need to have some definitions \ninterface Entry {\n    isFile: boolean;\n    isDirectory: boolean;\n    name: string;\n    fullPath: string;\n    filesystem: FileSystem;\n    getMetadata(successCallback: MetadataCallback, errorCallback?: ErrorCallback): void;\n}\ninterface FileSystemFileEntry extends Entry {\n    isFile: true;\n    isDirectory: false;\n    file(successCallback: FileCallback, errorCallback?: ErrorCallback): void;\n}\n\ninterface Metadata {\n    modificationTime: Date;\n    size: number;\n}\ntype MetadataCallback = (metadata: Metadata) => void;\ntype ErrorCallback = (error: DOMException) => void;\ntype FileCallback = (file: File) => void;\n\ninterface CustomEventTarget extends EventTarget {\n    files?: FileList;\n    items?: DataTransferItemList;\n}\n\n/** @internal */\nexport interface BrowserFileMetaData {\n    name?: string;\n    fullPath?: string;\n    size?: number;\n    type?: string;\n    file?: (successCallback: FileCallback, errorCallback?: ErrorCallback) => void;\n    lastModified?: number;\n    lastModifiedDate?: Date;\n    webkitRelativePath?: string;\n    isDirectory?: boolean;\n    isFile?: boolean;\n    getMetaDataName?: string;\n    getMetaDataSize?: number;\n    getMetaDataType?: string;\n    getMetaDataLastModified?: number;\n    getMetaDataGetFileError?: any;\n    getMetaDataModificationTime?: Date;\n    getMetaDataFile?: File;\n    getMetaDataError?: string;\n    noGetMetaData?: boolean;\n}\n\n//#endregion TYPESCRIPT TYPES ETC ************************************************************************************************\n\n// these are the properties that we (potenially) care about\nconst propertyList = [\n    'lastModified', 'name', 'type', 'size', 'webkitRelativePath', 'fullPath', 'isDirectory', 'isFile',\n    'SBitemNumber', 'SBitemNumberList', 'fileContentCandidates', 'fileContents', /* 'uniqueShardId', */ 'hash', // 20220320\n    'SBparentEntry', 'SBparentNumber', 'SBfoundMetaData', 'SBfullName',\n    'browserFile', 'SBdirectoryReader', 'motherObject', 'webkitRelativePath',\n];\n\n// Global counter utility; works well with async/await etc\nconst createCounter = () => {\n    let counter = 0;\n    const inc = async (): Promise<number> => {\n        await new Promise((resolve) => setTimeout(resolve, 0)); // Simulate asynchronous operation\n        counter++;\n        return counter - 1; // we count starting at zero\n    };\n    return { inc };\n};\n\nlet printedWarning = false;\n\n/** @internal */\nexport function printWarning() {\n    if (!printedWarning) {\n        console.log(\"================================================\")\n        console.log(\"Warning: you are running in 'local web page' mode\")\n        console.log(\"on a browser that has some restrictions.\");\n        console.log(\"\");\n        console.log(\"So far, looks like this browser will not let you\");\n        console.log(\"navigate *into* directories that are drag-and-dropped\");\n        console.log(\"Might also be having issues getting meta data,\");\n        console.log(\"as well as getting the 'full' path of the file.\");\n        console.log(\"============================================\")\n        printedWarning = true;\n    }\n    if ((globalThis as any).directoryDropText)\n        (globalThis as any).directoryDropText!.innerHTML = \"Click to choose directories<br />(drag and drop might not work))\";\n\n}\n\nclass BrowserFile extends SBFile {\n    fileContentCandidates?: Array<BrowserFile>;\n    isDirectory?: boolean;\n    isFile?: boolean;\n    motherObject?: File | FileSystemEntry | FileSystemFileEntry\n    SBdirectoryReader?: FileSystemDirectoryReader;\n    SBfoundMetaData?: any\n    SBfullName?: string;\n    SBitemNumber?: number;\n    SBitemNumberList?: Array<number>;\n    SBparentEntry?: FileSystemEntry | FileSystemFileEntry;\n    SBparentNumber?: number;\n    webkitRelativePath?: string;\n\n    constructor(fileInfo?: {\n        [key: string]: any;\n    }) {\n        super(fileInfo);\n        this.fileContentCandidates = fileInfo?.fileContentCandidates;\n        this.isDirectory = fileInfo?.isDirectory;\n        this.isFile = fileInfo?.isFile;\n        this.motherObject = fileInfo?.motherObject;\n        this.SBdirectoryReader = fileInfo?.SBdirectoryReader;\n        this.SBfoundMetaData = fileInfo?.SBfoundMetaData;\n        this.SBfullName = fileInfo?.SBfullName;\n        this.SBitemNumber = fileInfo?.SBitemNumber;\n        this.SBitemNumberList = fileInfo?.SBitemNumberList;\n        this.SBparentEntry = fileInfo?.SBparentEntry;\n        this.SBparentNumber = fileInfo?.SBparentNumber;\n        this.webkitRelativePath = fileInfo?.webkitRelativePath;\n    }\n}\n\n/**\n * This class supports parsing any files or directories that have been selected\n * by the UI, whether through a file input or a drag-and-drop operation\n *\n * The key data structures to access are (both global):\n *\n *   finalFileList: a map of all files that have been processed (maps from 'full\n *                  file name' in the context of the set, to SBFile)\n *\n * globalBufferMap: a map of all array buffers that have been read (or 'seen');\n *                  maps hash (of contents) to ArrayBuffers\n *\n * These are accumulative and do not reset on any UI interaction that this class\n * can see: they need to be explicitly cleared by the application.\n * \n * Here is roughly how you would wire things up from a UI:\n * \n *   const sbFileHelper = new BrowserFileHelper();\n * \n *   const fileDropZone = document.getElementById('fileDropZone');\n *   const directoryDropZone = document.getElementById('directoryDropZone');\n *\n *   fileDropZone.addEventListener('drop', fileHelper.handleFileDrop);\n *   directoryDropZone.addEventListener('drop', fileHelper.handleDirectoryDrop);\n *\n *   fileDropZone.addEventListener('click', fileHelper.handleFileClick);\n *   directoryDropZone.addEventListener('click', fileHelper.handleDirectoryClick);\n *\n * Note that browsers _fundamentally_ differ on these four different ways of getting\n * files into a browser (eg either 'drop' or 'click', and from a )\n * \n * @public\n */\nexport class BrowserFileHelper {\n\n    public static version = \"3.20240407.1\"\n\n    // accumulative; any files this class sees and understands are added; each\n    // BrowserFileHelper has it's own set. note that this can be modified\n    // externally, including cleared.\n    public finalFileList: Map<string, SBFile> = new Map();\n\n    public currentFileList: Array<SBFile> = [];\n\n    // buffers (file contents) are tracked in two places, and any given one\n    // should _not_ be in both. there is 'ChannelApi.knownShards', shards that\n    // we've seen and know the handle for; and 'knownBuffers' buffers we (any\n    // BrowserFileHelper) have seen but are NOT in knownShards; meaning, they have\n    // either not been saved (yet), or we just don't know the handle.\n\n    public static knownBuffers = new Map<string, ArrayBuffer>();\n\n    // knownShards moved to ChannelApi.knownShards\n    // public static knownShards: Map<string, ObjectHandle> = new Map();\n\n    // set of file names that should be ignored (e.g. .DS_Store)\n    #ignoreFileSet = new Set()\n\n    // give any file or item 'seen' by this instance a unique number (reset on\n    // every UI interaction)\n    #itemNumber = createCounter();\n\n    // if there are items, files will at first be numbered the same (reset on\n    // every UI interaction)\n    #fileItemNumber = createCounter();\n\n    // all of our scanning results go here, unabridged (reset on every UI interaction)\n    #globalFileMap: Map<string, BrowserFile> = new Map();\n\n    // this is the distilled list of files we will add to finalFileList (reset on every UI interaction)\n    #currentFileList: Map<string, BrowserFile> = new Map();\n\n    // 20220320 - changing this, given changes to storage api\n    // // (global) track all (unique) array buffers that have been read (NOT reset)\n    // // todo: strictly speaking we don't garbage collect this\n    // public static globalBufferMap = new Map();\n\n    constructor(\n        public callbacks: {\n            processNewTable?: (table: Array<SBFile>) => void,\n            // uploadSet: (set: Array<SBFile>) => void,\n        }\n    ) {\n        // add some files to ignore, if the come along with a drag-and-drop\n        this.#ignoreFileSet.add(\".DS_Store\");\n        this.#ignoreFileSet.add(\"/.DS_Store\");\n        // add a regex to catch emacs backup files\n        this.#ignoreFileSet.add(/.*~$/);\n        // console.log(this)\n    }\n\n    /**\n     * Adds file type to the 'ignore' list.\n     */\n    ignoreFile(fileName: string): boolean {\n        if (this.#ignoreFileSet.has(fileName)) return true;\n        for (let ignoreFile of this.#ignoreFileSet)\n            if (ignoreFile instanceof RegExp)\n                if (ignoreFile.test(fileName))\n                    return true;\n        return false;\n    }\n\n    //#region SCAN ITEMS AND FILES ****************************************************************************************\n\n    // these are called by the UI code to parse any files or directories that have been selected\n    // by the UI, whether through a file input or a drag-and-drop operation\n\n    // returns metadata for a file object whether it is a File or FileEntry\n    private extractFileMetadata(fileObject: File | FileSystemEntry | FileSystemFileEntry): Promise<BrowserFileMetaData> {\n        function localResolve(metadata: BrowserFileMetaData): BrowserFileMetaData {\n            // console.log(\"Extracted metadata:\");\n            // console.log(metadata);\n            return metadata;\n        }\n        return new Promise<BrowserFileMetaData>((resolve) => {\n            const metadata: BrowserFileMetaData = {} as BrowserFileMetaData;\n            // console.log(\"Extracting metadata from object:\");\n            // console.log(fileObject);\n            if (fileObject instanceof File) {\n                if (fileObject.name)\n                    metadata.name = fileObject.name;\n                if (fileObject.size)\n                    metadata.size = fileObject.size;\n                if (fileObject.type)\n                    metadata.type = fileObject.type;\n                if (fileObject.lastModified)\n                    metadata.lastModified = fileObject.lastModified;\n                if (fileObject.webkitRelativePath)\n                    metadata.webkitRelativePath = fileObject.webkitRelativePath;\n            }\n            if ((typeof FileSystemEntry !== \"undefined\") && (fileObject instanceof FileSystemEntry)) {\n                if (fileObject.name)\n                    metadata.name = fileObject.name;\n                if (fileObject.fullPath)\n                    metadata.fullPath = fileObject.fullPath;\n                if (fileObject.isDirectory !== undefined)\n                    metadata.isDirectory = fileObject.isDirectory;\n                if (fileObject.isFile !== undefined)\n                    metadata.isFile = fileObject.isFile;\n                metadata.noGetMetaData = true;\n            }\n            if ((typeof FileSystemFileEntry !== \"undefined\") && (fileObject instanceof FileSystemFileEntry)) {\n                if (fileObject.fullPath)\n                    metadata.fullPath = fileObject.fullPath;\n                // if it's there, not so important:\n                // if (fileObject.lastModifiedDate)\n                //     metadata.lastModifiedDate = fileObject.lastModifiedDate;\n                if (fileObject.isDirectory !== undefined)\n                    metadata.isDirectory = fileObject.isDirectory;\n                if (fileObject.isFile !== undefined)\n                    metadata.isFile = fileObject.isFile;\n                if (fileObject.file)\n                    metadata.file = fileObject.file;\n            }\n            if ((typeof FileSystemFileEntry !== \"undefined\") && ((fileObject instanceof FileSystemFileEntry))\n                && ((fileObject as unknown as FileSystemFileEntry).getMetadata)) {\n                // this is the only situation where we have another promise \n                (fileObject as unknown as FileSystemFileEntry).getMetadata((fileMetadata) => {\n                    // console.log(\"Got meta data from file object:\");\n                    // console.log(fileMetadata);\n                    // metadata.getMetaDataName = fileMetadata.name; // apparently not available?\n                    metadata.getMetaDataSize = fileMetadata.size;\n                    metadata.getMetaDataModificationTime = fileMetadata.modificationTime;\n                    if (fileObject.file) fileObject.file((file) => {\n                        metadata.getMetaDataFile = file;\n                        metadata.getMetaDataType = file.type;\n                        resolve(localResolve(metadata));\n                    }, (error) => {\n                        metadata.getMetaDataGetFileError = error;\n                        resolve(localResolve(metadata));\n                    });\n                }, (error: any) => {\n                    metadata.getMetaDataError = error;\n                    resolve(localResolve(metadata));\n                });\n            } else {\n                // otherwise, all info should be immediately available\n                metadata.noGetMetaData = true;\n                resolve(localResolve(metadata));\n            }\n        });\n    }\n\n    private async scanFile(file: File | FileSystemEntry | FileSystemFileEntry, fromItem: number) {\n        if (!file) return\n        // if (DBG2) testToRead(file, 'scanFile');\n        if (this.ignoreFile(file.name)) return;\n\n        let path: string;\n        if (file instanceof File) {\n            path = file.webkitRelativePath;\n        } else if (file instanceof FileSystemEntry) {\n            path = file.fullPath;\n        } else if (file instanceof FileSystemFileEntry) {\n            path = file.fullPath;\n        } else {\n            console.warn(\"**** Unknown file type (should not happen):\");\n            console.log(file);\n            return;\n        }\n\n        let fileNumber = await (fromItem === -1 ? this.#fileItemNumber.inc() : fromItem);\n        (file as any).SBitemNumber = fileNumber;\n\n        let fromItemText = fromItem === -1 ? '' : ` (from item ${fromItem})`\n\n        // fileListFile1_Files.push(file);\n\n        await this.extractFileMetadata(file).then((metadata) => {\n            if (DBG2) console.log(`adding ${fileNumber}`);\n            (file as any).SBfoundMetaData = metadata\n\n            // globalFileMap.set(`file ${fileNumber} (item ${fromItem}): ` + \"/\" + metadata.name + \" [file] [2] (\" + metadata.size + \")\", file);\n            // if ((file instanceof File) && (file.type !== \"\")) {\n            //     globalFileMap.set(`file ${fileNumber} (item ${fromItem}): ` + \"/\" + metadata.name + \" [meta from file]\", metadata);\n            // }\n\n            const b = new BrowserFile(getProperties(file, propertyList));\n            b.motherObject = file\n            let key = `file ${fileNumber} ${fromItemText} `\n            key += path === '' ? `name: '/` + file.name + \"' \" : `path: '/` + path + \"' \";\n            this.#globalFileMap.set(key, b);\n\n            // if (path === '') {\n            //     // fileListFile1.push('/' + file.name);\n            //     this.#globalFileMap.set(`file ${fileNumber} ${fromItemText} name: '/` + file.name + \"' \", b);\n            // } else {\n            //     // fileListFile1.push('/' + path);\n            //     this.#globalFileMap.set(`file ${fileNumber} ${fromItemText} path: '/` + path + \"'\", b);\n            // }\n\n        }).catch((error) => {\n            console.log(\"Error getting meta data for FILE (should NOT happen):\")\n            console.log(file)\n            console.log(error);\n        });\n    }\n\n    private scanFileList(files: FileList | undefined) {\n        if (!files) return;\n        if (DBG0) console.log(`==== scanFileList called, files.length: ${files.length}`);\n        if (files)\n            for (let i = 0; i < files.length; i++)\n            /* await */ this.scanFile(files[i], -1);\n    }\n\n    private async scanItem(item: FileSystemEntry | FileSystemFileEntry | null, parent: any) {\n        if (!item) return;\n        if (this.ignoreFile(item.name)) return;\n        // if (DBG2) testToRead(item, 'scanItem');\n\n        let itemNumber = await this.#itemNumber.inc();\n\n        if (DBG2) { console.log(`scanItem ${itemNumber} ${item.name}`); console.log(item); }\n\n        let parentString = '';\n        (item as any).SBitemNumber = itemNumber;\n        if (parent !== null) {\n            (item as any).SBparentEntry = parent;\n            (item as any).SBparentNumber = parent.SBitemNumber;\n            parentString = ` (parent ${parent.SBitemNumber}) `;\n            if (!parent.SBfullName)\n                // if we're a child then parent must be a parent\n                parent.SBfullName = parent.name;\n            // only if parents are around do we assert any knowledge of path\n            (item as any).SBfullName = parent.SBfullName + \"/\" + item.name;\n        }\n\n        // if (item.fullPath)\n        //     globalFileMap.set(`item ${itemNumber}: ` + item.fullPath + ` [item] [0] - indent ${indent}`, item);\n\n        // globalFileMap.set(`item ${itemNumber}: ` + '/' + item.name + ` [item] [1] - indent ${indent}`, item);\n\n        await this.extractFileMetadata(item).then((metadata) => {\n            (item as any).SBfoundMetaData = metadata\n            // globalFileMap.set(`item ${itemNumber}: ` + item.fullPath + ` [item] [2] - indent ${indent} `, item);\n            // globalFileMap.set(`item ${itemNumber}: ` + item.fullPath + ` [meta from item] - indent ${indent} `, metadata);\n        }).catch((error) => {\n            console.log(\"Error getting meta data for ITEM (should not happen):\")\n            console.log(item)\n            console.log(error);\n        });\n\n        if (item.isDirectory) {\n            const myThis = this; // workaround (VS issue?)\n            let directoryReader = (item as unknown as FileSystemDirectoryEntry).createReader();\n            const b = new BrowserFile(getProperties(item, propertyList));\n            // (item as any).SBdirectoryReader = directoryReader;\n            b.SBdirectoryReader = directoryReader;\n            // this.#globalFileMap.set(`item ${itemNumber}: '/` + item.name + `' [directory] ${parentString}`, item);\n            this.#globalFileMap.set(`item ${itemNumber}: '/` + item.name + `' [directory] ${parentString}`, b);\n            directoryReader.readEntries(function (entries) {\n                entries.forEach(async function (entry) {\n                    await myThis.scanItem(entry, item);\n                });\n            }, function (error: any) {\n                printWarning();\n                if (DBG0) console.log(`Browser restriction: Unable to process this item as directory, '${item.name}':`);\n                if (DBG2) console.log(error)\n            });\n        } else {\n            const b = new BrowserFile(getProperties(item, propertyList));\n            // this.#globalFileMap.set(`item ${itemNumber}: '/` + item.name + \"' \" + parentString, item);\n            this.#globalFileMap.set(`item ${itemNumber}: '/` + item.name + \"' \" + parentString, b);\n            (item as FileSystemFileEntry).file((file) => {\n                b.browserFile = file;\n                this.scanFile(file, itemNumber);\n            }, function () {\n                printWarning();\n            });\n        }\n\n    }\n\n    scanItemList(items: DataTransferItemList | undefined) {\n        if (!items) return;\n        if (DBG0) console.log(`==== scanItemList called, items.length: ${items.length}`);\n        // console.log(items);\n        for (let i = 0; i < items.length; i++) {\n            let item = items[i].webkitGetAsEntry();\n            if (item) /* await */ this.scanItem(item, null);\n            else { console.log(\"just FYI, not a file/webkit entry:\"); console.log(items[i]); }\n        }\n    }\n    //#endregion SCAN ITEMS OR FILES *******************************************************************************************************\n\n\n    // called after every user interaction (eg any possible additions of one or\n    // more files); callback is given current (possibly updated) file list\n    private afterOperation(callback: (table: Array<SBFile>) => void) {\n        setTimeout(() => {\n            (async () => {\n                console.log(\"-------DONE building #globalFileMap---------\")\n                console.log(this.#globalFileMap);\n                console.log(\"--------------------------------------------\")\n\n                let nameToFullPath = new Map<string, string>();\n\n                let candidateFileList: Map<number | string, BrowserFile> = new Map();\n\n                // everything we 'saw' in all manner of processing events gets put on #globalFileMap;\n                // here we do a first pass to gather metadata and coalesce into candidateFileList\n                this.#globalFileMap.forEach((value, _key) => {\n                    if (!value.name) throw new Error(\"Should not happen (L653)\");\n                    if (!this.ignoreFile(value.name)) {\n                        if (DBG2) { console.log(`[${value.name}] Processing global file map entry: `); console.log(value); }\n                        if (value.SBitemNumber !== undefined) {\n                            let currentInfo = candidateFileList.get(value.SBitemNumber);\n                            if (currentInfo) {\n                                // let altFullPath = value.fullPath;\n                                // let altFileContentCandidates = value.fileContentCandidates;\n                                let newInfo = getProperties(value, propertyList);\n                                // Object.assign(currentInfo, getProperties(value, propertyList));\n                                Object.assign(newInfo, currentInfo);\n                                if ((value.fullPath) && ((!newInfo.fullPath) || (value.fullPath.length > newInfo.fullPath.length)))\n                                    newInfo.fullPath = value.fullPath;\n                                newInfo.fileContentCandidates.push(value);\n                                // currentInfo.fileContentCandidates = altFileContentCandidates;\n                                candidateFileList.set(value.SBitemNumber, new BrowserFile(newInfo));\n                            } else {\n                                // candidateFileList.set(value.SBitemNumber, Object.assign({}, getProperties(value, propertyList)));\n                                candidateFileList.set(value.SBitemNumber, new BrowserFile(getProperties(value, propertyList)));\n                                currentInfo = candidateFileList.get(value.SBitemNumber);\n                                if (!currentInfo) throw new Error(\"Should not happen (L669)\");\n                                currentInfo.fileContentCandidates = [value];\n                            }\n                        } else if (value.fullPath) {\n                            // in some cases we can pick up path from here\n                            if (DBG2) console.log(`++++ adding path info for '${value.name}':\\n`, value.fullPath, value);\n                            nameToFullPath.set(value.name, value.fullPath);\n                        } else {\n                            throw new Error(`++++ file '${value.name}' has neither an SBitemNumber nor a fullPath (L664)`);\n                        }\n                    } else {\n                        if (DBG2) console.log(`Ignoring file '${value.name}' (based on ignoreFile)`);\n                    }\n                });\n\n                console.log(\"-------DONE building candidateFileList---------\")\n                console.log(candidateFileList);\n                console.log(\"-----------------------------------------------\")\n\n                // now merge into #currentFileList\n                candidateFileList.forEach((value, key) => {\n                    if ((value.SBfullName !== undefined) && ((\"/\" + value.SBfullName) !== value.fullPath)) {\n                        console.warn(\"WARNING: SBfullName and fullPath/name do not match\");\n                        console.log(`Name: ${value.name}, fullPath: ${value.fullPath}, SBfullName: ${value.SBfullName}`);\n                        console.log(value)\n                    }\n                    // pullPath is not reliable in the absence of our ability to reconstruct from parent-child\n                    let uniqueName = value.SBfullName || value.webkitRelativePath + '/' + value.name;\n                    /* if ((value.isDirectory) && (SKIP_DIR)) {\n                        if (DBG0) console.log(`Skipping directory '${uniqueName}'`);\n                    } else */ if (uniqueName !== undefined) {\n                        if (value.isDirectory === true) {\n                            uniqueName += \" [directory]\";\n                        } else if (value.isFile === true) {\n                            uniqueName += \" [file]\";\n                        }\n                        if ((value.size !== undefined) && (value.isDirectory !== true)) {\n                            uniqueName += ` [${value.size} bytes]`;\n                        }\n                        if (value.lastModified !== undefined) {\n                            uniqueName += ` [${value.lastModified}]`;\n                        }\n                        if (DBG2) {\n                            console.log(`processing object ${key} unique name '${uniqueName}':`);\n                            console.log(value)\n                        }\n                        let currentInfo = this.#currentFileList.get(uniqueName);\n                        if (currentInfo) {\n                            let altFullPath = currentInfo.fullPath;\n                            let altFileContentCandidates = currentInfo.fileContentCandidates;\n                            let altSbItemNumberList = currentInfo.SBitemNumberList;\n                            Object.assign(currentInfo, getProperties(value, propertyList));\n                            if ((altFullPath) && ((!currentInfo.fullPath) || (altFullPath.length > currentInfo.fullPath.length)))\n                                currentInfo.fullPath = altFullPath;\n                            if (altFileContentCandidates) {\n                                if (currentInfo.fileContentCandidates === undefined) currentInfo.fileContentCandidates = [];\n                                currentInfo.fileContentCandidates.push(...altFileContentCandidates);\n                            }\n                            if (!altSbItemNumberList || value.SBitemNumber === undefined) throw new Error(\"Should not happen (L724)\");\n                            altSbItemNumberList.push(value.SBitemNumber);\n                            currentInfo.SBitemNumberList = altSbItemNumberList;\n                        } else {\n                            if (value.SBitemNumber === undefined) throw new Error(\"Should not happen (L739)\")\n                            value.SBitemNumberList = [value.SBitemNumber];\n                            this.#currentFileList.set(uniqueName, value);\n                            currentInfo = candidateFileList.get(uniqueName); // ToDo: is this the right key?\n                        }\n                        if (DBG2) {\n                            console.log(`... currentInfo for '${uniqueName}' (${uniqueName}):`);\n                            console.log(currentInfo);\n                        }\n                    } else {\n                        if (DBG0) {\n                            console.log(`++++ ignoring file - it's lacking fullPath (should be rare)`);\n                            console.log(value);\n                        }\n                    }\n                });\n\n                console.log(\"-------DONE building #currentFileList---------\")\n                console.log(this.#currentFileList)\n                console.log(\"----------------------------------------------\")\n\n                // next phase, we'll try reading all the files, and we try to gather any missing metadata\n\n                // attempts to read a single file, returns promise with contents, or null if not readable\n                async function readFileAsArrayBuffer(file: Blob): Promise<ArrayBuffer | null> {\n                    return new Promise((resolve, reject) => {\n                        const reader = new FileReader();\n                        reader.onload = (e) => {\n                            if ((e.target === null) || (e.target.result === null)) {\n                                resolve(null);\n                            } else if (typeof e.target.result === 'string') {\n                                resolve(null);\n                            } else {\n                                resolve(e.target.result);\n                            }\n                        };\n                        reader.onerror = () => {\n                            reject(new Error('File reading failed'));\n                        };\n                        reader.readAsArrayBuffer(file);\n                    });\n                }\n                \n                async function getFileObject(fileEntry: FileSystemEntry | FileSystemFileEntry): Promise<File | null> {\n                    if ('file' in fileEntry) {\n                        return new Promise((resolve, reject) => {\n                            fileEntry.file(resolve, reject);\n                        });\n                    }\n                    return null;\n                }\n                                \n                // will attempt to read from this; if it succeeds, will return what 'worked' with first chunk, or null if any issues\n                // async function FP(file: File | FileSystemEntry | FileSystemFileEntry): Promise<{ file: File, buffer: ArrayBuffer } | null> {\n                async function FP(file: BrowserFile): Promise<{ file: File, buffer: ArrayBuffer } | null> {\n                    if (!file || !file.motherObject) return null;\n                    try {\n                        const fileObject: File | null =\n                            file.motherObject instanceof File\n                                ? file.motherObject\n                                : await getFileObject(file.motherObject as FileSystemEntry | FileSystemFileEntry);\n                \n                        if (!fileObject) return null;\n                \n                        // we only 'test' readability on up to the first chunk\n                        const sliceSize = SBFile.MAX_SBFILE_CHUNK_SIZE;\n                        const fileSlice = fileObject.slice(0, sliceSize);\n                \n                        await new Promise((resolve) => setTimeout(resolve, 20)); // Release pressure on the browser\n                        const buffer = await readFileAsArrayBuffer(fileSlice);\n                        if (!buffer) return null;\n                        // ToDo: can probably assign the file parameter here\n                        return { file: fileObject, buffer: buffer };\n                    } catch (error) {\n                        console.warn(`Error processing file: ${file.name}, ${error}`);\n                        return null;\n                    }\n                }\n                \n                // async function findFirstResolved(fileList: Array<File | FileSystemEntry | FileSystemFileEntry>): Promise<{ file: File, buffer: ArrayBuffer } | null> {\n                    async function findFirstResolved(fileList: Array<BrowserFile>): Promise<{ file: File, buffer: ArrayBuffer } | null> {\n                    for (let index = 0; index < fileList.length; index++) {\n                        let result = await FP(fileList[index]);\n                        if (result !== null) return result;\n                    }\n                    if (DBG0) {\n                        console.warn(\"findFirstResolved(): found nothing usable from this fileList\")\n                        console.log(fileList)\n                    }\n                    return null;\n                }\n\n                let listOfFilePromises: Array<Promise<void>> = [];\n                this.#currentFileList.forEach((value, key) => {\n                    if ((value.fileContentCandidates) && (!value.hash /* .uniqueShardId */)) { // 20240320\n                        // listOfFilePromises.push(value);\n                        listOfFilePromises.push(\n                            new Promise<void>(async (resolve) => {\n                                if (!value.fileContentCandidates) throw new Error(\"Should not happen (L832)\");\n                                findFirstResolved(value.fileContentCandidates)\n                                    .then(async (result: { file: File, buffer: ArrayBuffer } | null) => {\n                                        if (DEBUG3) console.log(`got response for ${value.name}`)\n                                        if (!result) {\n                                            if (DBG2) console.log(`... contents are empty for item ${key} (probably a directory)`)\n                                            // value.uniqueShardId = null;  // actually no, we'll leave it as undefined\n                                        } else {\n                                            // 20240320 - we can no longer piggyback on shard identifiers\n                                            // TODO: multi-chunk hashing\n                                            const hash = arrayBufferToBase62(await globalThis.crypto.subtle.digest('SHA-256', result.buffer)).slice(0, 12);\n                                            value.hash = hash; // 20240320\n\n                                            // const { idBinary } = await crypto.sbCrypto.generateIdKey(result!)\n                                            // const id32 = arrayBufferToBase62(idBinary);\n                                            // let alreadyThere = BrowserFileHelper.globalBufferMap.get(id32);\n                                            let alreadyThere = StorageApi.getData(ChannelApi.knownShards.get(hash));\n                                            if (alreadyThere) {\n                                                if (DBG2) console.log(`... duplicate file found for ${key}`)\n                                                // TODO: for multi-chunk files, we need to dedup on a chunk level, not file\n                                                result.buffer = alreadyThere; // memory conservation\n                                            } else if (BrowserFileHelper.knownBuffers.get(hash)) { // 20240320\n                                                if (DBG2) console.log(`... duplicate file found found in knownBuffers for ${key}`)\n                                                result.buffer = BrowserFileHelper.knownBuffers.get(hash)!; // memory conservation\n\n                                            } else {\n                                                // BrowserFileHelper.globalBufferMap.set(id32, result);\n                                                // this is the only spot where the contents of a file are actually added to our known buffers\n                                                if (DBG2) console.log(SEP, \"Adding new contents of a file to knownBuffers:\", value, SEP, result, SEP)\n                                                BrowserFileHelper.knownBuffers.set(hash, result.buffer); // 20240320\n                                            }\n                                            if (value.size === undefined) {\n                                                if (result.file && result.file.size !== undefined)\n                                                    value.size = result.file.size;\n                                                else\n                                                    value.size = result.buffer.byteLength;\n                                                // todo: check consistency of size with respect to max chunk size\n                                                if (DBG2) console.log(`... setting size for ${key} to ${value.size}`)\n                                            } else if (value.size !== result.buffer.byteLength) {\n                                                if (DBG0) console.log(`WARNING: file ${value.name} has size ${value.size} but contents are ${result.buffer.byteLength} bytes (future multi-handle)`)\n                                                // resolve(); // can't resolve here or the browseFile value won't forward\n                                            }\n                                            // value.uniqueShardId = id32; // 20240320\n                                            value.browserFile = result.file;\n                                            if (DBG2) console.log(`... found contents for ${key} (first ${result.buffer.byteLength} bytes, file hash '${hash}')`)\n                                        }\n                                        resolve();\n                                    })\n                                    .catch((error: any) => {\n                                        if (DBG2) console.log(`couldn't read anything for ${key}`, error);\n                                        // value.uniqueShardId = null;\n                                        resolve();\n                                    });\n                            })\n                        );\n                    } else { if (DBG0) console.log(`skipping ${value.name} (item ${key})`) }\n                });\n\n                if (DBG0) console.log(\"... kicked off all file promises\")\n\n                await Promise.all(listOfFilePromises).then((_results) => {\n                    // let's see what's in array buffers:\n                    console.log(\"-------DONE adding to globalBufferMap ---------\")\n                    console.log(BrowserFileHelper.knownBuffers /* globalBufferMap */) // 20240320\n                });\n\n                // this now updates the table and the UI\n                this.#currentFileList.forEach((value) => {\n                    if (value.name) {\n                        let path = \"/\";\n                        if (value.SBfullName) {\n                            if (!value.fullPath) throw new Error(\"Should not happen (L886)\");\n                            path = (\"/\" + value.SBfullName).substring(0, value.fullPath.lastIndexOf('/') + 1);\n                        } else if (value.webkitRelativePath) {\n                            path = (\"/\" + value.webkitRelativePath).substring(0, value.webkitRelativePath.lastIndexOf('/') + 1);\n                        } else if (value.fullPath) {\n                            path = value.fullPath.substring(0, value.fullPath.lastIndexOf('/') + 1);\n                        } else if (nameToFullPath.has(value.name)) {\n                            path = nameToFullPath.get(value.name)!.substring(0, nameToFullPath.get(value.name)!.lastIndexOf('/') + 1);\n                        } else {\n                            if (DBG2) {\n                                console.log(`... no (further) path info for '${value.name}'`);\n                                console.log(value);\n                            }\n                        }\n                        // make sure last character is \"/\"\n                        path = path.endsWith(\"/\") ? path : path.concat(\"/\");\n                        if (DBG2) console.log(`... path for '${value.name}' is '${path}'`);\n                        if (value.isDirectory === true) { value.type = \"directory\"; value.size = 0; }\n\n                        let finalFullName = path + value.name;\n\n                        let metaDataString = \"\";\n                        let lastModifiedString = \"\";\n                        if (value.lastModified) {\n                            lastModifiedString = (new Date(value.lastModified)).toLocaleString();\n                            metaDataString += ` [${lastModifiedString}]`;\n                        }\n                        if (value.size) {\n                            metaDataString += ` [${value.size} bytes]`;\n                        }\n                        // if (value.uniqueShardId) {\n                        //     metaDataString += ` [${value.uniqueShardId.substr(0, 12)}]`;\n                        // }\n                        if (value.hash) { // 20220320\n                            metaDataString += ` [${value.hash}]`;\n                        } else {\n                            console.warn(\"[afterOperation] No hash? (L923)\");\n                        }\n                        finalFullName += metaDataString;\n\n                        // let row: SBFile = {\n                        //     _SBFSVersion: '2024-02-01-0002',\n                        //     name: value.name,\n                        //     size: value.size,\n                        //     type: value.type,\n                        //     lastModified: lastModifiedString,\n                        //     // hash: value.uniqueShardId?.substr(0, 12), // 20240320\n                        //     hash: value.hash,\n                        //     // these are extra / hidden:\n                        //     path: path,\n                        //     // uniqueShardId: value.uniqueShardId, // 20240320\n                        //     fullName: finalFullName,\n                        //     metaDataString: metaDataString,\n                        //     SBfullName: value.SBfullName\n                        // };\n\n                        // let row = new SBFile({\n                        //     name: value.name,\n                        //     size: value.size,\n                        //     type: value.type,\n                        //     lastModified: lastModifiedString,\n                        //     hash: value.hash,\n                        //     path: path,\n                        //     fullName: finalFullName,\n                        //     metaDataString: metaDataString,\n                        //     SBfullName: value.SBfullName    \n                        // })\n\n                        // // create new SBFile from ALL the properties in value:\n                        // let row = new SBFile(getProperties(value, propertyList));\n\n                        // with post-typescript clean up, this is now the same object;\n                        // mapping to a 'row' view of things is now done in UI code \n                        // todo: clean up and just work with 'value'\n                        const row = value\n                        row.lastModified = lastModifiedString;\n                        row.path = path;\n                        row.fullName = finalFullName;\n                        row.metaDataString = metaDataString;\n\n                        let currentRow = this.finalFileList.get(finalFullName);\n                        if (!currentRow) {\n                            this.finalFileList.set(finalFullName, row);\n                        } else {\n                            // just a handful of things worth overriding:\n                            if (DBG0) console.log(`... overriding some values for ${finalFullName} (this is rare)`)\n                            if (currentRow!.size === undefined) currentRow!.size = row.size;\n                            if (currentRow!.type === undefined) currentRow!.type = row.type;\n                            if (currentRow!.lastModified === undefined) currentRow!.lastModified = row.lastModified;\n                            // if (currentRow!.uniqueShardId === undefined) currentRow!.uniqueShardId = row.uniqueShardId;\n                            if (currentRow!.hash === undefined) currentRow!.hash = row.hash; // 20240320\n                        }\n\n                        if (DBG2) { console.log(`File ${value.name} has info`); console.log(row); }\n                    }\n                });\n\n                console.log(\"-------DONE building finalFileList ---------\")\n                console.log(this.finalFileList)\n\n                // final coalescing; we review the finalFileList, and remove\n                // directories, which includes everything that we were unable to\n                // read the contents of\n                if (SKIP_DIR) {\n                    let reverseBufferMap: Map<string, Map<string, any>> = new Map(\n                        Array.from(BrowserFileHelper.knownBuffers /* globalBufferMap */.keys()).map((key) => [key, new Map()]) // 20240320\n                    );\n                    for (const key of this.finalFileList.keys()) {\n                        let entry = this.finalFileList.get(key)!;\n                        if ((entry!.type === \"directory\") || (/* entry.uniqueShardId */ entry.hash === undefined)) { // 20240320\n                            if (DBG2) console.log(`... removing ${key} from final list (directory)`)\n                            this.finalFileList.delete(key);\n                        } else {\n                            const uniqueShortName = entry.name! + entry.metaDataString!;\n                            if (entry.path !== \"/\") {\n                                const mapEntry = reverseBufferMap.get(entry.hash /* .uniqueShardId */)!.get(uniqueShortName); // 20240320\n                                if (mapEntry) {\n                                    // we have a duplicate\n                                    if (mapEntry.path.length > entry.path!.length) {\n                                        // we're the shorter one, so we remove ourselves\n                                        this.finalFileList.delete(key);\n                                    } else {\n                                        // we're the longer one, so we remove the old guy\n                                        this.finalFileList.delete(mapEntry.fullName);\n                                        reverseBufferMap.get(entry.hash /* .uniqueShardId */)!.set(uniqueShortName, entry); // 20240320\n                                    }\n                                } else {\n                                    // otherwise we leave ourselves in\n                                    reverseBufferMap.get(entry.hash /* uniqueShardId */)!.set(uniqueShortName, entry); // 20240320\n                                }\n\n                            }\n                        }\n                    }\n\n                    if (DBG0) console.log(reverseBufferMap)\n\n                    // after that first pass, we can now see whether short names are unique\n                    for (const key of this.finalFileList.keys()) {\n                        let entry = this.finalFileList.get(key)!;\n                        const uniqueShortName = entry.name! + entry.metaDataString;\n                        if (entry.path === \"/\") {\n                            if (!entry.hash)\n                                throw new Error(\"Internal Error (L930)\"); // 20240320\n                            const x = reverseBufferMap.get(entry.hash /* uniqueShardId! */)\n                            if (x) {\n                                const mapEntry = x.get(uniqueShortName); // 20240320\n                                if (mapEntry) {\n                                    // we have a duplicate, and delete ourselves\n                                    if (DBG2) console.log(`... removing ${key} from final list (duplicate short name)`)\n                                    this.finalFileList.delete(key);\n                                } else {\n                                    // otherwise we leave ourselves in\n                                    if (DBG2) console.log(`... leaving ${key} in final list (unique short name)`)\n                                }\n                            } else console.warn(\"Internal Warning (L1042)\"); // large file reverse buffer situation(s)\n                        }\n                    }\n\n                }\n\n                // finally we check if mime type is missing, and if so, try to figure it out\n                for (const key of this.finalFileList.keys()) {\n                    let entry = this.finalFileList.get(key)!;\n                    // update: sometimes the browser does the wrong thing (!) notably with svg\n                    let mimeType = getMimeType(entry.name);\n                    if (mimeType && (entry.type !== mimeType)) {\n                        console.warn(`Mime type mismatch for ${key}: ${entry.type} vs ${mimeType} (we will overrule)`);\n                        entry.type = mimeType;\n                    }\n\n                    // if (!entry.type) {\n                    //     if (DBG2) console.log(`... trying to figure out mime type for ${key}`)\n                    //     if (!entry.name)\n                    //         throw new Error(\"Internal Error (L1018)\"); // 20240320\n                    //     let mimeType = getMimeType(entry.name); // 20240320\n                    //     if (mimeType) {\n                    //         entry.type = mimeType;\n                    //     } else {\n                    //         entry.type = \"\";\n                    //     }\n                    // }\n                }\n\n                // \"export\" as a sorted array to our table\n                // let tableContents = Array.from(finalFileList).sort((a, b) => a[0].localeCompare(b[0]));\n                // let tableContents = Array.from(finalFileList.values()).sort((a, b) => a.toString().localeCompare(b.toString()));\n                let tableContents = Array.from(this.finalFileList.values()).sort((a, b) =>\n                    a.path!.localeCompare(b.path!) || a.name!.localeCompare(b.name!)\n                );\n\n                if (DBG0) {\n                    console.log(\"Table contents:\")\n                    console.log(tableContents);\n                }\n\n                console.log(\"-------DONE with all file promises (clearing state) ---------\")\n\n                // some cleanup for the next round\n                this.#itemNumber = createCounter();\n                this.#fileItemNumber = createCounter();\n                this.#globalFileMap = new Map();\n                this.#currentFileList = new Map();\n                // we do NOT clear the globalBufferMap\n\n                this.currentFileList = tableContents; // tracks latest\n                if (callback) {\n                    callback(tableContents);\n                } else {\n                    console.info(\"Note: no callback, so no update on tableContents:\")\n                    console.log(tableContents);\n                }\n\n            })(); // async\n        }, 50);\n    }\n\n\n    //#region UI HOOKS ****************************************************************************************************\n    //\n    // Here's roughly how you would hook up from an HTML page to this code.\n    // It will handle clicks and drops, both \"file\" and \"directory\" zones.\n    //\n    // \"handleEvent()\" handles all such events. It will call\n    // scanItemList() and scanFileList() on all the data, then\n    // the above \"afteOperation()\"\n\n\n    // }\n\n    handleFileDrop(event: DragEvent, callback: ((table: Array<SBFile>) => void)) {\n        event.preventDefault();\n        return this.handleEvent(event, callback, \"[file drop]\");\n    }\n\n    handleDirectoryDrop(event: DragEvent, callback: ((table: Array<SBFile>) => void)) {\n        event.preventDefault();\n        return this.handleEvent(event, callback, \"[directory drop]\");\n    }\n\n    handleFileClick(event: Event, callback: ((table: Array<SBFile>) => void)) {\n        event.preventDefault();\n        const fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.multiple = true;\n        fileInput.accept = '*/*';\n        fileInput.addEventListener('change', (event) => {\n            this.handleEvent(event, callback, \"[file click]\");\n        });\n        fileInput.click();\n    }\n\n    handleDirectoryClick(event: Event, callback: ((table: Array<SBFile>) => void)) {\n        event.preventDefault();\n        const fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.multiple = true;\n        fileInput.webkitdirectory = true;\n        fileInput.accept = '*/*';\n        fileInput.addEventListener('change', (event) => {\n            this.handleEvent(event, callback, \"[directory click]\")\n        });\n        fileInput.click();\n    }\n\n    // this gets all events, eg both input type=file and drag and drop;\n    // 'context' is a debug string of where event is coming from. the callback\n    // is called with the current file list (as an array of SBFile objects)\n    private async handleEvent(event: Event | DragEvent, callback: ((table: Array<SBFile>) => void), _context: any) {\n        let files, items;\n        if ((event as DragEvent).dataTransfer) {\n            files = (event as DragEvent).dataTransfer!.files;\n            items = (event as DragEvent).dataTransfer!.items;\n        } else if (event.target) {\n            if ((event.target as any as CustomEventTarget).files)\n                files = (event.target as any as CustomEventTarget).files;\n            if ((event.target as any as CustomEventTarget).items)\n                items = (event.target as any as CustomEventTarget).items;\n        } else {\n            console.log(\"Unknown event type (should not happen):\");\n            console.log(event);\n            return;\n        }\n        if (DEBUG3) {\n            console.log(\"Received items (DataTransferItemList):\")\n            console.log(items);\n            console.log(\"Received files:\")\n            console.log(files);\n        }\n        this.scanItemList(items);\n        this.scanFileList(files);\n        this.afterOperation(callback);\n    }\n\n    clearNewSet = () => { // ToDo: this should be moved\n        const uploadButton = document.getElementById(\"uploadNewSetButton\");\n        if (uploadButton) uploadButton.removeAttribute(\"disabled\");\n        console.info(\"******** cleared current file list ********\")\n        if (this.callbacks.processNewTable)\n            this.callbacks.processNewTable([]);\n        const newSetButton = document.getElementById('uploadNewSetButton');\n        if (newSetButton) newSetButton.style.display = 'none';\n        this.currentFileList = [];\n        this.finalFileList.clear();\n        // hm actually knownBuffers should naturally be cleared when done, so,\n        // we should probably instead confirm that it's empty\n        BrowserFileHelper.knownBuffers.clear();\n    }\n}\n\nif (DBG0) console.warn(\"==== SBFileHelper.ts \" + BrowserFileHelper.version + \" loaded ====\")\n\n// // archived, was used to test to read files. might not be updated with latest SBFile refactors (big files etc)\n// // internal test/debug function, used to verify files can be accessed\n// function testToRead(file: File | FileSystemEntry | FileSystemFileEntry, location: string) {\n//     try {\n//         const reader = new FileReader();\n//         reader.readAsText(file as File);\n//         reader.onload = (e) => {\n//             if (DBG2) {\n//                 console.log(\"========================================================\")\n//                 console.log(`[${location}] was able to readAsText():`);\n//                 console.log(file)\n//             }\n//             if (e.target === null) {\n//                 if (DBG0) console.log('**** e.target is null ****');\n//             } else {\n//                 if (DBG2) console.log(`[${location}] (direct) successfully read file ${file.name}`);\n//             }\n//         }\n//     } catch (error) {\n//         try {\n//             if ((file as any).file) {\n//                 let originalFile = file;\n//                 (file as any).file((file: File) => {\n//                     if (DBG2) {\n//                         console.log(\"========================================================\")\n//                         console.log(`[${location}] was able to get a file() for object:`);\n//                         console.log(originalFile)\n//                         console.log(file)\n//                     }\n//                     const reader = new FileReader();\n//                     reader.readAsText(file as File);\n//                     reader.onload = (e) => {\n//                         if (e.target === null) {\n//                             console.log('**** e.target is null ****');\n//                         } else {\n//                             if (DBG2) console.log(`[${location}] (using file()) successfully read file ${file.name}`);\n//                             // console.log(e.target.result);\n//                         }\n//                     }\n//                 });\n//             }\n//         } catch (error) {\n//             console.log(`[${location}] error reading file ${file.name}`);\n//         }\n//     }\n// }\n\n\n// /* below is an older version of FP(); it had been tested on lots of different browser/platform\n//    combinations, so we are retaining it until we've tested enough to feel the same way about the new one */\n// async function FP(file: File | FileSystemEntry | FileSystemFileEntry): Promise<ArrayBuffer | null> {\n//     return new Promise(async (resolve) => {\n//         console.log(SEP)\n//         console.log(\"Will test reading file:\")\n//         console.log(file);\n//         console.log(\"Is a file: \" + (file as FileSystemEntry).isFile);\n//         console.log(SEP)\n//         try {\n//             const reader = new FileReader();\n//             reader.onload = (e) => {\n//                 if ((e.target === null) || (e.target.result === null)) {\n//                     if (DBG2)\n//                         console.log(`+++++++ got a null back for '${file.name}' (??)`);\n//                     resolve(null)\n//                 } else if (typeof e.target.result === 'string') {\n//                     if (DBG2)\n//                         console.log(`+++++++ got a 'string' back for '${file.name}' (??)`);\n//                     resolve(null)\n//                 } else {\n//                     if (DBG2) {\n//                         console.log(`+++++++ read file '${file.name}'`);\n//                         console.log(e.target.result);\n//                     }\n//                     resolve(e.target.result)\n//                 }\n//             }\n//             reader.onerror = (event) => {\n//                 if (DBG2) { console.log(`Could not read: ${file.name}`); console.log(event); }\n//                 resolve(null);\n//             }\n//             // we try to release pressure on the browser\n//             await new Promise((resolve) => setTimeout(resolve, 20));\n//             reader.readAsArrayBuffer(file as File);\n//         } catch (error) {\n//             try {\n//                 if (DBG2) console.log(`+++++++ got error on '${file.name}', will try as FileSystemFileEntry`);\n//                 if ((file as any).file) {\n//                     (file as any).file(async (file: File) => {\n//                         const reader = new FileReader();\n//                         reader.onload = (e) => {\n//                             if ((e.target === null) || (e.target.result === null)) resolve(null)\n//                             else if (typeof e.target.result === 'string') resolve(null)\n//                             else resolve(e.target.result)\n//                         }\n//                         reader.onerror = () => { resolve(null); }\n//                         // we try to release pressure on the browser\n//                         await new Promise((resolve) => setTimeout(resolve, 20));\n//                         reader.readAsArrayBuffer(file as File);\n//                     });\n//                 } else {\n//                     if (DBG2) console.log(`... cannot treat as file: ${file.name}`);\n//                 }\n//             } catch (error) {\n//                 if (DBG2) console.log(`Could not read: ${file.name}`);\n//             }\n//             resolve(null);\n//         }\n//     });\n// }", "// (c) 2023-2024 384 (tm)\n\n/** @public */\nexport enum MessageType {\n    MSG_SIMPLE_CHAT = \"SIMPLE_CHAT_9WbWE53HnRy6\", // simple chat message (just text)\n\n    // shard/file sharing\n    MSG_FILE_SET = \"FILE_SET_FEm4a3EW0cn1\", // upon sharing \"set\" of files (only meta data)\n    MSG_NEW_SHARD = \"NEW_SHARD_eUp2cR96dH3E\", // sent every time a shard/file is seen that's new\n\n    // user private data\n    MSG_USER_PRIVATE_DATA = \"USER_PRIVATE_DATA_R0FR1LWRRddE\", // any private (meta whatever) data a user wants to record\n\n    // communication around user identities\n    MSG_NEW_USER_KEY = \"NEW_USER_KEY_20m0r6rFedac\", // when users lock in their key they send this\n    MSG_CLAIM_PUBLIC_KEY = \"CLAIM_PUBLIC_KEY_8pc2FamHdrhW\", // when a user claims a public key, they send this\n\n    // 'parent' channel communication\n    MSG_CONTACT_ANNOUNCEMENT = \"CONTACT_ANNOUNCEMENT_mEe6d97kEbhR\", // Announces a new contact based on the configuration and new public key in main channel\n    MSG_REQUEST_MAIN = \"REQUEST_MAIN_1pE8de4bEWRE\", // sent to request the main channel (which is another one)\n    MSG_PROVIDE_MAIN = \"PROVIDE_MAIN_Ea66FnFE9f5F\", // reply to request; the provision needs to be encrypted for the recipient\n}\n\nexport const MessageTypeList = [\n    MessageType.MSG_SIMPLE_CHAT,\n    MessageType.MSG_FILE_SET,\n    MessageType.MSG_NEW_SHARD,\n    MessageType.MSG_NEW_USER_KEY,\n    MessageType.MSG_USER_PRIVATE_DATA,\n    MessageType.MSG_CLAIM_PUBLIC_KEY,\n    MessageType.MSG_REQUEST_MAIN,\n    MessageType.MSG_PROVIDE_MAIN,\n    MessageType.MSG_CONTACT_ANNOUNCEMENT,\n];\n", "// (c) 2024 384 (tm)\n\nimport { ChannelId, SBError } from '../common';\n\nconst DBG0 = false\nconst DBG2 = false\nexport const DEBUG0 = true;  // when not used, set to = DBG2\n\nconst SEP = '\\n' + '+'.repeat(76) + '\\n'\n\nfunction _assert(val: unknown, msg: string) {\n    if (!(val)) {\n        const m = ` <<<<[_sb_assert] assertion failed: '${msg}'>>>> `;\n        if (DBG0) console.trace(m)\n        throw new SBError(m);\n    }\n}\n\n/** @internal */\nexport class MessageCache {\n    readyPromise: Promise<MessageCache>;\n    db?: IDBDatabase;\n    dbName = \"MessageCache\";\n    dbVersion = 6;\n    #workInMemory = false;\n    #inMemoryDB: Map<string, ArrayBuffer>;\n\n    // quick lookup of everything that has been *seen* for this instance (eg\n    // there may be more in the local storage, but it does meant that if the key\n    // is 'known' that it and it's value is in the cache)\n    knownMessageKeys: Set<IDBValidKey> = new Set();\n\n    constructor() {\n        this.#inMemoryDB = new Map();\n        this.readyPromise = new Promise((resolve, reject) => {\n            if ('indexedDB' in globalThis) {\n                const request = indexedDB.open(this.dbName, this.dbVersion);\n                request.onupgradeneeded = () => {\n                    const db = request.result;\n                    if (!db.objectStoreNames.contains(this.dbName)) {\n                        db.createObjectStore(this.dbName, { keyPath: \"key\" });\n                        if (DBG0) console.log(\"++++ onupgradeneeded called, created object store\");\n                    }\n                };\n                request.onsuccess = () => { this.db = request.result; if (DBG2) console.log(\"++++ SUCCESS in opening\"); resolve(this); };\n                request.onerror = () => { reject(`**** Database error ('${this.dbName}): ` + request.error); };\n            } else {\n                this.#workInMemory = true;\n                resolve(this);\n            }\n        });\n    }\n\n    async getObjStore(mode: IDBTransactionMode = \"readonly\"): Promise<IDBObjectStore | Map<string, any>> {\n        await this.readyPromise;\n        if (this.#workInMemory) {\n            return this.#inMemoryDB;\n        } else {\n            _assert(this.db, \"Internal Error [L0032]\");\n            const transaction = this.db!.transaction(this.dbName, mode);\n            const objectStore = transaction.objectStore(this.dbName);\n            _assert(objectStore, \"Internal Error [L0035]\");\n            if (DBG2) console.log(\"++++ getObjStore done\", objectStore);\n            return objectStore;\n        }\n    }\n\n    async add(key: string, value: ArrayBuffer): Promise<void> {\n        if (!(value instanceof ArrayBuffer)) throw new SBError(\"Value not an ArrayBuffer. Internal Error [L0190]\")\n        if (this.#workInMemory) {\n            this.#inMemoryDB.set(key, value);\n            this.knownMessageKeys.add(key);\n            if (DBG2) console.log(\"Success in storing with key\", key);\n            return;\n        } else {\n            return new Promise(async (resolve, reject) => {\n                const objectStore = await this.getObjStore(\"readwrite\") as IDBObjectStore;\n                const request = objectStore.put({ key: key, value: value }); // overwrites if present\n                request.onsuccess = () => { if (DBG2) console.log(\"Success in storing with key\", key); resolve(); };\n                request.onerror = () => { reject('[add] Received error accessing keys'); };\n                this.knownMessageKeys.add(key);\n            });\n        }\n    }\n\n    async get(key: string): Promise<ArrayBuffer | undefined> {\n        if (this.#workInMemory) {\n            return this.#inMemoryDB.get(key);\n        } else {\n            return new Promise(async (resolve, reject) => {\n                const objectStore = await this.getObjStore()\n                const request = objectStore.get(key);\n                request.onsuccess = () => { resolve(request.result?.value); };\n                request.onerror = () => { reject('[get] Received error accessing keys'); };\n            });\n        }\n    }\n\n    async getKnownMessageKeys(channelId: ChannelId, timestampPrefix: string, i2?: string): Promise<Set<string>> {\n        if (this.#workInMemory) {\n            const [lower, upper] = this.getLowerUpper(channelId, timestampPrefix, i2);\n            const result = new Set<string>();\n            for (let key of this.#inMemoryDB.keys()) {\n                if (key >= lower && key <= upper) {\n                    result.add(key);\n                    this.knownMessageKeys.add(key);\n                }\n            }\n            return result;\n        } else {\n            return new Promise(async (resolve, reject) => {\n                const objectStore = await this.getObjStore() as IDBObjectStore;\n                const [lower, upper] = this.getLowerUpper(channelId, timestampPrefix, i2)\n                const keyRange = IDBKeyRange.bound(lower, upper, false, false);\n                const getAllKeysRequest = objectStore?.getAllKeys(keyRange);\n                if (!getAllKeysRequest) resolve(new Set()); // unable to set up query\n                // getAllKeysRequest!.onsuccess = () => { resolve(new Set(getAllKeysRequest!.result) as Set<ChannelMessage>); }; // IDBValidKey can be string\n                getAllKeysRequest!.onsuccess = () => {\n                    const result = new Set(getAllKeysRequest!.result);\n                    this.knownMessageKeys = new Set([...this.knownMessageKeys, ...result]);\n                    resolve(new Set(result) as Set<string>);\n                };\n                getAllKeysRequest!.onerror = () => { reject('[getKnownMessageKeys] Received error accessing keys'); };\n            });\n        }\n    }\n\n    async getKnownMessages(channelId: ChannelId, timestampPrefix: string, i2?: string): Promise<Map<string, ArrayBuffer>> {\n        if (this.#workInMemory) {\n            const [lower, upper] = this.getLowerUpper(channelId, timestampPrefix, i2);\n            const result = new Map<string, any>();\n            for (let [key, value] of this.#inMemoryDB) {\n                if (key >= lower && key <= upper) {\n                    result.set(key, value);\n                    this.knownMessageKeys.add(key);\n                }\n            }\n            return result;\n        } else {\n            return new Promise(async (resolve, reject) => {\n                const objectStore = await this.getObjStore() as IDBObjectStore;\n                const [lower, upper] = this.getLowerUpper(channelId, timestampPrefix, i2)\n                const keyRange = IDBKeyRange.bound(lower, upper, false, false);\n                const getAllRequest = objectStore?.getAll(keyRange);\n                if (!getAllRequest) {\n                    if (DBG2) console.log(\"++++ [getKnownMessages] unable to set up query (returning empty map\")\n                    resolve(new Map()); // unable to set up query\n                }\n                // getAllRequest!.onsuccess = () => { resolve(new Map(getAllRequest!.result) as Map<string, any>); };\n                getAllRequest!.onsuccess = () => {\n                    const result = getAllRequest!.result\n                    if (DBG2) console.log(SEP, \"++++ [getKnownMessages] result:\", SEP, result, SEP)\n                    this.knownMessageKeys = new Set([...this.knownMessageKeys, ...result.keys()]);\n                    resolve(new Map<string, any>(result.map((item: { key: string; value: any }) => [item.key, item.value])));\n                };\n                getAllRequest!.onerror = () => { reject('[getKnownMessages] Received error accessing keys'); };\n            });\n        }\n    }\n\n    getLowerUpper(channelId: ChannelId, timestampPrefix: string, i2?: string): [string, string] {\n        const sep = i2 ? `_${i2}_` : '______';\n        const lowerBound = channelId + sep + timestampPrefix.padEnd(26, '0');\n        const upperBound = channelId + sep + timestampPrefix.padEnd(26, '3');\n        return [lowerBound, upperBound];\n    }\n}\n\n\n\n/* For reference, cache code without in-memory option */\n/******************************************************************************************************/\n//#region - Non-in-memory Message Caching\n// const SB_MESSAGE_CACHE_DB_NAME = \"MessageCache\"\n// class MessageCache {\n//     readyPromise: Promise<MessageCache>;\n//     db?: IDBDatabase;\n//     dbName = SB_MESSAGE_CACHE_DB_NAME\n//     dbVersion = 6\n//     #workInMemory = false\n//     constructor() {\n//         // if (!('indexedDB' in globalThis)) throw new SBError(\"IndexedDB not supported, cannot create MessageCache (nor ChannelStream)\")\n//         this.readyPromise = new Promise((resolve, reject) => {\n//             if ('indexedDB' in globalThis) {\n//                 const request = indexedDB.open(this.dbName, this.dbVersion);\n//                 request.onupgradeneeded = () => {\n//                     const db = request.result;\n//                     if (!db.objectStoreNames.contains(this.dbName)) {\n//                         db.createObjectStore(this.dbName, { keyPath: \"key\" });\n//                         if (DBG0) console.log(\"++++ onupgradeneeded called, created object store\")\n//                     }\n//                 };\n//                 request.onsuccess = () => { this.db = request.result; if (DBG0) console.log(\"++++ SUCCESS in opening\"); resolve(this); };\n//                 request.onerror = () => { reject(`**** Database error ('${this.dbName}): ` + request.error); };\n//             } else {\n//                 this.#workInMemory = true\n//                 resolve(this)\n//             }\n//         });\n//     }\n//     async getObjStore(mode: IDBTransactionMode = \"readonly\"): Promise<IDBObjectStore> {\n//         await this.readyPromise\n//         _assert(this.db, \"Internal Error [L0032]\")\n//         const transaction = this.db?.transaction(SB_MESSAGE_CACHE_DB_NAME, mode);\n//         const objectStore = transaction?.objectStore(SB_MESSAGE_CACHE_DB_NAME);\n//         _assert(objectStore, \"Internal Error [L0035]\")\n//         if (DBG0) console.log(\"++++ getObjStore done\", objectStore)\n//         return objectStore!\n//     }\n//     // insert KV entry as { key: key, value: value }\n//     async add(key: string, value: any): Promise<void> {\n//         return new Promise(async (resolve, reject) => {\n//             const objectStore = await this.getObjStore(\"readwrite\")\n//             const request = objectStore.put({ key: key, value: value }); // overwrites if present\n//             request.onsuccess = () => { if (DBG0) console.log(\"Success in storing with key\", key); resolve(); };\n//             request.onerror = () => { reject('[add] Received error accessing keys'); };\n//         });\n//     }\n//     // fetch an entry, returning the value\n//     async get(key: string): Promise<ChannelMessage | undefined> {\n//         return new Promise(async (resolve, reject) => {\n//             const objectStore = await this.getObjStore()\n//             const request = objectStore.get(key);\n//             request.onsuccess = () => { resolve(request.result?.value); };\n//             request.onerror = () => { reject('[get] Received error accessing keys'); };\n//         });\n//     }\n//     getLowerUpper(channelId: ChannelId, timestampPrefix: string, i2?: string): [string, string] {\n//         const sep = i2 ? `_${i2}_` : '______'\n//         const lowerBound = channelId + sep + timestampPrefix.padEnd(26, '0')\n//         const upperBound = channelId + sep + timestampPrefix.padEnd(26, '3');\n//         return [lowerBound, upperBound]\n//     }\n//     async getKnownMessageKeys(channelId: ChannelId, timestampPrefix: string, i2?: string): Promise<Set<string>> {\n//         return new Promise(async (resolve, reject) => {\n//             const objectStore = await this.getObjStore()\n//             const [lower, upper] = this.getLowerUpper(channelId, timestampPrefix, i2)\n//             const keyRange = IDBKeyRange.bound(lower, upper, false, false);\n//             const getAllKeysRequest = objectStore?.getAllKeys(keyRange);\n//             if (!getAllKeysRequest) resolve(new Set()); // unable to set up query\n//             // getAllKeysRequest!.onsuccess = () => { resolve(new Set(getAllKeysRequest!.result) as Set<ChannelMessage>); }; // IDBValidKey can be string\n//             getAllKeysRequest!.onsuccess = () => { resolve(new Set(getAllKeysRequest!.result) as Set<string>); };\n//             getAllKeysRequest!.onerror = () => { reject('[getKnownMessageKeys] Received error accessing keys'); };\n//         });\n//     }\n//     async getKnownMessages(channelId: ChannelId, timestampPrefix: string, i2?: string): Promise<Map<string, any>> {\n//         return new Promise(async (resolve, reject) => {\n//             const objectStore = await this.getObjStore()\n//             const [lower, upper] = this.getLowerUpper(channelId, timestampPrefix, i2)\n//             const keyRange = IDBKeyRange.bound(lower, upper, false, false);\n//             const getAllRequest = objectStore?.getAll(keyRange);\n//             if (!getAllRequest) {\n//                 if (DBG0) console.log(\"++++ [getKnownMessages] unable to set up query (returning empty map\")\n//                 resolve(new Map()); // unable to set up query\n//             }\n//             // getAllRequest!.onsuccess = () => { resolve(new Map(getAllRequest!.result) as Map<string, any>); };\n//             getAllRequest!.onsuccess = () => {\n//                 const result = getAllRequest!.result\n//                 if (DBG0) console.log(SEP, \"++++ [getKnownMessages] result:\", SEP, result, SEP)\n//                 resolve(new Map<string, any>(result.map((item: { key: string; value: any }) => [item.key, item.value])));\n//             };\n//             getAllRequest!.onerror = () => { reject('[getKnownMessages] Received error accessing keys'); };\n//         });\n//     }\n// }\n//#endregion - Non-in-memory Message Caching", "// (c) 2024 384 (tm)\n\nimport {\n    _sb_assert, ChannelId,\n    SBUserPrivateKey, SBError,\n    SEP, SEP_, Memoize,\n    extractPayload, assemblePayload,\n    isSet\n} from 'src/common'\n\nimport {\n    MessageQueue\n} from 'src/utils/MessageQueue'\n\nimport { ChannelMessage } from './ChannelMessage'\nimport { ChannelApi } from './ChannelApi'\nimport { SBProtocol } from './Protocol'\nimport { ChannelHandle, _check_ChannelHandle } from './ChannelHandle'\nimport { Message, MessageOptions } from 'src/channel/Message'\nimport { SBStorageToken } from 'src/storage/StorageToken'\nimport { Channel, _check_SBChannelData } from './Channel'\nimport { ChannelSocket } from './ChannelSocket'\nimport { MessageCache } from './MessageCache'\nimport { AsyncSequence } from 'src/utils/AsyncSequence'\n// import { ClientDeepHistory } from 'src/storage/MessageHistory'\n\nconst DBG0 = false\nconst DBG2 = false\n\nfunction _assert(val: unknown, msg: string) {\n    if (!(val)) {\n        const m = ` <<<<[_sb_assert] assertion failed: '${msg}'>>>> `;\n        if (DBG0) console.trace(m)\n        throw new SBError(m);\n    }\n}\n\n/**\n * Options for ChannelStream.spawn(). Optional start/end are timestamps,\n * indicating a range (inclusive) of messages to fetch. If 'live' is true,\n * the stream will continue to fetch new messages as they arrive. Note\n * that timestamps can be '0' (earliest) or 'Infinity' (latest). If 'start'\n * is a larger value than 'end', the stream will be in reverse order.\n * \n * Note: 'prefix' and 'reverse' are being deprecated (used for 'start()' method).\n */\nexport interface ChannelStreamOptions {\n    start?: number;\n    end?: number;\n    live?: boolean;\n    /** Note: 'prefix' is being deprecated */\n    prefix?: string;\n    /** Note: 'reverse' is being deprecated */\n    reverse?: boolean;\n}\n\n// helper class for ChannelStream\nclass MessageSequence extends AsyncSequence<Message> {\n    private uniqueMessageSequenceId = Symbol()\n    // private toSkip = 0\n    constructor(private ch: ChannelStream, private options: ChannelStreamOptions = {}) {\n        super();\n        this.source = this.createSource()\n    }\n\n    private async *_historySequence(start: number, end: number, forward: boolean): AsyncIterableIterator<Message> {\n        // before proceeding with recent messages, we look at history\n        const channelHistory = await this.ch.getHistory()\n        if (DBG2) console.log(SEP, \"[MessageSequence] Fetching channel history from\", SEP, channelHistory, SEP)\n        if (DBG0) console.log(SEP, `[MessageSequence] History covers from ${channelHistory.fromTimestamp} to ${channelHistory.toTimestamp}`, SEP)\n        const chHistory = channelHistory.traverseMessagesGenerator(\n            // ClientDeepHistory expects these in order\n            start <= end ? start : end,\n            end >= start ? end : start,\n            !forward // 'reverse' for ChannelHistory\n        )\n        yield* chHistory\n        if (DBG0) console.log(SEP, \"[MessageSequence] Done fetching channel history ...\", SEP)\n    }\n\n    private async *_recentSequence(timeStamps: number[], myChannelId: string, s: number, e: number, forward: boolean): AsyncIterableIterator<Message> {\n        if (DBG0) console.log(SEP, \"[MessageSequence] Fetching recent messages ...\", SEP)\n        // create a 'keyArray' that reconstructs the id values from the timeStamps\n        const start = forward ? s : e\n        const end = forward ? e : s\n        timeStamps = (timeStamps.filter((ts) => ts >= start && ts <= end)).sort((a, b) => forward ? a - b : b - a)\n        if (DBG0) console.log(SEP, `Fetching messages using getMessageMap(.. ${timeStamps.length} entries ..) ...`, SEP, timeStamps, SEP)\n        const keyArray = timeStamps.map((ts) => Channel.composeMessageKey(myChannelId, ts))\n        const chunkSize = 64\n        for (let i = 0; i < keyArray.length; i += chunkSize) {\n            // note: currently not much point doing this in parallel since it'll hit the same DO\n            const chunk = keyArray.slice(i, i + chunkSize)\n            if (DBG0) console.log(SEP, \"Fetching chunk:\", SEP, chunk, SEP)\n            const chunkMessages = await this.ch.getMessageMap(new Set(chunk))\n            const messageArray = Array.from(chunkMessages.values())\n               .sort((a, b) => forward ? a.serverTimestamp - b.serverTimestamp : b.serverTimestamp - a.serverTimestamp)\n            if (DBG0) console.log(SEP, \"Received chunk:\", SEP, messageArray.map(m => m.body), SEP)\n            for (const m of messageArray) {\n                yield m\n            }\n        }\n    }\n\n    private async *_liveSequence(myQ: MessageQueue<Message>, latestTimestampStr: string): AsyncIterableIterator<Message> {\n        if (DBG0) console.log(SEP, \"[MessageSequence] Switching to live stream ...\", SEP)\n        await this.ch.startRestartSocket()\n        try {\n            while (true) {\n                const message = await myQ.dequeue();\n                if (this.ch.closingDown) {\n                    if (DBG0) console.log(\"[MessageSequence] ChannelStream is closing down, breaking out ...\")\n                    break\n                }\n                if (message === null) {\n                    if (DBG0) console.log(\"[MessageSequence] Queue is empty, breaking out ...\")\n                    break;\n                }\n                if (DBG0) console.log(SEP, \"++++ MSG: \", message._id, \" [MessageSequence]\", SEP)\n                const key = message!._id\n                const { timestamp } = Channel.deComposeMessageKey(key)\n                if (timestamp > latestTimestampStr) {\n                    latestTimestampStr = timestamp\n                    yield message\n                } else {\n                    if (DBG0) console.log(\"[MessageSequence] Skipping message, already processed:\", message)\n                    continue\n                }\n            }\n        } catch (error) {\n            console.error(\"[getNewMessages] Error in getNewMessages:\", error)\n            throw error;\n        }\n    }\n\n    private async *createSource(): AsyncIterableIterator<Message> {\n        try {\n            await this.ch.ready\n\n            const { start = 0, end = Infinity, live = false } = this.options;\n            const forward = end >= start;\n            const myChannelId = this.ch.channelId\n            if (DBG0) console.log(SEP, \"[MessageSequence] messageStream() options:\", SEP, this.options, SEP,\n                \"Channel ID:\", myChannelId, SEP, \"Start:\", start, \"End:\", end, \"Live:\", live, \"Forward:\", forward, SEP\n            );\n\n            if ((live && !forward) || (live && end !== Infinity))\n                throw new SBError(\"[MessageSequence] Cannot start live stream in reverse or with an end timestamp\")\n\n            let latestTimestampStr = Channel.LOWEST_TIMESTAMP\n\n            // make sure to capture brand new messages, if that will be needed\n            const myQ = new MessageQueue<Message>()\n            if (live) this.ch.streamQueueArray.set(this.uniqueMessageSequenceId, myQ)\n\n            // get 'recent' messages that's on the server\n            let timeStamps: number[] = []\n            {\n                const { historyShard, keys } = await this.ch.getMessageKeys()\n                const keyArray = Array.from(keys.keys())\n                if (DBG2) console.log(SEP, `Found ${keys.size} recent messages:`, SEP, keys, SEP, \"history shard:\", historyShard, SEP)\n                // ToDo: handle non-'____' keys\n                timeStamps = keyArray.map((k) => Channel.base4StringToTimestamp(Channel.deComposeMessageKey(k).timestamp)!)\n                // sort the timeStamps array in accordance with 'forward'\n                timeStamps.sort((a, b) => forward ? a - b : b - a)\n                // remove any time stamps that are outside the range\n                timeStamps = timeStamps.filter((ts) => forward ? ts >= start && ts <= end : ts <= start && ts >= end)\n                // console.log(SEP, `Time stamps [${timeStamps.length} from ${n}] (note, forward is ${forward}, boundaries are ${start}, ${end}):`, '\\n', timeStamps, SEP)\n            }\n\n            if (forward) {\n                yield* this._historySequence(start, end, forward)\n                yield* this._recentSequence(timeStamps, myChannelId, start, end, forward)\n                if (live) yield* this._liveSequence(myQ, latestTimestampStr)\n            } else {\n                yield* this._recentSequence(timeStamps, myChannelId, start, end, forward)\n                yield* this._historySequence(start, end, forward)\n            }\n\n        } catch (e) {\n            console.error(\"[MessageSequence] Error in messageStream:\", e)\n            throw e\n        } finally {\n            // looks like we're all done, so some cleanup\n            if (DBG0) console.log(\"[MessageSequence] Cleaning up ...\")\n            this.ch.streamQueueArray.delete(this.uniqueMessageSequenceId)\n            // the local mQ will just be garbage collected\n        }\n\n    }\n\n    // skip(n: number) {\n    //     this.toSkip += n\n    //     return this\n    // }\n\n    [Symbol.asyncIterator](): AsyncIterator<Message> {\n        return this.source[Symbol.asyncIterator]();\n    }\n\n\n}\n\n/** @public */\nexport class ChannelStream extends Channel {\n    static version = '20240704.0'\n    sbChannelStreamReady: Promise<ChannelStream>\n    static ReadyFlag = Symbol('SBChannelStreamReadyFlag');\n    private channelSocket?: ChannelSocket;\n\n    // todo: the AI really doesn't like how i use this time stamp for\n    // filtering/managing what messages to look at. so far i think it's pointing\n    // to 'false positive' race conditions, but, conversely, this approach might\n    // be more error prone over time?\n    private latestTimestampStr = Channel.LOWEST_TIMESTAMP;\n\n    // for the (older) stream interface\n    private messageQueue = new MessageQueue<Message>();\n\n    // for the (newer) stream interface (spawn)\n    streamQueueArray: Map<symbol, MessageQueue<Message>> = new Map()\n\n    sb: ChannelApi\n    streamStarted = false\n    private restartInProgress = false\n\n    // the cache is shared by all streamobjects\n    public static globalMessageCache: MessageCache = new MessageCache()\n    public messageCache: MessageCache = ChannelStream.globalMessageCache\n\n    constructor() // requesting a new channel, no protocol\n    constructor(newChannel: null, protocol: SBProtocol) // requesting a new channel, with this protocol\n    constructor(key: SBUserPrivateKey, protocol?: SBProtocol)\n    constructor(handle: ChannelHandle, protocol?: SBProtocol)\n    constructor(handleOrKey?: ChannelHandle | SBUserPrivateKey | null, protocol?: SBProtocol) {\n        if (handleOrKey === null && protocol !== undefined)\n            super(null, protocol);\n        else if (handleOrKey === null && !protocol)\n            super()\n        else if (typeof handleOrKey === 'string')\n            super(handleOrKey as SBUserPrivateKey, protocol);\n        else\n            super(handleOrKey as ChannelHandle, protocol);\n\n        _assert(this.channelServer, \"Internal Error (channelServer not known) [L364]\")\n        this.sb = new ChannelApi(this.channelServer)\n\n        this.sbChannelStreamReady = new Promise<ChannelStream>(async (resolve) => {\n            await super.ready\n                ; (this as any)[ChannelStream.ReadyFlag] = true\n            if (DBG0) console.log(\"[channelStream] ChannelStream ready\")\n            resolve(this)\n        });\n    }\n\n    get latestTimeStampDate() { return Channel.base4StringToDate(this.latestTimestampStr) }\n\n    /** sees all messages regardless of source; keeps track of\n        latestTimestampStr; returns 'true' if this is a new message\n        ('new' from the perspective of the lifetime of this ChannelStream object) */\n    private processMessage = (message: Message | undefined) => {\n        _assert(typeof message !== 'undefined', \"Internal Error [L227]\")\n        const key = message!._id\n        const { channelId, timestamp } = Channel.deComposeMessageKey(key)\n        _assert(channelId === this.channelId, \"Internal Error [L376]\")\n        if (DBG2) console.log(\n            SEP,\n            \"[channelStream.processMessage] Evaluating time stamp\", timestamp, \"against\", this.latestTimestampStr, '\\n',\n            \"                               ... eg comparing new value:\", Channel.base4StringToDate(timestamp), '\\n',\n            \"                               ...          versus latest:\", Channel.base4StringToDate(this.latestTimestampStr), '\\n',\n            \"                               ... decision is to \" + (timestamp > this.latestTimestampStr ? \"UPDATE (and forward msg)\" : \"SKIP\"),\n            \"                               ... message:\\n\", message, '\\n',\n            SEP\n        )\n        if (timestamp > this.latestTimestampStr) {\n            this.latestTimestampStr = timestamp\n            return true\n        } else {\n            if (DBG0) console.log(\"[channelStream.processMessage] Skipping message, already processed:\", message)\n            return false\n        }\n    }\n\n    // websocket message handler given to the channel socket. enqueues it.\n    private processSocketMessage = async (msg: Message | string) => {\n        _assert(typeof msg !== 'string', \"Internal Error [L250]\") // will throw if it's a low-level messaging thing\n        const message = msg as Message\n        if (this.streamStarted) {\n            // older interface (one stream per ChannelStream object)\n            this.messageQueue.enqueue(message)\n        }\n        // newer interface (spawn)\n        for (const [_uniqueMessageSequenceId, q] of this.streamQueueArray) {\n            q.enqueue(message)\n        }\n    }\n\n    // starts live listener on channel websocket\n    startRestartSocket = async () => {\n        if (this.closingDown) throw new SBError(\"ChannelStream is closing down, cannot restart socket\")\n        if (this.restartInProgress) return\n        this.restartInProgress = true\n        try {\n            await this.sbChannelStreamReady\n            if (this.channelSocket) {\n                if (DBG0) console.log(SEP, \"[ChannelStream.startRestartSocket] RESTARTING channel socket ... \")\n                this.channelSocket.reset()\n            } else {\n                if (DBG0) console.log(SEP, \"[ChannelStream.startRestartSocket] Starting channel socket ... \")\n                // only spot in this file that should actually be creating a new socket\n                this.channelSocket = new ChannelSocket(this.handle, this.processSocketMessage, this.protocol);\n            }\n            this.channelSocket.errorPromise.catch((e: any) => {\n                if (!this.closingDown) {\n                    console.error(SEP, \"[ChannelStream.startRestartSocket] Error in channel socket:\", e, SEP)\n                    console.warn(\"[ChannelStream.startRestartSocket] Will wait 1 second then restart\")\n                    setTimeout(() => {\n                        if (DBG0) console.log(\"[ChannelStream.startRestartSocket] Restarting channel socket ... \")\n                        this.startRestartSocket()\n                    }, 2000)\n                }\n            });\n            await this.channelSocket.ready;\n        } catch (e) {\n            console.error(\"[ChannelStream.startRestartSocket] Error in startRestartSocket:\", e)\n            throw e\n        } finally {\n            this.restartInProgress = false\n        }\n        if (DBG0) console.log(\"[ChannelStream.startRestartSocket] ... channel socket ready\")\n    }\n\n    // given a set of keys, compares with what we have in our cache, and fetches\n    // anything missing, adding those to the cache. can handle large sets of keys.\n    private updateCacheWithTheseKeys = async (keys: Set<string>) => {\n        if (this.closingDown) throw new SBError(\"ChannelStream is closing down, cannot fetch messages\")\n        if (!isSet(keys)) throw new SBError(\"Internal Error [L338]\")\n        await this.messageCache.readyPromise\n        let newMessageKeys: string[] = [];\n        const cacheKeys = await this.messageCache.getKnownMessageKeys(\n            this.channelId!,\n            Channel.messageKeySetToPrefix(keys));\n        const newKeys = ChannelStream.difference(cacheKeys, keys);\n        if (DBG0) console.log(\"[channelStream.fetchMessages] These are new messages we need to fetch:\", newKeys);\n        if (newKeys.size === 0) {\n            if (DBG0) console.log(\"[channelStream.fetchMessages] No new messages\");\n            return newMessageKeys;\n        } else {\n            const keyArray = Array.from(newKeys)\n            const chunkSize = ChannelApi.MAX_MESSAGE_REQUEST_SIZE\n            for (let i = 0; i < keyArray.length; i += chunkSize) {\n                const chunk = keyArray.slice(i, i + chunkSize)\n                const newMessages = await this.getRawMessageMap(new Set(chunk))\n                if (DBG0) console.log(\"[channelStream.fetchMessages] New messages (RAW, these should pop up on stream):\", newMessages)\n                // add them all to the cache, nota bene in raw format\n                for (const [key, value] of newMessages) {\n                    await this.messageCache.add(key, value);\n                    newMessageKeys.push(key)\n                }\n            }\n            if (DBG0) console.log(\"New messages added to cache\")\n        }\n        return newMessageKeys.sort()\n    }\n\n    /** get complete 'DeepHistory' and populate cache with it, from first to last */\n    async getChannelHistory() {\n        try {\n            if (this.closingDown) throw new SBError(\"ChannelStream is closing down, cannot fetch messages\")\n            await this.sbChannelStreamReady\n            const channelHistory = await this.getHistory()\n            let count = 0\n            // todo: there's no optimization currently to keep track of what \"periods\" of messages\n            // are already in the cache; we're fetching and adding full history\n            await channelHistory.traverseMessagesEncrypted(\n                async (id: string, msg: ChannelMessage) => {\n                    if (DBG2) console.log(\"++++ MSG: \", id, \" [getChannelHistory]\")\n                    // our deep history is extracted, so we need to assemble\n                    const b = assemblePayload(msg)!\n                    await this.messageCache.add(id, b)\n                    count += 1\n                }\n            )\n            if (DBG0) console.log(SEP, `[getChannelHistory] Added ${count} messages to cache`, SEP)\n        } catch (e) {\n            console.trace(\"Error in getChannelHistory:\", e)\n            throw e\n        }\n    }\n\n    /**\n     * given a prefix, calls Channel.getMessageKeys with that prefix;\n     * then filters results through fetchMessages(). if we're offline, we will\n     * keep trying until we get a response. will pass results to \n     * updateCacheWithTheseKeys() and return the new keys (in array form),\n     * together with the history shard.\n     */\n    private syncCacheWithServer = async (prefix: string = '0') => {\n        // ToDo: this is older version, doesn't handle history here\n        if (this.closingDown) throw new SBError(\"ChannelStream is closing down, cannot fetch messages\")\n        await this.channelReady\n        let kh\n        try {\n            kh = await this.getMessageKeys(prefix); // calls Channel.getMessageKeys\n        } catch (e) {\n            const msg = `[channelStream.fetchCurrentMessageKeys] Error in fetchMessageKeys, cannot get updated keys (${e})`\n            if (msg.includes('offline')) {\n                // todo: we can have a better \"back online\" mechanism nowadays\n                if (DBG0) console.log(SEP, \"[channelStream.fetchMessageKeys] we are offline, we will keep trying\", SEP)\n                while (true) {\n                    await new Promise((resolve) => setTimeout(resolve, 1000))\n                    try {\n                        // we have some resilience here in kicking off reading messages\n                        kh = await this.getMessageKeys(prefix); // calls Channel.getMessageKeys\n                        break\n                    } catch (e) {\n                        if (DBG0) console.log(\"[channelStream.fetchCurrentMessageKeys] ... still offline, we will keep trying\")\n                    }\n                }\n            } else {\n                throw new SBError(msg)\n            }\n        }\n        try {\n            if (DBG2) console.log(\"[channelStream.fetchCurrentMessageKeys] Messages on server and shard:\", kh)\n            const keysArray = await this.updateCacheWithTheseKeys(kh.keys)\n            return keysArray\n        } catch (e) {\n            const msg = `[channelStream.fetchCurrentMessageKeys] Error, cannot get updated keys (${e})`\n            console.error(msg); throw new SBError(msg)\n        }\n    }\n\n    /**\n     * Simply inherits the channel's method, but will return an ChannelStream\n     * object. \n     */\n    async create(storageToken: SBStorageToken, channelServer?: ChannelId): Promise<ChannelStream> {\n        await super.create(storageToken, channelServer);\n        return (this)\n    }\n\n    get ready() { return this.sbChannelStreamReady }\n    get SBChannelStreamReadyFlag() { return (this as any)[ChannelStream.ReadyFlag] }\n\n    // separate from super because this shouldn't (?) need a @Ready decorator\n    @Memoize get channelId(): ChannelId { return super.channelId! }\n\n    // a couple of set operation helpers for dealing with message keys\n    static difference<T>(setA: Set<T>, setB: Set<T>): Set<T> {\n        // also called 'relative complement'\n        return new Set([...setB].filter(element => !setA.has(element)));\n    }\n    static union<T>(setA: Set<T>, setB: Set<T>): Set<T> {\n        return new Set([...setA, ...setB]);\n    }\n    static intersection<T>(setA: Set<T>, setB: Set<T>): Set<T> {\n        return new Set([...setA].filter(x => setB.has(x)));\n    }\n\n    private async* feedFromMessageCache(prefix?: string): AsyncGenerator<Message> {\n        if (DBG0) console.log(SEP, SEP_, `[feedFromMessageCache] Called, prefix '${prefix}'`, '\\n', SEP_, SEP)\n        if (this.closingDown) throw new SBError(\"ChannelStream is closing down, cannot fetch messages\")\n        await this.sbChannelStreamReady\n        if (!prefix) prefix = '0'\n        const messages = await this.messageCache.getKnownMessages(this.channelId, prefix)\n        // first we want to sort them so that we are returning inlexical order\n        const sortedKeys = Array.from(messages.keys()).sort() // ToDo: handle reverse here\n        if (DBG0) console.log(\"[feedFromMessageCache] Sorted keys:\", sortedKeys)\n        for (const key of sortedKeys) {\n            const storedMessage = await this.messageCache.get(key)\n            if (!storedMessage) throw new SBError(\"Internal Error [L523]\")\n            const b = extractPayload(storedMessage).payload\n            if (DBG0) console.log(\"[feedFromMessageCache] Got a stored message, extracted:\\n\", b)\n            const message = await this.extractMessage(b)\n            if (message) {\n                if (DBG0) console.log(\"[feedFromMessageCache] Got a well-formed message, time stamp:\", message.serverTimestamp)\n                if (await this.processMessage(message)) {\n                    if (DBG0) console.log(SEP, \"++++ MSG: \", message._id, \" [feedFromMessageCache]\", SEP)\n                    yield message\n                } else {\n                    if (DBG0) console.log(\"[feedFromMessageCache] Skipping this message, should we?\\n\", message)\n                }\n            } else if (DBG0) {\n                console.warn(\"[feedFromMessageCache] Got an undefined message (probably decryption issue)\")\n                // console.log(b)\n            }\n        }\n    }\n\n    // pulls messages from queue (that have come across ChannelSocket)\n    public async* getNewMessages(): AsyncGenerator<Message> {\n        // todo: (probably detail) understand AsyncGenerator vs AsyncIterableIterator in this situation?\n        if (this.closingDown) throw new SBError(\"ChannelStream is closing down, cannot fetch messages\")\n        await this.sbChannelStreamReady\n        try {\n            while (true) {\n                const message = await this.messageQueue.dequeue();\n                if (message === null) {\n                    if (DBG0) console.log(\"[getNewMessages] Queue is empty, breaking out ...\")\n                    break; // Queue closed, exit loop\n                }\n                if (DBG0) console.log(SEP, \"++++ MSG: \", message._id, \" [getNewMessages]\", SEP)\n                if (this.processMessage(message))\n                    yield message;\n            }\n        } catch (error) {\n            console.error(\"[getNewMessages] Error in getNewMessages:\", error)\n            throw error;\n        }\n    }\n\n    /**\n     * Start stream of messages from the channel. If prefix is provided, only\n     * that timestamp prefix and onward are streamed. Prefix can be a complete\n     * timestamp (in which case it's a unique message).  If reverse is true, the\n     * stream is in reverse. If no prefix is provided, or empty string '' as\n     * prefix, stream starts from 'now', with whatever is current latest\n     * message and any upcoming ones (and does not go back through history)\n     * \n     * To start from the beginning of time, use prefix '0', which will match\n     * any possible timestamp prefix.\n     * \n     * Nota bene, this returns an AsyncGenerator with type ''Message'':\n     * \n     * ```typescript\n     * \n     *    # prints all messages in channel, and stays 'live'\n     *    for await (const m of channelStream.start({ prefix: '0' })) {\n     *       console.log(\"Got message:\", m)\n     *    }\n     * \n     * Hint on patterns: if you want to first process in reverse for anything\n     * 'relevant', and then pick it back up going forward, then start your\n     * reverse, grab the first (eg latest) timestamp, and the create a separate\n     * ChannelStream with that same timestamp as prefix moving forward. When\n     * you're done with the reverse, you can pick up the stream going forward.\n     * This way you won't miss any messages.\n     * \n     * Note it defaults to leaving you connected. You can set option 'live' to\n     * false, and you will just process all the messages at the time you called 'start'.\n     * However if you called it with reverse, it will not leave you connected.\n     * \n     * Currently, you can't start with both prefix and reverse, eg reverse mode\n     * is always from latest message and backwards.\n     * \n     * NOTE: this is being deprecated in favor of 'spawn'.\n     */\n    public async* start(options: ChannelStreamOptions = {}) {\n\n        // todo: some possible things to consider:\n        // * the inner generator can take a parameter, so the end user api could\n        //   be expanded to allow consumer to, for example, 'jump around' in timestamps\n        // * end user consumer can call '.return()' to close stream\n        // * we could figure out how to make it simpler to have likely patterns\n        //   such as a consumer for history, and at the same time provide a\n        //   consumer for 'live and onwards'.\n\n        if (this.closingDown) throw new SBError(\"[ChannelStream.start] ChannelStream is closing down, cannot fetch messages\")\n        if (this.streamStarted) throw new SBError(\"[ChannelStream.start] Stream already started (only one stream per channelStream object)\")\n        this.streamStarted = true\n        const { prefix = '', reverse = false, live = true } = options\n        if (reverse) {\n            if (reverse || live) throw new SBError(\"[ChannelStream.start] If running in reverse, cannot (currently) have prefix or run 'live'\")\n            if (DBG0) console.log(SEP, `[ChannelStream.start] Starting in REVERSE`, SEP)\n            throw new SBError(\"Reverse not implemented yet\")\n            // yield* this.getNewMessages();\n        } else {\n            if (!prefix || prefix === '' || prefix === \"\") {\n                if (DBG0) console.log(SEP, `[ChannelStream.start] Starting from 'live' point of messages, nothing historical`, SEP)\n                if (live) this.startRestartSocket()\n                yield* this.getNewMessages();\n            } else {\n                if (DBG0) console.log(SEP, `[ChannelStream.start] Starting HISTORICALLY with prefix: ${prefix}`, SEP)\n\n                this.latestTimestampStr = Channel.LOWEST_TIMESTAMP // lowest possible\n\n                // we kick off websocket so we don't miss new stuff; these will queue up in this.messageQueue\n                if (live) /* await */ this.startRestartSocket()\n\n\n                // await this.getChannelHistory() // fetches ALL messages in history and populates cache\n                await this.syncCacheWithServer(prefix) // fetches anything the server has and adds to cache\n\n                yield* this.feedFromMessageCache(prefix);\n                if (live) yield* this.getNewMessages();\n\n                //  else {\n                //     // whatever is in the queue, is what's there\n                //     this.messageQueue.close()\n                // }\n            }\n        }\n    }\n\n    /**\n     * Returns an AsyncSequence of messages from the channel. This is the\n     * newer design to process messages, and will supercede 'start'.\n     */\n    async spawn(options: ChannelStreamOptions = {}): Promise<AsyncSequence<Message>> {\n        return new MessageSequence(this, options);\n    }\n\n    async close() {\n        this.closingDown = true\n        this.messageQueue.close()\n        if (this.channelSocket)\n            await this.channelSocket.close()\n        await super.close()\n            ; (this as any)[ChannelStream.ReadyFlag] = false\n    }\n\n    async send(contents: any, options?: MessageOptions) {\n        await this.ready\n        if (this.channelSocket) {\n            if (DBG0) console.log(\"[channelStream] Sending via channelSocket ...\")\n            return this.channelSocket.send(contents, options);\n        } else {\n            if (DBG0) console.log(\"[channelStream] Sending via super (Channel) ...\")\n            return super.send(contents, options);\n        }\n    }\n\n}\n\nif (DBG0) console.log(\"==== ChannelStream '\" + ChannelStream.version + \"' loaded ====\")\n\n", "// (c) 2023-2024 384 (tm)\n\n// 384 file system\n\nimport {\n    // ChannelSocket, // USE_CHANNEL_STREAMS\n    arrayBufferToBase62,\n    assemblePayload,\n    Channel,\n    ChannelApi,\n    ChannelHandle,\n    Message,\n    ObjectHandle,\n    Protocol_AES_GCM_256,\n    Protocol_KeyInfo,\n    SBError,\n    SBProtocol,\n    SBUserId,\n    SBUserPublicKey,\n    StorageApi,\n} from '../index';\n\nimport {\n    _check_ObjectHandle,\n} from '../storage/ObjectHandle';\n\nimport {\n    fetchPayload\n} from '../storage/core'\n\nimport { SBFile } from './SBFile';\n\nimport { BrowserFileHelper } from '../browser/BrowserFileHelper';\nimport { MessageType } from '../channel/MessageType';\nimport { ChannelStream } from '../channel/ChannelStream';\n\n// import { preview File } from '../browser/preview';\n\nvar DBG0 = false;\nvar DBG2 = false;\n\n// refactoring / transitioning to streams for sbfs\nconst USE_CHANNEL_STREAMS = true;\n\nconst SEP = '\\n' + '='.repeat(76) + '\\n';\n\n/**\n * Meta data on each FileSet, included in ledger. Sort of a 'meta-meta' set of\n * data, this tracks when/where the set came from on the ledger. \n * @public\n */\nexport interface FileSetMeta {\n    _id: string, // uncommented to fix issue with multiple file sets not showing; ToDo, finalize\n    senderUserId: SBUserId,\n    senderPublicKey: SBUserPublicKey,\n    serverTimestamp: number,\n    fileSet: Map<string, SBFile>,\n    fileSetShard: ObjectHandle,\n    // optional:\n    count?: number,\n    totalBytes?: number\n}\n\n/**\n * 'SBFS': Creates a file system abstraction given server information and\n * channel handles. Ledger handle is used for all file system meta data, and\n * budget handle is used as funding source for any uploads.\n *\n * You could use the same channel for both functions, but then you get the\n * classic problem that when you're out of funds, everything freezes. This is\n * analogous to how a traditional operating system, which will reserve both\n * in-memory and on-disk space for it's own critical functions.\n *\n * Upon creation, SBFS will fetch all previous file sets from the ledger. It\n * will call 'newFileSet' callback for each one, if a UI wants to dynamically be\n * made aware of them.\n * \n * @public\n */\nexport class SBFileSystem {\n    public static version = '3.20240519.0';\n    SB: ChannelApi;\n\n    // static currentFileList: Array<SBFile> = [];\n    // knownShards = BrowserFileHelper.knownShards\n    // static fileHelper: BrowserFileHelper = new BrowserFileHelper();\n\n    fileSetMap: Map<string, FileSetMeta> = new Map();\n    budget?: Channel;\n    ledger?: Channel;\n    ledgerHandle?: ChannelHandle;\n    ledgerProtocol?: Protocol_AES_GCM_256;\n\n    // USE_CHANNEL_STREAMS\n    // ledgerSocket?: ChannelSocket;\n\n    // ToDo: currently we can only handle one set being uploaded at a time (per\n    // SBFileSystem instance)\n    newFileMap: Map<string, SBFile> = new Map()\n    toUpload: Array<string> = []\n    uploaded: Array<string> = []\n\n    initialized = false;\n\n    fetchPayload = fetchPayload; // convenience / compatibility\n\n    /** Minimal option is the channelServer, everything else is more advanced */\n    constructor(\n        public options: {\n            // at minimum, we need a channel server\n            channelServer: string,\n            // everything else is for more advanced usage\n            username?: string,\n            appServer?: string,\n            ledgerHandle?: ChannelHandle,\n            ledgerPassPhrase?: string,\n            ledgerKey?: Protocol_KeyInfo,\n            budgetHandle?: ChannelHandle\n        },\n        public callbacks: {\n            /** Called for all sets of files encountered on a stream */\n            newFileSet?: (meta: FileSetMeta) => void, // previously 'processNewTable'\n            /** UI callback for any long-running tasks */\n            setProgressBarWidth?: (width: number) => void,\n        }\n    ) {\n        // console.log(\"SBFileSystem constructor\");\n        this.SB = new ChannelApi(this.options.channelServer)\n\n        if (!this.options.ledgerKey)\n            // if not provided, we use a fixed value. good enough in many cases.\n            // note, this will NOT change, it is fixed for SBFileSystem \n            this.options.ledgerKey = {\n                salt1: new Uint8Array([236, 15, 149, 57, 16, 61, 101, 82, 24, 206, 80, 70, 162, 38, 253, 33]),\n                iterations1: 100000,\n                iterations2: 10000,\n                hash1: \"SHA-256\",\n                summary: \"PBKDF2 - SHA-256 - AES-GCM\"\n            }\n\n        if (options.budgetHandle)\n            this.budget = this.SB.connect(options.budgetHandle) // we won't be messaging on this\n\n        if (options.ledgerHandle) {\n            options.ledgerHandle.channelServer = options.channelServer // in case it's not set\n            this.ledgerHandle = options.ledgerHandle\n        }\n\n        if (options.ledgerHandle && options.ledgerPassPhrase) {\n            this.ledgerProtocol = new Protocol_AES_GCM_256(options.ledgerPassPhrase, this.options.ledgerKey)\n            this.ledger = new Channel(options.ledgerHandle, this.ledgerProtocol) // we _will_ be messaging on this\n        }\n    }\n\n    // USE_CHANNEL_STREAMS\n    // init = async () => {\n    //     // we process old sets on the ledger\n    //     this.initialized = true;\n    //     if (this.options.ledgerHandle && this.ledger && this.ledgerProtocol) {\n    //         await this.fetchPreviousFileSets()\n    //         // and then we open channel socket for new communications\n    //         this.ledgerSocket = new ChannelSocket(this.options.ledgerHandle, this.receiveMessage, this.ledgerProtocol)\n    //         await this.ledgerSocket.ready\n    //     }\n    // }\n\n    // USE_CHANNEL_STREAMS\n    // private fetchPreviousFileSets = async () => {\n    //     if (!this.ledger) throw new Error(\"[SBFileSystem] Internal error (L133).\")\n    //     const old = await this.ledger.getMessageKeys()\n    //     if (DBG0) console.log(`++++ got ${old.keys.size} old messages`, old)\n    //     if (old.keys.size === 0) return;\n    //     const messages = await this.ledger.getMessageMap(old.keys)\n    //     for (const m of messages.values())\n    //         await this.receiveMessage(m)\n    // }\n\n    // USE_CHANNEL_STREAMS\n    /** Starts up a SBFileSystem against a stream */\n    async spinUpStream(handle: ChannelHandle, protocol: SBProtocol) {\n        if (!USE_CHANNEL_STREAMS) throw new Error(\"This function is only for use with channel streams\")\n        const channelStream = await (new ChannelStream(handle, protocol)).ready\n        const stream = channelStream.start({ prefix: '0' }); // '0' means full history of messagers\n        if (DBG0) console.log(SEP, \"[spinUpStream] Stream started\", SEP)\n        for await (const message of stream) {\n            if (DBG2) console.log(\"[spinUpStream] Message: \", message.body)\n            await this.receiveMessage(message)\n        }\n        if (DBG0) console.log(SEP, \"[spinUpStream] DONE\")\n    }\n\n    // USE_CHANNEL_STREAMS\n    /** FileSystems need to be initialized (which might spin up stream) */\n    init = async () => {\n        // we process old sets on the ledger\n        this.initialized = true;\n        if (this.options.ledgerHandle && this.ledger && this.ledgerProtocol) {\n            this.spinUpStream(this.options.ledgerHandle, this.ledgerProtocol) // ToDo: mechanism for shutting down\n        } else {\n            console.error(\"[SBFileSystem] No ledger handle or protocol, cannot initialize.\")\n        }\n    }\n\n    // called when we know all the parts (shards) of the set have been uploaded\n    private doneUploadingSet = async () => {\n        if (!this.ledger || !this.options.budgetHandle)\n            throw new Error(\"[SBFileSystem] Ledger or budget handle not set up, cannot upload sets.\")\n        console.log(\"++++ done uploading set\")\n        if (this.newFileMap.size === 0) {\n            throw new Error(\"Internal Error (L149)\")\n        }\n\n        // first we update all file metadata with handles\n        this.newFileMap.forEach((value, key) => {\n            if (!value.hash) throw new Error(\"Internal Error (L154)\")\n            if (value.size && value.size > SBFile.MAX_SBFILE_CHUNK_SIZE) {\n                if (value.hashArray) {\n                    value.handleArray = value.hashArray.map(hash => ChannelApi.knownShards.get(hash)!);\n                } else {\n                    console.warn(\"[doneUploadingSet] Large file but 'hashArray' already clearee? Internal Warning (L193)\")\n                }\n                value.hashArray = undefined; // we don't need this anymore\n            } else {\n                // common case, single shard per file\n                const handle = ChannelApi.knownShards.get(value.hash)\n                if (!handle) throw new Error(\"Internal Error (L199)\")\n                this.newFileMap.get(key)!.handleArray = [handle!]\n            }\n        });\n\n        // we create a hash off the fileMetaDataMap\n        const b = assemblePayload(this.newFileMap)!;\n        const hash = arrayBufferToBase62(await globalThis.crypto.subtle.digest('SHA-256', b)).slice(0, 12);\n\n        // so now we send the set/metadata as a message\n        // const sbFile: SBFile = {\n        //     _SBFSVersion: '2024-02-01-0002',\n        //     hash: hash,\n        //     sb384app: true,\n        //     sb384appType: 'fileSetV03',\n        //     name: `FileSet ${Date.now()}`,\n        //     type: 'application/vnd.384.sb384app',\n        //     fileMetaDataMap: this.newFileMap\n        // }\n        const sbFile: SBFile = new SBFile({\n            hash: hash,\n            sb384app: true,\n            sb384appType: 'fileSetV03',\n            name: `FileSet ${Date.now()}`,\n            type: 'application/vnd.384.sb384app',\n            fileMetaDataMap: this.newFileMap\n        })\n        // const fileSetObject = await this.uploadFile(sbFile)\n        const fileSetObject: ObjectHandle = await this.SB.storage.storeData(sbFile, this.options.budgetHandle)\n        this.ledger.send({\n            messageType: MessageType.MSG_FILE_SET,\n            fileSetShard: fileSetObject,\n            // fileSet: sbFile\n        })\n        // This is a bit of a hack, but we're done uploading, so we send 100% to the progress bar\n        // Helps cover cases where files are already known, an app dev would expect this to be 100%\n        if (this.callbacks.setProgressBarWidth)\n            this.callbacks.setProgressBarWidth(100);\n       \n        if (DBG0) console.log(\"++++ file set shard info has been sent as message on ledger\")\n    }\n\n    /**\n     * Given a file list, creates and uploads the set; makes sure all shards are\n     * uploaded. If everything went fine, returns 'null', otherwise an error string.\n     */\n    uploadNewSet = async (fileList: Array<SBFile>): Promise<string | null> => {\n        let error: string | null = null;\n        if (!this.initialized) throw new Error(\"[SBFileSystem] Not initialized (L189).\")\n        if (!fileList || fileList.length === 0) throw new Error(\"No files to upload\")\n        console.log(\"[uploadNewSet] new set:\", fileList)\n\n        try {\n            this.newFileMap = new Map()\n            for (const f of fileList) {\n                if (!f.hash) throw new Error(\"Internal Error (L195)\")\n                this.newFileMap.set(f.hash, f)\n            }\n\n            // ToDo: currently code only allows one set at a time, we need to allow\n            // multiple.\n\n            // We reset these arrays\n            this.toUpload = []\n            this.uploaded = []\n\n            if (this.toUpload.length > 0) {\n                // toUpload and uploaded will be reset by message handler\n                console.error(\"++++ already uploading files, please wait ...\")\n                return \"[uploadNewSet] Already uploading a set of files, cannot (yet) upload sets in parallel.\"\n            }\n\n            // we make sure all shards are uploaded first before sending 'set' info;\n            // iterate over all Map() entries and upload them\n\n            // ToDo: move to UI interface code\n            const loadingBar = document.querySelector('.loading-bar') as HTMLElement;\n            if (!loadingBar)\n                console.warn(\"loading bar not found\")\n            else\n                loadingBar.style.display = 'block';\n\n            const uploadPromises = []\n            for (const f of fileList) {\n                if (error) {\n                    console.error(\"[uploadNewSet] Error in previous file, aborting (L279):\", error)\n                    return error;\n                }\n                // const fileHash = value.uniqueShardId!;\n                if (!f.hash) throw new Error(\"Internal Error (L225)\")\n                if (!f.size) f.size = 0 // throw new Error(\"Internal Error (L226)\")\n                if (f.size > SBFile.MAX_SBFILE_CHUNK_SIZE) {\n                    if (!f.browserFile) throw new Error(\"Large file but no 'browserFile' to work with. Internal Error (L238)\")\n                    if (DBG0) console.log(`---- uploading LARGE file:`, f)\n                    f.hashArray = []\n                    // we first load the whole file into memory\n                    const buffer = await f.browserFile.arrayBuffer()\n                    const chunkSize = SBFile.MAX_SBFILE_CHUNK_SIZE\n                    const chunks = Math.ceil(f.size / chunkSize)\n                    for (let i = 0; i < chunks; i++) {\n                        await StorageApi.paceUploads()\n                        if (error) {\n                            console.error(\"[uploadNewSet] Error in previous file, aborting (L296):\", error)\n                            return error;\n                        }\n                        const start = i * chunkSize\n                        const end = Math.min(f.size, (i + 1) * chunkSize)\n                        const chunk = buffer.slice(start, end)\n                        const hash = arrayBufferToBase62(await crypto.subtle.digest('SHA-256', chunk)).slice(0, 12);\n                        f.hashArray.push(hash)\n                        uploadPromises.push(\n                            this.uploadBuffer(chunk)\n                                .catch((e) => {\n                                    console.error(\"[uploadNewSet] Error uploading chunk (L307), will throw:\", e)\n                                    error = e.message\n                                    throw(e)\n                                }));\n                    }\n                    const joinedHashes = f.hashArray.join('')\n                    f.hash = arrayBufferToBase62(await crypto.subtle.digest('SHA-256', new TextEncoder().encode(joinedHashes))).slice(0, 12);\n                    // debugger;\n                } else {\n                    if (ChannelApi.knownShards.has(f.hash)) {\n                        if (DBG0) console.log(`---- skipping ${f.hash} shard (already known / published)`);\n                        continue;\n                    }\n                    await StorageApi.paceUploads()\n                    if (error) return error;\n                    if (DBG0) console.log(`---- uploading file:`, f)\n                    // uploadPromises.push(this.uploadSetEntry(fileHash))\n                    uploadPromises.push(this.uploadFile(f))\n                }\n            }\n            // wait for all of them to be done\n            await Promise.all(uploadPromises).catch((e) => {\n                console.error(\"[uploadNewSet] Error in uploadPromises, propagated to 'all' (L329):\", e)\n                error = e.message;\n            })\n            console.log(\"++++ all files have been sent to be uploaded\")\n\n            // special case is if the set contains only known shards, in which case set can be sent right away\n            // (because we won't get a 'callback' that we're done from returning messages)\n            if (this.toUpload.length === 0) {\n                console.log(\"++++ all files already uploaded\")\n                this.doneUploadingSet()\n            }\n            return error; // will be 'null' if all went well\n        } catch (e: any) {\n            console.error(\"[uploadNewSet] Interrupted uploads (L342):\", e)\n            return e.message\n        }\n    }\n\n    /** \n     * Returns buffer contents matching a known buffer (hash); throws if not\n     * actually known. Note that if the corresponding shard (handle) is known\n     * but not downloaded, it will be downloaded, and that returned.\n     */\n    getFileBuffer = async (hash: string): Promise<ArrayBuffer> => {\n        if (BrowserFileHelper.knownBuffers.has(hash)) {\n            return BrowserFileHelper.knownBuffers.get(hash)!\n        } else if (ChannelApi.knownShards.has(hash)) {\n            // const handle = await this.sbfs.fetchData(BrowserFileHelper.knownShards.get(hash)!)\n            const buffer = await this.fetchPayload(ChannelApi.knownShards.get(hash)!)\n            if (buffer instanceof ArrayBuffer) {\n                // BrowserFileHelper.knownShards.set(hash, handle) // update\n                return buffer\n            } else {\n                throw new Error(\"Could not fetch buffer for hash: \" + hash)\n            }\n        } else {\n            throw new Error(\"Cannot find contents of file (neither in globalBufferMap nor in knownShards)\")\n        }\n\n\n        // let handle = BrowserFileHelper.knownShards.get(hash)\n        // if (handle) {\n        //     if (!handle.data) {\n        //         handle = await this.sbfs.fetchData(handle)\n        //         BrowserFileHelper.knownShards.set(hash, handle)\n        //     }\n        //     if (!handle.payload) throw new Error(\"handle.payload is missing\")\n        //     // data = StorageApi.getData(BrowserFileHelper.knownShards.get(hash))!\n        //     data = handle.payload\n        // } else {\n        //     data = BrowserFileHelper.knownBuffers.get(hash)!\n        // }\n        // if (data) {\n        //     console.log(SEP, `For file hash '${hash}', previewing buffer:`, SEP, data, SEP)\n        //     await preview File(data, mimeType, {}) // actually in browser/preview.ts\n        // } else {\n        //     throw new Error(\"Cannot find contents of file (neither in globalBufferMap nor in knownShards)\")\n        // }\n    }\n\n    /**\n     * This takes a 'finished' file set, and stores it on the ledger; computes\n     * some stats. Upon completion, callback is given updated FileSetMeta.\n     */\n    addFileSet = async (fileSetMeta: FileSetMeta) => {\n        if (!this.initialized) throw new Error(\"[SBFileSystem] Not initialized (L291).\")\n        if (!fileSetMeta.fileSetShard || !fileSetMeta.fileSetShard.id) {\n            console.warn(\"---- File set (meta) does not have a shard ID, skipping whole set\")\n            return\n        }\n        if (!fileSetMeta.fileSet || !(fileSetMeta.fileSet instanceof Map)) {\n            console.warn(\"---- File set (meta) does not have any files ('fileSet' missing or is not a Map), skipping whole set: \\n\", fileSetMeta)\n            return\n        }\n        this.fileSetMap.set(fileSetMeta.fileSetShard.id, fileSetMeta)\n        if (DBG0) console.log(\"---- File set (meta) contents added:\\n\", fileSetMeta)\n        if (DBG2) console.log(\"---- ... fileSetMap is now:\\n\", this.fileSetMap)\n        let count = 0;\n        let totalBytes = 0;\n        let lastDate = new Date(0); // Initialize with Epoch Time\n        for (let value of fileSetMeta.fileSet.values()) {\n            count++;\n            totalBytes += value.size || 0;\n            if (value.lastModified && typeof value.lastModified === 'string') {\n                const currentLastModified = new Date(value.lastModified);\n                if (currentLastModified > lastDate)\n                    lastDate = currentLastModified;\n            }\n        }\n        if (DBG2)\n            console.log(\n                SEP,\n                'File Set Meta:', '\\n',\n                `Count: ${count}`, '\\n',\n                `Total Bytes: ${totalBytes}`, '\\n',\n                `Last Modified: ${lastDate}`, '\\n',\n                'Sender UserID: ', fileSetMeta.senderUserId,\n                SEP)\n\n        if (this.callbacks.newFileSet) {\n            fileSetMeta.count = count;\n            fileSetMeta.totalBytes = totalBytes;\n            this.callbacks.newFileSet(fileSetMeta)\n        }\n    }\n\n    /**\n     * Processes incoming messages. Returns the message 'type', if it was understood\n     * and acted upon, otherwise returns null.\n     */\n    receiveMessage = async (msg: Message | string): Promise<string | null> => {\n        if (typeof msg === 'string') {\n            if (DBG2) console.log(SEP, \"[SBFileSystem] ++++ Received message (string), ignoring: '\", msg, \"'\", SEP)\n            return null;\n        }\n        const body = msg.body\n        if (DBG2) console.log(SEP, \"[SBFileSystem] ++++ Received message:\\n  \", body, SEP)\n        switch (body.messageType) {\n            case MessageType.MSG_FILE_SET:\n                if (DBG2) console.log(\"==== File Set Message received\")\n\n                let fileSet: Map<string, SBFile>\n\n                // first we get the file set from the shard in body.fileSetShard\n                if (body.fileSetShard) {\n                    // const fileSetObject = await this.downloadFile(body.fileSetShard) as SBFile\n                    const fileSetObject = new SBFile(await this.downloadFile(body.fileSetShard));\n                    fileSet = fileSetObject.fileMetaDataMap!\n                } else if (body.fileSet) {\n                    fileSet = body.fileSet\n                } else {\n                    console.error(\"No file set or file set shard in message\")\n                    break;\n                }\n                // const fileSetObject = body.fileSet as SBFile\n\n                // const receivedFileList = new Map()\n                // for (const [key, value] of fileSetObject.fileMetaDataMap!.entries()) {\n                //     receivedFileList.set(key, value)\n                // }\n\n                if (!(fileSet instanceof Map)) {\n                    console.warn(\"[SBFileSystem] Received file set, but it doesn't contain a file set (ignoring)\")\n                    break;\n                }\n\n                const fs: FileSetMeta = {\n                    _id: msg._id,\n                    senderUserId: msg.sender,\n                    senderPublicKey: msg.senderPublicKey,\n                    serverTimestamp: msg.serverTimestamp,\n                    fileSet: fileSet, // fileSetObject.fileMetaDataMap!,\n                    fileSetShard: body.fileSetShard,\n                }\n\n                await this.addFileSet(fs)\n\n                if (DBG0) console.log(\"---- Received MSG_FILE_SET: \", fs);\n                break;\n            case MessageType.MSG_NEW_SHARD:\n                // console.log(\"==== New Shard Message received\")\n                // const obj = JSON.parse(message.contents)\n                // Tracks progress\n                if (this.toUpload.length > 0) {\n                    if (this.toUpload.includes(body.hash)) {\n                        this.uploaded.push(body.hash)\n                        if (this.callbacks.setProgressBarWidth)\n                            this.callbacks.setProgressBarWidth(Math.ceil(this.uploaded.length / this.toUpload.length * 100));\n                        if (this.uploaded.length === this.toUpload.length) {\n                            console.log(\"++++ all files uploaded\")\n                            this.doneUploadingSet()\n                            // ready for new sets:\n                            this.toUpload = []\n                            this.uploaded = []\n                        }\n                    }\n\n                }\n                ChannelApi.knownShards.set(body.hash, body.handle)\n                ChannelApi.knownShards.set(body.hash.slice(0, 12), body.handle)\n                break;\n            case 'PING':\n                console.info(\"[SBFileSystem] PING message received\")\n                break;\n            default:\n                if (DBG2) console.info('---- Ignoring unknown message type:', body.messageType);\n                return null\n        }\n        return (body.messageType)\n    }\n\n    /** Convenience, uploads just a buffer */\n    uploadBuffer = async (buffer: ArrayBuffer, hash?: string) => {\n        if (!this.initialized) throw new Error(\"[SBFileSystem] Not initialized (L406).\")\n        if (!this.ledger || !this.options.budgetHandle)\n            throw new Error(\"[SBFileSystem] Ledger or budget handle not set up, cannot upload files. (L395\")\n        const verifyHash = arrayBufferToBase62(await crypto.subtle.digest('SHA-256', buffer)).slice(0, 12);\n        if (!hash)\n            hash = verifyHash\n        else if (hash !== verifyHash)\n            throw new Error(`[uploadBuffer] Hash mismatch: ${hash} !== ${verifyHash}`)\n\n        if (ChannelApi.knownShards.has(hash)) {\n            console.info(`[uploadBuffer] Shard already known: ${hash}`)\n            return ChannelApi.knownShards.get(hash)\n        }\n\n        this.toUpload.push(hash)\n        const handle = await this.SB.storage.storeData(buffer, this.options.budgetHandle)\n        await handle.verification\n        console.log(\"WE GOT BACK HANDLE:\", handle)\n\n        // now we add it to the set of known hash->handle mappings\n        ChannelApi.knownShards.set(hash, handle)\n        ChannelApi.knownShards.set(hash.slice(0, 12), handle) // find on prefix\n\n        // clear it from 'knownBuffers' (it's now sharidifed), in case it's there (it might not be)\n        BrowserFileHelper.knownBuffers.delete(hash)\n\n        // add knowledge on the ledger; ToDo possibly batch for large sets?\n        const obj = { messageType: MessageType.MSG_NEW_SHARD, hash: hash, handle: handle, senderUsername: this.options.username }\n        await this.ledger.send(obj)\n\n        return handle\n    }\n\n    /** Main workhorse, uploads a file. */\n    uploadFile = async (file: SBFile) => {\n        if (!this.initialized) throw new Error(\"[SBFileSystem] Not initialized (L522).\")\n        if (!this.ledger || !this.options.budgetHandle)\n            throw new Error(\"[SBFileSystem] Ledger or budget handle not set up, cannot upload files. (L395\")\n        // TODO: another bit of confusion, this actually only uploads a file when\n        //       working in the BrowserFileHelper 'context'. refactor?\n        StorageApi.paceUploads()\n        console.log(\"[uploadFile] file:\", file)\n        if (!file.hash) throw new SBError(\"file.hash is missing\")\n        const buffer = BrowserFileHelper.knownBuffers.get(file.hash)\n        if (!buffer)\n            throw new SBError(`**** failed to find buffer for ${file.hash}`)\n\n        console.log(SEP, `For file hash '${file.hash}', uploading buffer:`, buffer, SEP);\n\n        // this.toUpload.push(file.hash)\n        // const handle = await this.SB.storage.storeData(buffer, this.options.budgetHandle)\n        // await handle.verification\n        // console.log(\"WE GOT BACK HANDLE:\", handle)\n\n        // // now we add it to the set of known hash->handle mappings\n        // ChannelApi.knownShards.set(file.hash, handle)\n        // ChannelApi.knownShards.set(file.hash.slice(0, 12), handle) // find on prefix\n\n        // // clear it from 'knownBuffers' (it's now sharidifed)\n        // BrowserFileHelper.knownBuffers.delete(file.hash)\n\n        // // our mapping object\n        // const obj = { messageType: MessageType.MSG_NEW_SHARD, hash: file.hash, handle: handle, senderUsername: this.options.username }\n        // const response = await this.ledger.send(obj)\n\n        const handle = await this.uploadBuffer(buffer, file.hash)\n\n        console.log(`++++ File shard has been sent on channel:`, handle);\n    }\n\n    /**\n     * Convenience wrapper around ChannelApi's fetchData.\n     */\n    async fetchData(handle: ObjectHandle): Promise<ObjectHandle> {\n        return this.SB.storage.fetchData(handle);\n    }\n\n    /** Download an SBFile */\n    async downloadFile(handle: ObjectHandle): Promise<SBFile> {\n        handle = await this.fetchData(handle);\n        // const sbFile = await this.SB.storage.fetchPayload(handle) as SBFile;\n        const sbFile = new SBFile(await this.SB.storage.fetchPayload(handle))\n        // for now, this is our only sanity check that this is actually an SBFile\n        if (sbFile._SBFSVersion !== '2024-02-01-0002') {\n            console.warn(\"[SBFS] File version not supported, or is not an SBFile. Will try to process anyway.\")\n        }\n        // sbFile.uniqueShardId = handle.id;\n        return sbFile;\n    }\n\n    // async fetchPayload(fileOrHandle: SBFile | ObjectHandle): Promise<any> {\n    //     // ToDo: we probably need to refactor some confusion between the role of\n    //     // \"SBFile\" and \"ObjectHandle\" in the API; in the meantime, we'll use\n    //     // this wrapper function to paper over some cracks\n    //     if (!fileOrHandle) throw new SBError(\"[SBFS] No file or handle provided\");\n    //     let handle: ObjectHandle = fileOrHandle as ObjectHandle;\n    //     if (!_check_ObjectHandle(handle)) {\n    //         const file = fileOrHandle as SBFile;\n    //         if (file.file) throw new SBError(\"[SBFS] Type handling for inline files not yet implemented\");\n    //         if (!file.handle) throw new SBError(\"[SBFS] No handle in SBFile, cannot fetch file contents\");\n    //         handle = file.handle;\n    //         if (!_check_ObjectHandle(handle)) throw new SBError(\"[SBFS] Invalid handle in SBFile\");\n    //     }\n    //     const downloadedFile = await this.fetchData(handle);\n    //     if (!downloadedFile.payload) throw new SBError(\"[SBFS] No payload in downloaded file\");\n    //     return downloadedFile.payload;\n    // }\n\n\n\n    // // older/simpler interface, just gives you the buffer; note that it\n    // // hard-codes the assumption that 'payload' is an ArrayBuffer\n    // async downloadBuffer(handle: ObjectHandle) {\n    //     handle = await this.SB.storage.fetchData(handle);\n    //     return handle.payload as ArrayBuffer;\n    // }\n\n}\n\n\nif (DBG0) console.warn(\"==== SBFileSystem.ts \" + SBFileSystem.version + \" loaded ====\")\n\n\n// deprecated\n// uploadBuffer() \n// return new Promise((resolve) => {\n//     if (!this.SB.storage) {\n//         console.log(\"'this.server': \", this.SB);\n//         throw new SBError(\"storage not initialized\")\n//     }\n//     this.SB.storage.storeData(data, this.budgetChannel).then((res) => {\n//         // res.fileName = name\n//         res.dateAndTime = new Date().toISOString()\n//         Promise.resolve(res.verification).then((v) => {\n//             res.verification = v as string;\n//             resolve(res)\n//         })\n//     })\n// })\n\n// async uploadFile(file: SBFile): Promise<ObjectHandle> {\n//     if (!this.budgetChannel) throw new SBError(\"[SBFS] No budgetchannel provided, cannot upload file.\");\n//     if (file._SBFSVersion) throw new SBError(\"file._SBFSVersion already defined, reserved for SBFS\");\n//     file._SBFSVersion = '2024-02-01-0002';\n//     file.timeStamp = Date.now();\n//     if (file.file) file.actualFileSize = file.file.byteLength\n//     const res = await this.SB.storage.storeData(file, this.budgetChannel);\n//     res.verification = await res.verification\n//     return res;\n// }\n\n// UPDATE ... no longer relevant, i think?  (was part of \"sbfs\")\n// uploadBrowserFileList(myChannelId: ChannelId, fileMap: Map<any, any>, bufferMap: Map<any, any>) {\n//     console.info('uploadBrowserFileList() not implemented yet')\n//     console.log(myChannelId, fileMap, bufferMap)\n//     // ToDo: take from multi-file demo\n//     // return new Promise((resolve) => {\n//     //     let promises: Promise<Interfaces.ObjectHandle>[] = [];\n//     //     for (let i = 0; i < fileList.length; i++) {\n//     //         promises.push(this.uploadBuffer(myChannelId, fileList[i], fileList[i].name));\n//     //     }\n//     //     Promise.all(promises).then((res) => {\n//     //         resolve(res);\n//     //     });\n//     // });\n// }\n\n\n\n\n// // async uploadCurrentFiles(myChannelId: ChannelId, callback: (res: ObjectHandle) => void) {\n// //   if (DBG0) console.log(\"==== uploadCurrentFiles() ====\");\n// //   let directory: { [key: string]: string } = {};\n// //   console.log(\"Current file list: \")\n// //   console.log(this.currentFileList);\n// //   this.currentFileList.forEach((value: { [key: string]: any }, key: string) => {\n// //     if (DBG0) console.log(\"File: \" + value.name);\n// //     let dirEntry = getProperties(value, [\"name\", \"type\", \"size\", \"lastModified\", \"webkitRelativePath\"]);\n// //     directory[key] = dirEntry as unknown as string;\n// //   });\n// //   console.log(\"Directory: \");\n// //   console.log(directory);\n// // }\n\n// /**\n//  * SBFile\n//  * @class\n//  * @constructor\n//  * @public\n//  */\n// export class SBFile extends SBMessage {\n//   // encrypted = false\n//   // contents: string = ''\n//   // senderPubKey: CryptoKey\n//   // sign: Promise<string>\n\n//   data: Dictionary<string> = {\n//     previewImage: '',\n//     fullImage: ''\n//   }\n//   // (now extending SBMessage)\n//   image = '';\n//   image_sign = '';\n//   // imageMetaData: ImageMetaData = {}\n\n//   // file is an instance of File\n//   constructor(channel: Channel, file: File /* signKey: CryptoKey, key: CryptoKey */) {\n//     super(channel, '')\n//     console.warn('working on SBFile()!')\n//     console.log('file: ', file)\n\n//     // this.senderPubKey = key;\n//     // ... done by SBMessage parent?\n//     // this.sign = sbCrypto.sign(channel.keys.channelSignKey, this.contents);\n//     // if (file.type.match(/^image/i)) {\n//     //   this.#asImage(file, signKey)\n//     // } else {\n//     //   throw new Error('Unsupported file type: ' + file.type);\n//     // }\n//   }\n\n//   //   async #asImage(image: File, signKey: CryptoKey) {\n//   //     throw new Error(`#asImage() needs carryover from SBImage etc (${image}, ${signKey})`)\n\n//   //   this.data.previewImage = this.#padImage(await(await this.#restrictPhoto(image, 4096, 'image/jpeg', 0.92)).arrayBuffer());\n//   //   const previewHash: Dictionary = await this.#generateImageHash(this.data.previewImage);\n//   //   this.data.fullImage = image.byteLength > 15728640 ? this.#padImage(await(await this.#restrictPhoto(image, 15360, 'image/jpeg', 0.92)).arrayBuffer()) : this.#padImage(image);\n//   //   const fullHash: Dictionary = await this.#generateImageHash(this.data.fullImage);\n//   //   this.image = await this.#getFileData(await this.#restrictPhoto(image, 15, 'image/jpeg', 0.92), 'url');\n//   //   this.image_sign = await sbCrypto.sign(signKey, this.image);\n//   //   this.imageMetaData = JSON.stringify({\n//   //     imageId: fullHash.id,\n//   //     previewId: previewHash.id,\n//   //     imageKey: fullHash.key,\n//   //     previewKey: previewHash.key\n//   //   });\n//   //   this.imageMetadata_sign = await sbCrypto.sign(signKey, this.imageMetaData)\n//   // }\n\n// } /* class SBFile */\n\n\n// ToDo: some old code that was intended for SBFile, not factored into it yet\n\n// // saveFile(channel: Channel, sbFile: SBFile) {\n// //   console.log(\"saveFile()\")\n// //   // const metaData: Dictionary = jsonParseWrapper(sbFile.imageMetaData, 'L1732');\n// //   const metaData: ImageMetaData = sbFile.imageMetaData\n// //   const fullStorePromise = this.storeImage(sbFile.data.fullImage, metaData.imageId!, metaData.imageKey!, 'f');\n// //   const previewStorePromise = this.storeImage(sbFile.data.previewImage, metaData.previewId!, metaData.previewKey!, 'p');\n// //   Promise.all([fullStorePromise, previewStorePromise]).then((results) => {\n// //     results.forEach((controlData) => {\n// //       channel.sendSbObject({ ...controlData, control: true });\n// //     });\n// //     // psm: need to generalize classes ... sbFile and sbImage descent from sbMessage?\n// //     // channel.sendSbObject(sbFile);\n// //     channel.send(sbFile)\n// //   });\n// // }\n\n// // async sendSbObject(file: SBFile) {\n// //   return (this.send(file))\n// //   // this.ready.then(() => {\n// //   //   this.#wrap(file /* , this.#keys!.encryptionKey */).then((payload) => this.send(payload));\n// //   // } else {\n// //   //   this.#queue.push(file);\n// //   // }\n// // }\n\n", "// (c) 2023 384 (tm)\n\nimport { SBFileSystem } from './SBFileSystem';\n\n// list of low-risk common file types that can be loaded directly (without subdomain)\nconst simpleAndSafeFileTypes: Set<string> = new Set([\n    'application/gzip',   // GZip Compressed Archive\n    'application/json',   // JSON format\n    'application/octet-stream',   // Any kind of binary data\n    'application/pdf',   // Adobe Portable Document Format (PDF)\n    'application/rtf',   // Rich Text Format (RTF)\n    'audio/aac',   // AAC audio\n    'audio/mpeg',   // MP3 audio\n    'audio/mp4',   // MP4 audio\n    'audio/ogg',   // OGG audio\n    'audio/opus',   // Opus audio\n    'audio/wav',   // Waveform Audio Format\n    'audio/webm',   // WEBM audio\n    'font/woff',   // Web Open Font Format (WOFF)\n    'font/woff2',   // Web Open Font Format (WOFF)\n    'image/avif',   // AVIF image\n    'image/bmp',   // Windows OS/2 Bitmap Graphics\n    'image/gif',   // Graphics Interchange Format (GIF)\n    'image/jpeg',   // JPEG images\n    'image/png',   // Portable Network Graphics\n    'image/svg+xml',   // Scalable Vector Graphics (SVG)\n    'image/tiff',   // Tagged Image File Format (TIFF)\n    'image/webp',   // WEBP image\n    'text/csv',   // Comma-separated values (CSV)\n    'text/plain',   // Text, (generally ASCII or ISO 8859-n)\n    'text/xml',   // XML\n    'video/mp2t',   // MPEG transport stream\n    'video/mp4',   // MP4 video\n    'video/mpeg',   // MPEG Video\n    'video/ogg',   // OGG video\n    // PDF is perhaps debatable, but it's a very common format and generally safe\n]);\n\n/** @public */\nexport const file = {\n    SBFileSystem: SBFileSystem,\n    safe: simpleAndSafeFileTypes\n};\n", "// (c) 2023 384 (tm)\n\n// thank you Thomas Lochmatter, thomas.lochmatter@viereck.ch, for jpeg ref code\n\n// takes a JPEG image and extracts and returns key meta data\nexport function readJpegHeader(bytes: Uint8Array) {\t\n    console.log(\"==== loaded SBImageHelper lib version 0.0.10 ====\");\n    // Check for valid JPEG header (null terminated JFIF)\n    let position = 0\n    if (bytes[position ++] !== 0xff) return\n    if (bytes[position ++] !== 0xd8) return\n    // Go through all markers\n    const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength)\n    // Marker format:\n    //   0xff, marker type, length in bytes\n    // Marker types are in the range 0xc0-0xfe\n    //   Skip markers that are not SOFn (Start of Frame)\n    //   SOFn markers have a length of 7-11 bytes\n    //   SOFn markers are either 0xc0 (baseline DCT) or 0xc2 (progressive DCT)\n    //   SOFn markers have 1 byte for the type, 2 bytes for the length\n    //   (1 byte for the precision, 2 for the height, and 2 for the width)\n    //   The rest of the data in the marker is variable\n    while (position + 4 < bytes.byteLength) {\n      // Check that it's a valid marker\n      // FF00 is a special marker used to stuff extra bits into the stream\n      // (it's a valid marker, but it's not actually a marker)\n      if (bytes[position ++] !== 0xff)\n        continue\n      // Get the marker type\n      const type = bytes[position ++]\n      if (bytes[position] == 0xff)\n        // FF00 was found, so skip it\n        continue\n      const length = dv.getUint16(position, false) // big endian\n      if (position + length > bytes.byteLength) return null\n      if (length >= 7 && (type == 0xc0 || type == 0xc2)) {\n        const data = {\n            progressive: type == 0xc2,\n            bitDepth: bytes[position + 2],\n            height: dv.getUint16(position + 3, false),\n            width: dv.getUint16(position + 5, false),\n            components: bytes[position + 7]\n        }\n        return data\n      }\n      position += length\n    }\n    return null\n  }\n", "// (c) 2023-2024 384 (tm)\n\nimport { SBFile } from \"src/file/SBFile\";\nimport { ChannelApi } from \"src/channel/ChannelApi\";\n\n/**\n * Helper class for handling file uploads. See sample apps for usage. It does alot.\n *  \n * @public\n * */\nexport class BrowserFileTable {\n    tableRows = new Map();\n    hasChanges = false;\n\n    constructor(\n        // public sbFileHelper: BrowserFileHelper,   // todo: might be needed to get 'delete' function back\n        public findFileDetails: (hash: string) => SBFile | null,\n        public docElements: {\n            table: Element, // = document.querySelector('#myTable tbody');\n            expandAll?: HTMLElement, // = document.getElementById(\"expandAll\")\n            collapseAll?: HTMLElement, // = document.getElementById(\"collapseAll\")\n            uploadNewSetButton?: HTMLElement, // = document.getElementById(\"uploadNewSetButton\")\n            tableFileInfo: HTMLElement, // = document.getElementById(\"table-file-info\");\n        },\n        public callbacks: {\n            rowClicked?: (metaData: any) => void | null,\n            previewFile?: (hash: string, type: string) => void,\n            downloadFile?: (hash: string, type: string, name: string) => void,\n            copyLink?: (hash: string, type: string) => void,\n\n        }\n    ) {\n        // if (!this.sbFileHelper) throw new Error(\"SBFileHelper is null\")\n        if (!this.docElements.table) throw new Error(\"table is null\")\n        if (!this.docElements.tableFileInfo) throw new Error(\"tableFileInfo is null\")\n        // if (!this.docElements.uploadNewSetButton) console.warn(\"uploadNewSetButton is null\")\n        // if (!this.docElements.expandAll) console.warn(\"expandAll is null\")\n        // if (!this.docElements.collapseAll) console.warn(\"collapseAll is null\")\n        // if (!this.callbacks.previewFile) throw new Error(\"previewFile is null\")\n    }\n\n    addRow(lexicalOrder: any, rowContents: any, metaData: any) {\n        this.tableRows.set(lexicalOrder, { rowContents, metaData });\n\n        // Sort map keys in lexical order\n        this.tableRows = new Map([...this.tableRows.entries()].sort().reverse());\n\n        // Iterate over sorted map and add rows to the table\n        this.docElements.table.innerHTML = \"\";\n        for (let [_key, value] of this.tableRows) {\n            let row = document.createElement('tr');\n            let cell = document.createElement('td');\n            cell.textContent = value.rowContents;\n\n            // Attach click handler with metaData\n            if (this.callbacks.rowClicked) {\n                cell.addEventListener('click', () => {\n                    if (this.docElements.expandAll) this.docElements.expandAll.style.display = \"flex\";\n                    if (this.docElements.collapseAll) this.docElements.collapseAll.style.display = \"flex\";\n                    this.callbacks.rowClicked!(value.metaData)\n                });\n            }\n\n            row.appendChild(cell);\n            this.docElements.table.appendChild(row);\n        }\n    }\n\n    // note: 'editable' also doubles as 'omit' when null\n    // first column is pretty much hard coded to expect a path\n    renderTable(\n        data: any[],\n        headings: any[],\n        editable: string | any[],\n        location: any,\n        onSave: any,\n        actionButtons = true\n    ) {\n        console.log(\"Will render:\", data.length, \"rows:\")\n        console.log(data)\n\n        // let originalData = JSON.parse(JSON.stringify(data));\n        let originalData = data;\n        let numberColumns = headings.length;\n        if (numberColumns !== editable.length) {\n            console.error(\"Number of headings and editable columns must match\")\n            return\n        }\n        let slatedForDeletion: any[] = [];\n        const table = document.createElement(\"table\");\n        const thead = document.createElement(\"thead\");\n        const headingRow = document.createElement(\"tr\");\n\n        const saveBtn = document.createElement(\"button\");\n        const cancelBtn = document.createElement(\"button\");\n\n        const container = document.querySelector(`#${location}`)!;\n\n        i = 0;\n        let propertyNames: string[] = [];\n        headings.forEach((heading: { label: string | null; key: any; }) => {\n            if (editable[i++] !== null) {\n                const headingCell = document.createElement(\"th\");\n                headingCell.textContent = heading.label;\n                propertyNames.push(heading.key);\n                headingRow.appendChild(headingCell);\n            }\n        });\n        thead.appendChild(headingRow);\n        table.appendChild(thead);\n\n        const tbody = document.createElement(\"tbody\");\n        let lastPath = '';\n\n        data.forEach((row: { [x: string]: string | null; path?: any; hash?: any; type?: any; name?: any; }, index: any) => {\n            // Count the number of slashes in the path\n            const PATH_INDENT = 12;\n            const depthPad = PATH_INDENT * (2 / 3) + (((row?.path?.match(/\\//g) || []).length - 1)) * PATH_INDENT;\n\n            if (row.path !== lastPath) {\n                lastPath = row.path;\n                const tableRow = document.createElement(\"tr\");\n                const tableData = document.createElement(\"td\");\n                tableData.colSpan = numberColumns;\n                tableData.textContent = row.path;\n                tableData.style.paddingLeft = depthPad + \"px\";\n                tableRow.appendChild(tableData);\n                tableRow.classList.add(\"folder\");\n                tableRow.dataset.name = row.path;\n                tbody.appendChild(tableRow);\n            }\n\n            const tableRow = document.createElement(\"tr\");\n            tableRow.classList.add(\"file\");\n            tableRow.dataset.filePath = row.path;\n\n            if (numberColumns > Object.keys(row).length) {\n                // having extra (hidden) columns is fine\n                console.error(\"Not enough columns in table for row: \", index)\n                return\n            }\n\n            Object.keys(row).forEach((key, index) => {\n                if (!propertyNames.includes(key))\n                    return;\n\n                if (editable[index] !== null) {\n                    const tableData = document.createElement(\"td\");\n                    if (index == 0) {\n                        tableData.style.paddingLeft = depthPad + PATH_INDENT + \"px\";\n                    }\n                    if (editable[index]) {\n                        const input = document.createElement(\"input\");\n                        input.type = \"text\";\n                        input.value = row[key]!;\n                        input.addEventListener(\"input\", () => {\n                            row[key] = input.value;\n                        });\n                        tableData.appendChild(input);\n                    } else {\n                        if (editable[index] !== null) // null means skip\n                            if ((key === \"type\") && (row[key] !== '')) {\n                                if (!row.hash) throw new Error(\"row.hash is null\")\n                                tableData.dataset.hash = row.hash;\n                                tableData.dataset.type = row.type;\n                                tableData.dataset.path = row.path;\n                                tableData.dataset.name = row.name;\n                                tableData.innerHTML += row[key].slice(0, 20) + \"<span class='preview-file-icon'>\uD83D\uDD0D\uD83D\uDC40</span><span style='margin-left: 8px' class='download-file-icon'>\u2B07\uFE0F</span><span style='margin-left: 8px' class='copy-384-link-icon'>\uD83D\uDD04</span>\";\n                            } else {\n                                tableData.textContent = row[key];\n                            }\n                    }\n                    tableRow.appendChild(tableData);\n                }\n            });\n\n            if (actionButtons) {\n                const deleteButton = document.createElement(\"button\");\n                deleteButton.textContent = \"Remove\";\n                deleteButton.addEventListener(\"click\", () => {\n                    // document.getElementById(\"uploadNewSetButton\")!.setAttribute(\"disabled\", \"true\");\n                    if (this.docElements.uploadNewSetButton) this.docElements.uploadNewSetButton.setAttribute(\"disabled\", \"true\");\n                    tableRow.classList.add(\"slated-for-deletion\");\n                    this.hasChanges = true;\n                    saveBtn.removeAttribute(\"disabled\");\n                    cancelBtn.removeAttribute(\"disabled\");\n                    deleteButton.setAttribute(\"disabled\", \"true\");\n                    console.log(\"slated for deletion: \", index)\n                    slatedForDeletion.push(row.hash)\n                });\n                const actionData = document.createElement(\"td\");\n                actionData.appendChild(deleteButton);\n                tableRow.appendChild(actionData);\n                if (tableRow.classList.contains(\"slated-for-deletion\")) {\n                    tableRow.classList.remove(\"slated-for-deletion\");\n                }\n            }\n            tbody.appendChild(tableRow);\n        });\n        table.appendChild(tbody);\n\n        if (actionButtons) {\n            saveBtn.setAttribute(\"id\", \"saveBtn\")\n            saveBtn.textContent = \"Save\";\n            saveBtn.addEventListener(\"click\", () => {\n                // document.getElementById(\"uploadNewSetButton\")!.removeAttribute(\"disabled\");\n                if (this.docElements.uploadNewSetButton) this.docElements.uploadNewSetButton.removeAttribute(\"disabled\");\n                // data = data.filter(row => !document.querySelector(`tr[data-index=\"${data.indexOf(row)}\"]`).classList.contains(\"slated-for-deletion\"));\n                // data = data.filter(row => !row.classList.contains(\"slated-for-deletion\"));\n                console.log(\"hit save button. original:\")\n                console.log(originalData)\n                data.forEach((item: { hash: any; }, _index: /* string | */ number) => {\n                    if (slatedForDeletion.includes(item.hash)) {\n                        throw new Error(\"slatedForDeletion needs to be updated\")\n                        // // basically, needs to remove file from what BrowserFileHelper is tracking\n                        // console.log(this.sbFileHelper)\n                        // console.log(this.sbFileHelper.finalFileList)\n                        // console.log(data[index])\n                        // // this.sbFileHelper.finalFileList.delete(data[index].fullName)\n                        // // BrowserFileHelper.knownBuffers.delete(data[index].hash)\n                        // console.log(\"deleting: \", index)\n                        // console.log(data[index])\n                        // delete data[index];\n                    }\n                });\n                console.log(\"new:\")\n                console.log(data)\n                // onSave(data);\n                // originalData = JSON.parse(JSON.stringify(data));\n                this.hasChanges = false;\n                saveBtn.setAttribute(\"disabled\", \"true\");\n                cancelBtn.setAttribute(\"disabled\", \"true\");\n\n                this.renderTable(data, headings, editable, location, onSave);\n            });\n            table.appendChild(saveBtn);\n\n            cancelBtn.setAttribute(\"id\", \"cancelBtn\")\n            cancelBtn.textContent = \"Cancel\";\n            cancelBtn.addEventListener(\"click\", () => {\n                // document.getElementById(\"uploadNewSetButton\")!.removeAttribute(\"disabled\");\n                if (this.docElements.uploadNewSetButton) this.docElements.uploadNewSetButton.removeAttribute(\"disabled\");\n                // data = JSON.parse(JSON.stringify(originalData));\n                this.hasChanges = false;\n                saveBtn.setAttribute(\"disabled\", \"true\");\n                cancelBtn.setAttribute(\"disabled\", \"true\");\n                console.log(\"hit cancel button. original:\", data)\n                this.renderTable(originalData, headings, editable, location, onSave);\n            });\n\n            if (this.hasChanges) {\n                saveBtn.removeAttribute(\"disabled\");\n                cancelBtn.removeAttribute(\"disabled\");\n            } else {\n                saveBtn.setAttribute(\"disabled\", \"true\");\n                cancelBtn.setAttribute(\"disabled\", \"true\");\n            }\n            table.appendChild(cancelBtn);\n        }\n        container.innerHTML = \"\";\n        container.appendChild(table);\n\n        function toggleChildren(path: string) {\n            var children = document.querySelectorAll<HTMLElement>('tr[data-file-path=\"' + path + '\"]');\n            console.log(\"toggling children: \", children)\n            for (var j = 0; j < children.length; j++) {\n                console.log(\"toggling: \", children[j])\n                children[j].style.display = (children[j].style.display == 'none') ? '' : 'none';\n            }\n        }\n\n        var nameCells = document.querySelectorAll('tr.folder');\n        // console.log(nameCells)\n        for (var i = 0; i < nameCells.length; i++) {\n            nameCells[i].addEventListener('click', function (this: HTMLTableRowElement) {\n                // copilot: \"this\" referes to the event target for the event listener for the \"click\" event\n                // how do i tell typescript what \"this\" is referring to?\n                if (this.dataset.name) {\n                    console.log(\"Toggling children: \", this.dataset.name)\n                    toggleChildren(this.dataset.name);\n                } else {\n                    console.error(\"this.dataset.name is null\")\n                }\n\n                if (true) {\n                    var children = document.querySelectorAll('tr[data-file-path=\"' + this.dataset.name + '\"]');\n                    console.log(\"click on\")\n                    console.log(this)\n                    console.log(this.dataset.name)\n                    console.log(\"found these children\")\n                    console.log(children)\n                    for (var j = 0; j < children.length; j++) {\n                        (children[j] as HTMLElement).style.display = ((children[j] as HTMLElement).style.display == 'none') ? '' : 'none';\n                    }\n                }\n            });\n        }\n\n        // add an event listener for \"click\" on any of the preview-file-icon\n        // elements we want to pass it the \"type\" and \"hash\" that will be in the\n        // \"data\" attribute of the element and then we want to call the\n        // \"previewFile\" function with those arguments we can do this by using\n        // the \"addEventListener\" function\n\n        document.querySelectorAll(\".preview-file-icon\").forEach((element) => {\n            element.addEventListener(\"click\", (event) => {\n                if (!(event.target instanceof HTMLElement))\n                    throw new Error(\"event.target is not an HTMLElement\");\n                if (!this.callbacks.previewFile)\n                    throw new Error(\"config.callbacks.previewFile is null\")\n                // ToDo: why are these two not needed?\n                // const path = (<HTMLElement>event.target).parentElement?.dataset.path;\n                // const name = (<HTMLElement>event.target).parentElement?.dataset.name;\n                const type = (<HTMLElement>event.target).parentElement?.dataset.type;\n                const hash = (<HTMLElement>event.target).parentElement?.dataset.hash;\n                const file = this.findFileDetails(hash!);\n                console.log(\"file\", file);\n                if (!file)\n                    throw new Error(\"file not found in fileSetMap (?) ... new issue\");\n                // const tableFileInfo = document.getElementById(\"table-file-info\");\n                this.docElements.tableFileInfo.innerHTML = \"\";\n                const theader = document.createElement(\"thead\");\n                const tbody = document.createElement(\"tbody\");\n                const shard = ChannelApi.knownShards.get(hash!);\n                const details = {\n                    name: file.name,\n                    size: file.size,\n                    type: file.type,\n                    lastModified: file.lastModified,\n                    SBDetails: null as string | null,\n                }\n                if (shard) {\n                    details.SBDetails = `${shard.id}.${shard.verification}`\n                }\n                for (const [key, value] of Object.entries(details)) {\n                    const tr = document.createElement(\"tr\");\n                    const th = document.createElement(\"th\");\n                    th.textContent = key;\n                    const td = document.createElement(\"td\");\n                    td.textContent = value as string;\n                    tr.appendChild(th);\n                    tr.appendChild(td);\n                    tbody.appendChild(tr);\n                }\n                this.docElements.tableFileInfo.appendChild(theader);\n                this.docElements.tableFileInfo.appendChild(tbody);\n\n                // this.previewFile(hash!, type!); // remove name, eg 'path! + name'\n                this.callbacks.previewFile(hash!, type!); // remove name, eg 'path! + name'\n\n\n                // for (const [key, value] of Object.entries(details)) {\n                //     const tr = document.createElement(\"tr\");\n                //     const th = document.createElement(\"th\");\n                //     th.textContent = key;\n                //     const td = document.createElement(\"td\");\n                //     td.textContent = value;\n                //     tr.appendChild(th);\n                //     tr.appendChild(td);\n                //     tbody.appendChild(tr);\n                // }\n                // tableFileInfo!.appendChild(theader);\n                // tableFileInfo!.appendChild(tbody);\n                // this.previewFile(path + name, hash, type);\n            });\n        });\n\n        document.querySelectorAll(\".download-file-icon\").forEach((element) => {\n            element.addEventListener(\"click\", (event) => {\n                console.log(this.callbacks)\n                if (!(event.target instanceof HTMLElement))\n                    throw new Error(\"event.target is not an HTMLElement\");\n                if (!this.callbacks.downloadFile)\n                    throw new Error(\"config.callbacks.downloadFile is null\")\n                // ToDo: why are these two not needed?\n                // const path = (<HTMLElement>event.target).parentElement?.dataset.path;\n                // const name = (<HTMLElement>event.target).parentElement?.dataset.name;\n                const type = (<HTMLElement>event.target).parentElement?.dataset.type;\n                const hash = (<HTMLElement>event.target).parentElement?.dataset.hash;\n                const file = this.findFileDetails(hash!);\n                console.log(\"file\", file);\n                if (!file)\n                    throw new Error(\"file not found in fileSetMap (?) ... new issue\");\n                // const tableFileInfo = document.getElementById(\"table-file-info\");\n                this.docElements.tableFileInfo.innerHTML = \"\";\n                const theader = document.createElement(\"thead\");\n                const tbody = document.createElement(\"tbody\");\n                const shard = ChannelApi.knownShards.get(hash!);\n                const details = {\n                    name: file.name,\n                    size: file.size,\n                    type: file.type,\n                    lastModified: file.lastModified,\n                    SBDetails: null as string | null,\n                }\n                if (shard) {\n                    details.SBDetails = `${shard.id}.${shard.verification}`\n                }\n                for (const [key, value] of Object.entries(details)) {\n                    const tr = document.createElement(\"tr\");\n                    const th = document.createElement(\"th\");\n                    th.textContent = key;\n                    const td = document.createElement(\"td\");\n                    td.textContent = value as string;\n                    tr.appendChild(th);\n                    tr.appendChild(td);\n                    tbody.appendChild(tr);\n                }\n                this.docElements.tableFileInfo.appendChild(theader);\n                this.docElements.tableFileInfo.appendChild(tbody);\n\n                if (!file.name) {\n                    console.error(\"[renderTable] file.name is null?\")\n                    file.name = \"<UNKNOWN>\"\n                }\n                this.callbacks.downloadFile(hash!, type!, file.name);\n            });\n        });\n\n        document.querySelectorAll(\".copy-384-link-icon\").forEach((element) => {\n            element.addEventListener(\"click\", (event) => {\n                if (!(event.target instanceof HTMLElement))\n                    throw new Error(\"event.target is not an HTMLElement\");\n                if (!this.callbacks.copyLink)\n                    throw new Error(\"config.callbacks.copyLink is null\")\n                // ToDo: why are these two not needed?\n                // const path = (<HTMLElement>event.target).parentElement?.dataset.path;\n                // const name = (<HTMLElement>event.target).parentElement?.dataset.name;\n                const type = (<HTMLElement>event.target).parentElement?.dataset.type;\n                const hash = (<HTMLElement>event.target).parentElement?.dataset.hash;\n                const file = this.findFileDetails(hash!);\n                console.log(\"file\", file);\n                if (!file)\n                    throw new Error(\"file not found in fileSetMap (?) ... new issue\");\n                // const tableFileInfo = document.getElementById(\"table-file-info\");\n                this.docElements.tableFileInfo.innerHTML = \"\";\n                const theader = document.createElement(\"thead\");\n                const tbody = document.createElement(\"tbody\");\n                const shard = ChannelApi.knownShards.get(hash!);\n                const details = {\n                    name: file.name,\n                    size: file.size,\n                    type: file.type,\n                    lastModified: file.lastModified,\n                    SBDetails: null as string | null,\n                }\n                if (shard) {\n                    details.SBDetails = `${shard.id}.${shard.verification}`\n                }\n                for (const [key, value] of Object.entries(details)) {\n                    const tr = document.createElement(\"tr\");\n                    const th = document.createElement(\"th\");\n                    th.textContent = key;\n                    const td = document.createElement(\"td\");\n                    td.textContent = value as string;\n                    tr.appendChild(th);\n                    tr.appendChild(td);\n                    tbody.appendChild(tr);\n                }\n                this.docElements.tableFileInfo.appendChild(theader);\n                this.docElements.tableFileInfo.appendChild(tbody);\n                this.callbacks.copyLink(hash!, type!);\n\n\n                // for (const [key, value] of Object.entries(details)) {\n                //     const tr = document.createElement(\"tr\");\n                //     const th = document.createElement(\"th\");\n                //     th.textContent = key;\n                //     const td = document.createElement(\"td\");\n                //     td.textContent = value;\n                //     tr.appendChild(th);\n                //     tr.appendChild(td);\n                //     tbody.appendChild(tr);\n                // }\n                // tableFileInfo!.appendChild(theader);\n                // tableFileInfo!.appendChild(tbody);\n                // this.previewFile(path + name, hash, type);\n            });\n        });\n\n    }\n\n}\n// globalThis.renderTable = renderTable;\n\n\n\n// code prior to refactor ...\n\n// function renderTable(data, headings, editable, location, onSave) {\n//     // console.log(\"Will render:\")\n//     // console.log(data)\n//     let numberColumns = headings.length;\n//     if (numberColumns !== editable.length) {\n//         console.error(\"Number of headings and editable columns must match\")\n//         return\n//     }\n//     let slatedForDeletion = [];\n//     const table = document.createElement(\"table\");\n//     const thead = document.createElement(\"thead\");\n//     const headingRow = document.createElement(\"tr\");\n\n//     headings.forEach(heading => {\n//         const headingCell = document.createElement(\"th\");\n//         headingCell.textContent = heading;\n//         headingRow.appendChild(headingCell);\n//     });\n//     thead.appendChild(headingRow);\n//     table.appendChild(thead);\n\n//     const tbody = document.createElement(\"tbody\");\n//     let lastPath = '';\n//     data.forEach((row, index) => {\n\n//         // Count the number of slashes in the path\n//         const PATH_INDENT = 12;\n//         const depthPad = PATH_INDENT * (2 / 3) + (((row.path.match(/\\//g) || []).length - 1)) * PATH_INDENT;\n\n//         if (row.path !== lastPath) {\n//             lastPath = row.path;\n//             const tableRow = document.createElement(\"tr\");\n//             const tableData = document.createElement(\"td\");\n//             tableData.colSpan = numberColumns;\n//             tableData.textContent = row.path;\n//             tableData.style.paddingLeft = depthPad + \"px\";\n//             tableRow.appendChild(tableData);\n//             tableRow.classList.add(\"folder\");\n//             tableRow.dataset.name = row.path;\n//             tbody.appendChild(tableRow);\n//         }\n\n//         const tableRow = document.createElement(\"tr\");\n//         tableRow.classList.add(\"file\");\n//         tableRow.dataset.filePath = row.path;\n\n//         if (numberColumns > Object.keys(row).length) {\n//             // having extra (hidden) columns is fine\n//             console.error(\"Not enough columns in table for row: \", index)\n//             return\n//         }\n\n//         Object.keys(row).slice(0, numberColumns).forEach((key, index) => {\n//             const tableData = document.createElement(\"td\");\n//             if (index == 0) {\n//                 tableData.style.paddingLeft = depthPad + PATH_INDENT + \"px\";\n//             }\n//             if (editable[index]) {\n//                 const input = document.createElement(\"input\");\n//                 input.type = \"text\";\n//                 input.value = row[key];\n//                 input.addEventListener(\"input\", () => {\n//                     row[key] = input.value;\n//                 });\n//                 tableData.appendChild(input);\n//             } else {\n//                 if ((key === \"type\") && (row[key] !== '')) {\n//                     tableData.dataset.hash = row.uniqueShardId;\n//                     tableData.dataset.type = row.type;\n//                     tableData.dataset.path = row.path;\n//                     tableData.dataset.name = row.name;\n//                     tableData.innerHTML += row[key] + \" <span class='preview-file-icon'>\uD83D\uDD0D\uD83D\uDC40</span>\";\n//                 } else {\n//                     tableData.textContent = row[key];\n//                 }\n//             }\n//             tableRow.appendChild(tableData);\n//         });\n\n//         const deleteButton = document.createElement(\"button\");\n//         deleteButton.textContent = \"Remove\";\n//         deleteButton.addEventListener(\"click\", () => {\n//             tableRow.classList.add(\"slated-for-deletion\");\n//             hasChanges = true;\n//             saveBtn.removeAttribute(\"disabled\");\n//             cancelBtn.removeAttribute(\"disabled\");\n//             deleteButton.setAttribute(\"disabled\", true);\n//             slatedForDeletion[index] = true;\n//         });\n//         const actionData = document.createElement(\"td\");\n//         actionData.appendChild(deleteButton);\n//         tableRow.appendChild(actionData);\n//         if (tableRow.classList.contains(\"slated-for-deletion\")) {\n//             tableRow.classList.remove(\"slated-for-deletion\");\n//         }\n//         tbody.appendChild(tableRow);\n//     });\n//     table.appendChild(tbody);\n\n//     const saveBtn = document.createElement(\"button\");\n//     saveBtn.setAttribute(\"id\", \"saveBtn\")\n//     saveBtn.textContent = \"Save\";\n//     saveBtn.addEventListener(\"click\", () => {\n//         // data = data.filter(row => !document.querySelector(`tr[data-index=\"${data.indexOf(row)}\"]`).classList.contains(\"slated-for-deletion\"));\n//         // data = data.filter(row => !row.classList.contains(\"slated-for-deletion\"));\n//         console.log(\"hit save button. original:\")\n//         console.log(originalData)\n//         slatedForDeletion.forEach((value, index) => {\n//             if (value) {\n//                 data.splice(index, 1);\n//             }\n//         });\n//         console.log(\"new:\")\n//         console.log(data)\n//         onSave(data);\n//         originalData = JSON.parse(JSON.stringify(data));\n//         hasChanges = false;\n//         saveBtn.setAttribute(\"disabled\", true);\n//         cancelBtn.setAttribute(\"disabled\", true);\n\n//         renderTable(data, headings, editable, location, onSave);\n//     });\n//     const cancelBtn = document.createElement(\"button\");\n//     cancelBtn.setAttribute(\"id\", \"cancelBtn\")\n//     cancelBtn.textContent = \"Cancel\";\n//     cancelBtn.addEventListener(\"click\", () => {\n//         data = JSON.parse(JSON.stringify(originalData));\n//         hasChanges = false;\n//         saveBtn.setAttribute(\"disabled\", true);\n//         cancelBtn.setAttribute(\"disabled\", true);\n//         renderTable(data, headings, editable, location, onSave);\n//     });\n\n//     if (hasChanges) {\n//         saveBtn.removeAttribute(\"disabled\");\n//         cancelBtn.removeAttribute(\"disabled\");\n//     } else {\n//         saveBtn.setAttribute(\"disabled\", true);\n//         cancelBtn.setAttribute(\"disabled\", true);\n//     }\n//     table.appendChild(saveBtn);\n//     // console.log(saveBtn)\n//     table.appendChild(cancelBtn);\n//     const container = document.querySelector(`#${location}`);\n//     container.innerHTML = \"\";\n//     container.appendChild(table);\n\n//     function toggleChildren(path) {\n//         var children = document.querySelectorAll('tr[data-file-path=\"' + path + '\"]');\n//         for (var j = 0; j < children.length; j++) {\n//             children[j].style.display = (children[j].style.display == 'none') ? '' : 'none';\n//         }\n//     }\n\n//     var nameCells = document.querySelectorAll('tr.folder');\n//     // console.log(nameCells)\n//     for (var i = 0; i < nameCells.length; i++) {\n//         nameCells[i].addEventListener('click', function () {\n//             toggleChildren(this.dataset.name);\n\n//             // var children = document.querySelectorAll('tr[data-file-path=\"' + this.dataset.name + '\"]');\n//             // console.log(\"click on\")\n//             // console.log(this)\n//             // console.log(this.dataset.name)\n//             // console.log(\"found these children\")\n//             // console.log(children)\n//             // for (var j = 0; j < children.length; j++) {\n//             //     children[j].style.display = (children[j].style.display == 'none') ? '' : 'none';\n//             // }\n//         });\n//     }\n\n//     // add an event listener for \"click\" on any of the preview-file-icon elements\n//     // we want to pass it the \"type\" and \"hash\" that will be in the \"data\" attribute of the element\n//     // and then we want to call the \"previewFile\" function with those arguments\n//     // we can do this by using the \"addEventListener\" function\n\n//     document.querySelectorAll(\".preview-file-icon\").forEach((element) => {\n//         element.addEventListener(\"click\", (event) => {\n//             const path = event.target.parentElement.dataset.path;\n//             const name = event.target.parentElement.dataset.name;\n//             const type = event.target.parentElement.dataset.type;\n//             const hash = event.target.parentElement.dataset.hash;\n//             previewFile(path + name, hash, type);\n//         });\n//     });\n\n// }\n// globalThis.renderTable = renderTable;\n\n// let hasChanges = false;\n", "// (c) 2023-2024 384 (tm)\n\nimport { SBError } from 'src/common';\n\n/** @public */\nexport async function browserPreviewFile(\n    data: ArrayBuffer,\n    mimeType: string,\n    docElements: {\n        mainDoc: Document,\n        preview: HTMLElement,\n        maxButton: HTMLElement,\n        // ToDo: hm no 'minButton'?\n    }\n) {\n    console.log('previewFile', data, mimeType, docElements)\n    if (!data || !(data instanceof ArrayBuffer)) throw new Error(\"[browserPreviewFile] data not found or not an ArrayBuffer\");\n\n    // const IFRAME_SANDBOX_strict = 'allow-same-origin';\n    const IFRAME_SANDBOX_weak = 'allow-same-origin allow-scripts allow-popups allow-forms allow-modals allow-top-navigation';\n\n    if (!docElements || !docElements.mainDoc || !docElements.preview || !docElements.maxButton)\n        throw new Error(\"previewFile: docElements not found or incomplete\")\n\n    const preview = docElements.preview // document.getElementById('preview');\n    if (!preview) throw new Error(\"browserPreviewFile: preview element not found\")\n    preview.innerHTML = '';\n    preview.style.minHeight = '100%';\n    preview.style.display = 'flex';\n    if (mimeType === 'text/html') {\n        const iframe = docElements.mainDoc.createElement('iframe') // document.createElement('iframe');\n        iframe.setAttribute('id', 'myIframe')\n        iframe.setAttribute('sandbox', IFRAME_SANDBOX_weak);\n        iframe.style.width = '100%';\n        iframe.style.height = '100%';\n        preview.appendChild(iframe);\n\n        docElements.maxButton.style.display = \"\";\n\n        // Convert the data to a string\n        const htmlContent = new TextDecoder().decode(data);\n        // Inject the HTML content into the iframe\n        if (!iframe.contentWindow) throw new SBError(\"previewFile: iframe.contentWindow not found\")\n        iframe.contentWindow.document.open();\n        iframe.contentWindow.document.write(htmlContent);\n        iframe.contentWindow.document.close();\n\n    } else if (mimeType.startsWith('image/')) {\n        preview.style.display = 'block';\n        // Create a Blob with the data and the provided MIME type\n        const fileBlob = new Blob([data], { type: mimeType });\n        // Generate a URL from the Blob\n        const fileURL = URL.createObjectURL(fileBlob);\n        // Create an img element for images\n        const img = docElements.mainDoc.createElement('img') // document.createElement('img');\n        img.style.width = '100%';\n        // img.style.height = '100%'; // We remove the height so the image is shown at the top of the container\n        img.style.objectFit = 'contain'; // To preserve aspect ratio and fit the image inside the container\n        img.src = fileURL;\n        docElements.maxButton.style.display = \"none\";\n        preview.appendChild(img);\n    } else {\n        preview.style.minHeight = '768px';\n        // Inject the message into the iframe\n        const message = 'This file might not show correctly or might be auto-downloaded.';\n        const iframe = docElements.mainDoc.createElement('iframe') // document.createElement('iframe');\n        if (!iframe) throw new Error(\"previewFile: iframe element not found\")\n        iframe.setAttribute('id', 'myIframe')\n        // iframe.setAttribute('sandbox', IFRAME_SANDBOX_strict);\n        iframe.style.width = '100%';\n        // iframe.style.height = '500px'; // Adjust the height to your needs\n        // iframe.style.height = '100%';\n        preview.appendChild(iframe);\n        if (!iframe.contentWindow) throw new Error(\"previewFile: iframe.contentWindow not found\")\n        iframe.contentWindow.document.open();\n        iframe.contentWindow.document.write('<html><head></head><body><p>' + message + '</p></body></html>');\n        iframe.contentWindow.document.close();\n\n        // Create a Blob with the data and the provided MIME type\n        const fileBlob = new Blob([data], { type: mimeType });\n\n        // Generate a URL from the Blob\n        const fileURL = URL.createObjectURL(fileBlob);\n\n        // Wait for a short period before injecting the actual content\n        setTimeout(() => {\n            // Create an iframe to display other content types\n            // const iframe = document.createElement('iframe');\n            // iframe.style.width = '100%';\n            // iframe.style.height = '500px'; // Adjust the height to your needs\n            iframe.src = fileURL;\n            // preview.appendChild(iframe);\n            docElements.maxButton.style.display = \"\";\n\n            // Release the Blob URL to free up memory (optional, can be done later)\n            iframe.addEventListener('unload', () => {\n                URL.revokeObjectURL(fileURL);\n            });\n        }\n            , 200);\n    }\n\n}\n", "// (c) 2024 384 (tm)\n\nexport async function clearBrowserState() {\n    try {\n        // Unregister all service workers\n        const registrations = await navigator.serviceWorker?.getRegistrations() || [];\n        await Promise.all(registrations.map(reg => reg.unregister()));\n\n        // Clear localStorage, sessionStorage, and cookies\n        localStorage.clear();\n        sessionStorage.clear();\n\n        // ToDo: cookies can 'hide', unclear how to delete them all, or if that's even a problem\n        document.cookie.split(\";\").forEach(c => {\n            document.cookie = c.trim().split(\"=\")[0] + '=;expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/';\n        });\n\n        // Delete all IndexedDB databases\n        const dbs = await indexedDB.databases();\n        await Promise.all(dbs.map(db => { if (db.name) indexedDB.deleteDatabase(db.name) }));\n\n        // Clear all caches\n        const cacheNames = await caches.keys();\n        await Promise.all(cacheNames.map(name => caches.delete(name)));\n\n        console.info('... done.');\n    } catch (error) {\n        console.error('Error clearing something:', error);\n    }\n}", "// (c) 2023 384 (tm)\n\nimport { BrowserFileHelper, getMimeType } from './BrowserFileHelper';\nimport { readJpegHeader } from './images';\nimport { BrowserFileTable } from './BrowserFileTable';\nimport { SBServiceWorker } from '../boot/serviceWorker';\nimport { browserPreviewFile } from './browserPreviewFile';\nimport { clearBrowserState } from './utils';\n\n\n/** @public */\nexport const browser = {\n    BrowserFileHelper: BrowserFileHelper,\n    BrowserFileTable: BrowserFileTable,\n    serviceWorker: SBServiceWorker,\n    fileViewer: browserPreviewFile,\n    images: {\n        readJpegHeader: readJpegHeader\n    },\n    getMimeType: getMimeType,\n    clearBrowserState: clearBrowserState,\n};\n", "// (c) 2023 384 (tm)\n\nimport { MessageType, MessageTypeList } from './MessageType';\nimport { ChannelStream } from './ChannelStream'\n\nimport { ChannelApi  } from './ChannelApi'\nimport { ChannelKeys } from './ChannelKeys'\n\n/** @public */\nexport const channel = {\n    api: ChannelApi,\n    types: MessageType,\n    typeList: MessageTypeList,\n    stream: ChannelStream,\n    keys: ChannelKeys,\n};\n", "// (c) 2024 384 (tm)\n\nimport { Protocol_AES_GCM_256 } from 'src/channel/Protocol';\nimport { Channel } from 'src/channel/Channel';\nimport { ChannelHandle } from 'src/channel/ChannelHandle';\nimport { SBEventTarget } from 'src/utils/SBEventTarget';\nimport { ChannelStream } from '../channel/ChannelStream';\n\n// apps should use something from manifest, but this works as fall back\nconst keyInfo = {\n    salt1: new Uint8Array([166, 7, 217, 206, 20, 225, 139, 8, 157, 23, 48, 13, 113, 93, 140, 233]),\n    iterations1: 100000,\n    iterations2: 10000,\n    hash1: \"SHA-256\",\n    summary: \"PBKDF2 - SHA-256 - AES-GCM\"\n}\n\nfunction initialized<T extends { initialized: boolean }>(_target: T, propertyKey: string, descriptor: PropertyDescriptor) {\n    const original = descriptor.value || descriptor.get || descriptor.set;\n    function checkInitialization(this: T) {\n        if (!this.initialized)\n            throw new Error(`[AppMain] Cannot access ${propertyKey} before initialization.`);\n    }\n    if (original) {\n        const adjustedFunction = function (this: T, ...args: any[]) {\n            checkInitialization.call(this);\n            return original.apply(this, args);\n        };\n        if (descriptor.value) descriptor.value = adjustedFunction; // setter\n        if (descriptor.get) descriptor.get = adjustedFunction; // getter\n        if (descriptor.set) descriptor.set = function (this: T, value: any) { // method\n            checkInitialization.call(this);\n            original.call(this, value);\n        };\n    }\n    return descriptor;\n}\n\n// ToDo: AppMain is pretty confused about what is global (static) and what is not\n\n/**\n * 'Main' class for os384 apps. Note that you need to 'await init()'\n * before you can use it. Just as a 'main' function or object in \n * many languages, there should only be one of these in an app.\n * @public\n */\nexport class AppMain extends SBEventTarget {\n    #channelServer?: string;\n\n    #ledgerChannel: Promise<Channel> | undefined;\n    #ledgerStream?: ChannelStream;\n    #budgetChannel: Promise<Channel> | undefined;\n\n    // #ledgerChannelSocket: Promise<ChannelSocket> | undefined;\n    // ledgerStream: typeof channel.stream | undefined;\n    protocol: Protocol_AES_GCM_256 | undefined;\n\n    #budgetHandle?: ChannelHandle\n    #ledgerHandle?: ChannelHandle\n\n    #manifest: any = {};\n    #channelMap: Map<string, any> = new Map();\n\n    // TODO: should come from manifest\n    #ledgerPassPhrase = \"officer stitch stretched\"\n\n    #initialized = false;\n    static #instanceCount = 0;\n\n    // convenience references\n    on = AppMain.on;\n    off = AppMain.off;\n    emit = AppMain.emit;\n\n    constructor() {\n        super()\n        AppMain.#instanceCount++;\n        if (AppMain.#instanceCount > 1) {\n            throw new Error(\"[AppMain] An os384 app should only have one 'main' class.\")\n        }\n\n    }\n\n    /**\n     * Initializes the AppMain object. This should be called before\n     * any other methods or properties are accessed. Among other things,\n     * it loads the manifest file, and sets up the 'ledger' and 'budget'\n     * channels (if they are defined in the manifest).\n     */\n    async init() {\n        if (this.#initialized) {\n            console.warn(\"[AppMain] Already initialized, skipping init.\")\n            return;\n        }\n        console.log('[AppMain]] Init')\n        const response = await fetch('/384.manifest.json');\n        try {\n            this.#manifest = await response.json();\n            console.log('[AppMain] Manifest file contents:\\n', JSON.stringify(this.#manifest, null, 2), '\\n');\n        } catch (error) {\n            this.#manifest = {};\n            console.error('[AppMain] Error loading manifest file, ignoring it:', error, response);\n        }\n        // we process channels into a map for easier access\n        for (const channel of (this.#manifest as any).channels)\n            this.#channelMap.set(channel.name, channel);\n        // if we're host, we get these handles; if we're guest, we don't\n        if (this.#channelMap.get('budget'))\n            this.#budgetHandle = this.#channelMap.get('budget')?.handle\n        if (this.#channelMap.get('ledger')) {\n            this.#ledgerHandle = this.#channelMap.get('ledger')?.handle\n            this.#ledgerPassPhrase = this.#channelMap.get('ledger')!.passphrase\n        }\n        this.protocol = new Protocol_AES_GCM_256(this.#ledgerPassPhrase, keyInfo)\n        this.#channelServer = this.#manifest.channelServer\n        this.#initialized = true;\n    }\n    get initialized() { return this.#initialized }\n\n    /** Returns channelServer you're on */\n    @initialized get channelServer() {\n        if (!this.#channelServer) throw new Error(\"[AppMain] No channel server\");\n        return this.#channelServer\n    }\n\n    /** Returns the 'ledger' handle, throws if there is none. */\n    @initialized get ledgerHandle() {\n        if (this.#ledgerHandle) return this.#ledgerHandle;\n        else throw new Error(\"[AppMain] No ledger handle\")\n    }\n    /** Returns a promise to the 'ledger' channel, throws if there is none. */\n    @initialized get ledgerChannel() {\n        if (this.#ledgerChannel) return this.#ledgerChannel;\n        if (!this.#ledgerHandle) throw new Error(\"[AppMain] No ledger handle\")\n        return (new Channel(this.ledgerHandle, this.protocol).ready)\n    }\n    /** Returns the 'budget' handle, throws if there is none */\n    @initialized get budgetHandle() {\n        if (this.#budgetHandle) return this.#budgetHandle;\n        else throw new Error(\"[AppMain] No budget handle\")\n    }\n    /** Returns a promise to the 'budget' channel, throws if there is none */\n    @initialized get budgetChannel() {\n        if (this.#budgetChannel) return this.#budgetChannel;\n        if (!this.#budgetHandle) throw new Error(\"[AppMain] No budget handle\")\n        return (new Channel(this.budgetHandle, this.protocol).ready)\n    }\n    @initialized get keyInfo() {\n        return keyInfo\n    }\n    /**\n     * Returns the full manifest data structure. This will be an empty\n     * object if there wasn't a manifest, or if it couldn't be loaded or parsed.\n     */\n    @initialized get manifest() {\n        return this.#manifest\n    }\n    /**\n     * Returns any 'parameters' passed to the app. If there weren't any,\n     * or there wasn't a manifest, or there was an issue with the manifest,\n     * etc, will return an empty object.\n     */\n    @initialized get parameters() {\n        if (this.#manifest.parameters) return this.#manifest.parameters\n        else return {}\n    }\n    /**\n     * Will return the channel object from the manifest, or undefined if\n     * it doesn't exist. Note that the two channels 'budget' and 'ledger'\n     * have special handling, though they will be returned here as well.\n     */\n    @initialized getChannel(name: string) {\n        return this.#channelMap.get(name)\n    }\n\n    /**\n     * Starts processing all messages on the 'ledger' channel.\n     * This is an async function that will run forever, or until\n     * an error occurs. It will emit events 'ledgerMessage_<type>', \n     * us 'AppMain.on()' to listen for these events. If there's no\n     * ledger (eg non-vault app etc), it will log a warning and return.\n     */\n    @initialized async processLedgerMessages() {\n        if (!this.#ledgerHandle) {\n            console.warn(\"[AppMain] No ledger handle, skipping processLedgerMessages\")\n            return\n        }\n        if (this.#ledgerStream) throw new Error(\"[AppMain] Ledger stream already running (restarting not yet supported)\")\n        this.#ledgerStream = new ChannelStream(this.ledgerHandle, this.protocol)\n        const stream = this.#ledgerStream.start({ prefix: '0' });\n        for await (const message of stream) {\n            if (typeof message.body === 'string') {\n                console.info(\"[processMessages] received string message (ignoring):\", message.body)\n            } else {\n                AppMain.emit(`ledgerMessage_${message.body.type}`, message.body)\n            }\n        }\n    }\n\n}", "// (c) 2024 384 (tm)\n\n/*\n * SELECTIVE things from server workers; ToDo: merge to identical\n*/\n\nimport { ServerDeepHistory } from \"../index\";\n\nimport { MAX_SB_BODY_SIZE as _MAX_SB_BODY_SIZE } from \"../channel/config\";\n\nconst _STORAGE_SIZE_UNIT = 4096 // 4KB\n\nexport const serverConstants = {\n    // minimum unt of storage\n    STORAGE_SIZE_UNIT: _STORAGE_SIZE_UNIT,\n\n    // Currently minimum (raw) storage is set to 32KB. This will not\n    // be LOWERED, but future design changes may RAISE that. \n    STORAGE_SIZE_MIN: 8 * _STORAGE_SIZE_UNIT,\n\n    // Current maximum (raw) storage is set to 16MB. This may change.\n    // Note that this is for SHARDS not CHANNEL\n    STORAGE_SIZE_MAX: 4096 * _STORAGE_SIZE_UNIT,\n\n    // // new channel budget (bootstrap) is 3 GB (about $1)\n    // NEW_CHANNEL_BUDGET: 3 * 1024 * 1024 * 1024, // 3 GB\n\n    // sanity check - set a max at one petabyte (2^50) .. at a time\n    MAX_BUDGET_TRANSFER: 1024 * 1024 * 1024 * 1024 * 1024, // 1 PB\n\n    // see discussion elsewhere\n    MAX_SB_BODY_SIZE: _MAX_SB_BODY_SIZE,\n\n    // maximum number of (perma) messages kept in KV format; beyond this,\n    // messages are shardified. note that current CF hard limit is 1000.\n    MAX_MESSAGE_SET_SIZE: ServerDeepHistory.MAX_MESSAGE_SET_SIZE,\n    MESSAGE_HISTORY_BRANCH_FACTOR: ServerDeepHistory.MESSAGE_HISTORY_BRANCH_FACTOR,\n}\n\nexport const serverApiCosts = {\n    // multiplier of cost of storage on channel vs. storage server\n    // (this includes Pages)\n    CHANNEL_STORAGE_MULTIPLIER: 8.0,\n    CHANNEL_STORAGE_MULTIPLIER_TTL_ZERO: 1.0/8.0 // upwards 1/100th cost of storing\n}\n\n// internal - handle assertions\nexport function _sb_assert(val: unknown, msg: string) {\n    if (!(val)) {\n        const m = `<< SB assertion error: ${msg} >>`;\n        throw new Error(m);\n    }\n}\n\n// appends one to the other\nexport function _appendBuffer(buffer1: Uint8Array | ArrayBuffer, buffer2: Uint8Array | ArrayBuffer): ArrayBuffer {\n    const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n    tmp.set(new Uint8Array(buffer1), 0);\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n    return tmp.buffer;\n}\n\n// list of MIME types that are considered \"text-like\", which a Page retrieval\n// will attempt to decode as text\nexport const textLikeMimeTypes: Set<string> = new Set([\n    // Textual Data\n    \"text/plain\",\n    \"text/html\",\n    \"text/css\",\n    \"text/javascript\", // Note: application/javascript is more correct for JS\n    \"text/xml\",\n    \"text/csv\",\n\n    // Application Data (often textual in nature)\n    \"application/json\",\n    \"application/javascript\", // More correct MIME type for JavaScript\n    \"application/xml\",\n    \"application/xhtml+xml\",\n    \"application/rss+xml\",\n    \"application/atom+xml\",\n\n    // Markup Languages\n    \"image/svg+xml\",\n]);\n\n// Example function to check if a MIME type is considered \"text-like\"\nexport function isTextLikeMimeType(mimeType: string): boolean {\n    return textLikeMimeTypes.has(mimeType);\n}\n\n// // Example usage\n// console.log(isTextLikeMimeType(\"text/html\")); // true\n// console.log(isTextLikeMimeType(\"application/json\")); // true\n// console.log(isTextLikeMimeType(\"image/jpeg\")); // false\n\n\n// Reminder of response codes we use:\n//\n// 101: Switching Protocols (downgrade error)\n// 200: OK\n// 400: Bad Request\n// 401: Unauthorized\n// 403: Forbidden\n// 404: Not Found\n// 405: Method Not Allowed\n// 413: Payload Too Large\n// 418: I'm a teapot\n// 429: Too Many Requests\n// 500: Internal Server Error\n// 501: Not Implemented\n// 507: Insufficient Storage (WebDAV/RFC4918)\n//\nexport type ResponseCode = 101 | 200 | 400 | 401 | 403 | 404 | 405 | 413 | 418 | 429 | 500 | 501 | 507;\nexport interface ReturnOptions {\n    status?: ResponseCode,\n    delay?: number,\n    headers?: HeadersInit,\n    type?: string // MIME type, if omitted defaults to 'sb384payloadV3' eg payload/octet-stream\n}\n", "/*!\n * Copyright 2023-2024 384, Inc.\n * \"384\" and \"os384\" are registered trademarks.\n * https://384.co\n */\n\nexport const version = '3.20241018.0' // this is top lev (lib/os) version\n\nexport type {\n    ChannelId, SBUserId, SBUserPrivateKey, SBUserPublicKey,\n} from './common'\nexport { SBError, SBApiFetch, jsonParseWrapper, isSBUserId } from './common'\n\nexport { boot } from './boot/index'\nexport { SBServiceWorker } from './boot/serviceWorker';\nexport { loadShard, bootstrapJsLib } from './boot/loadShard'\nexport { bootstrapLoaderClass } from './boot/loaderLoader'\nexport { getDomainDetails } from './boot/tld'\n\nexport { strongphrase } from './strongphrase/index'\nexport {\n    generatePassPhrase,\n    generateStrongKey,\n    recreateStrongKey,\n} from './strongphrase/strongphrase'\n\nexport { utils } from './utils/index'\nexport {\n    base64ToArrayBuffer,\n    arrayBufferToBase64url,\n} from './utils/b64'\nexport {\n    arrayBufferToBase62,\n    base62ToArrayBuffer,\n    isBase62Encoded,\n    b62regex,\n} from './utils/b62'\nexport type { Base62Encoded } from './utils/b62'\nexport {\n    extractPayload,\n    assemblePayload,\n} from './utils/payloads'\nexport { _appendBuffers, compareBuffers } from './utils/buffers'\nexport { MessageQueue } from './utils/MessageQueue'\nexport { base62ToBase64, base64ToBase62 } from './utils/index'\nexport { SBEventTarget } from './utils/SBEventTarget'\nexport { AsyncSequence } from './utils/AsyncSequence'\n\nexport { sbCrypto } from './sbCrypto/index'\nexport {\n    generateStrongPin,\n    generateStrongPin16,\n} from './sbCrypto/strongpin'\nexport type { } from './sbCrypto/strongpin';\nexport { SB384 } from './sbCrypto/SB384'\nexport { SBCrypto, hydrateKey } from './sbCrypto/SBCrypto'\n\nexport { file } from './file/index'\nexport {\n    SBFile,\n    isSBFile\n} from './file/SBFile'\n\nexport { browser } from './browser/index'\nexport { BrowserFileTable } from './browser/BrowserFileTable';\nexport { browserPreviewFile } from './browser/browserPreviewFile';\nexport { BrowserFileHelper, getMimeType } from './browser/BrowserFileHelper'\nexport { clearBrowserState } from './browser/utils'\nexport { readJpegHeader } from './browser/images'\n\nexport { StorageApi } from './storage/StorageApi'\nexport type { ObjectHandle } from './storage/ObjectHandle';\nexport { validate_ObjectHandle, stringify_ObjectHandle } from './storage/ObjectHandle';\nexport type { SBStorageToken } from './storage/StorageToken'\nexport { validate_SBStorageToken, generateStorageToken } from './storage/StorageToken'\nexport { DeepHistory, ServerDeepHistory, ClientDeepHistory } from './storage/MessageHistory'\nexport { HistoryTree, HistoryTreeNode } from './storage/HistoryTree'\nexport { fetchDataFromHandle } from './storage/core'\n\nexport { channel } from './channel/index'\nexport type { Message } from './channel/Message'\nexport { MessageCache } from './channel/MessageCache'\nexport { MessageType } from './channel/MessageType';\nexport { ChannelStream } from './channel/ChannelStream'\nexport { ChannelApi, validate_ChannelApiBody } from './channel/ChannelApi'\nexport { Channel, validate_SBChannelData } from './channel/Channel'\nexport { ChannelKeys } from './channel/ChannelKeys'\nexport type { ChannelHandle } from './channel/ChannelHandle'\nexport { validate_ChannelHandle } from './channel/ChannelHandle'\nexport type { SBProtocol, Protocol_KeyInfo } from './channel/Protocol'\nexport { Protocol_AES_GCM_256, Protocol_ECDH } from './channel/Protocol'\nexport { stripChannelMessage, validate_ChannelMessage } from './channel/ChannelMessage'\nexport type { ChannelMessage } from './channel/ChannelMessage'\nexport { ChannelSocket } from './channel/ChannelSocket'\nexport { NEW_CHANNEL_MINIMUM_BUDGET } from './channel/config'\n\n\nexport { SBFileSystem } from './file/SBFileSystem'\nexport type { FileSetMeta } from './file/SBFileSystem';\n\nexport { AppMain } from './app/AppMain'\n\nexport type { StrongphraseParams } from './strongphrase/strongphrase';\n\nexport { isTextLikeMimeType, serverApiCosts } from './workers/workers'\n\n// these are typically set in the build process\n//\ndeclare var DBG2: boolean;\n\n// general pattern: 'DBG0' is used 'locally' in files, 'DBG2' globally,\n// and 'DBG' might be reintroduced as global (lightweight) output\nif (typeof DBG2 === 'undefined') (globalThis as any).DBG2 = false\n\nvar DBG0 = false // internal, set it to 'true' or 'DBG2'\nif (DBG0) console.log(\"++++ Setting DBG0 to TRUE ++++\");\n\n\n"],
  "mappings": "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",
  "names": ["SEP", "DBG0", "payload", "buffer", "result", "s", "DBG0", "SEP", "DBG0", "DBG0", "SEP", "handle", "DBG0", "DBG0", "DBG0", "DBG2", "SEP", "keyInfo", "DBG0", "SEP", "DBG2", "DBG0", "DBG2", "DBG0", "resolve", "e", "DBG2", "DBG0", "keyInfo", "DBG0", "DBG0", "DBG0", "DBG2", "_SEP_", "SEP", "DBG0", "DBG2", "isNil", "channel", "SEP", "_SEP", "DBG0", "_check_SBChannelData", "DBG2", "SEP", "SEP_", "_check_SBChannelData", "DBG2", "DBG0", "SEP", "DBG2", "DBG0", "DBG2", "SEP", "base32mi", "base62Regex", "DBG0", "ySign", "base32mi", "DBG0", "DBG0", "DBG2", "_SEP_", "SEP", "_SEP", "SEP_", "isNil", "b62regex", "baseDomain", "subdomain", "DBG0", "DBG2", "DBG2", "DBG2", "DBG0", "DBG2", "SEP", "propertyList", "file", "event", "MessageType", "DBG0", "DBG2", "SEP", "DBG0", "DBG2", "DBG0", "DBG2", "_assert", "SEP", "e", "SEP_", "DBG0", "DBG2", "SEP", "hash", "file", "tableRow", "index", "file", "tbody", "channel", "DBG0"]
}
